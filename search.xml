<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitBook</title>
      <link href="/posts/44947.html"/>
      <url>/posts/44947.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GitBook"><a href="#GitBook" class="headerlink" title="GitBook"></a>GitBook</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><blockquote><p>安装和使用GitBook 完成GitBook的安装只需要几分钟。 </p></blockquote><blockquote><p><strong>GitBook.com</strong></p><p>GitBook.com为您提供简单高效的图书在线撰写、发布和托管方案， 你可以通过</p><p>进行在线编辑、或者使用GitBook 本地编辑器在本地电脑上编辑。 </p></blockquote><blockquote><p>本地安装 要求 GitBook的安装非常简单。</p><p>您的系统只需满足这两个要求： </p><ul><li>NodeJS（推荐使用v4.0.0及以上版本） </li><li>Windows，Linux，Unix或Mac OS X 使用NPM安装 安装GitBook的最好方法是通过 NPM 安装。</li></ul></blockquote><blockquote><p>在已经安装好NodeJS和NPM的电脑上，通过命令行窗口，输入以下命令安装GitBook：</p></blockquote><pre class=" language-shell"><code class="language-shell">npm install gitbook-cli -g gitbook-cli</code></pre><h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><blockquote><p>创建一本书</p></blockquote><pre class=" language-shell"><code class="language-shell">gitbook init</code></pre><blockquote><p>如果你想用现有的目录来创建一本书，你可以通过运行 gitbook init ./directory来实现 使用下面的命令预览您创建的图书：</p></blockquote><pre class=" language-shell"><code class="language-shell">gitbook serve </code></pre><blockquote><p>或者使用以下命令构建静态网站：</p></blockquote><pre class=" language-shell"><code class="language-shell">gitbook build</code></pre><blockquote><p>安装其他版本<br>gitbook命令可以方便地下载和安装不同版本的GitBook来测试你的书：<br>$ gitbook fetch 4.0.0-alpha.1 </p><p>使用gitbook ls-remote列出可用于安装的远程版本。 </p><p>$ gitbook ls-remote Available GitBook Versions: 4.0.0-alpha.5, …部分省略…, 4.0.0-alpha.1, 3.2.2, 3.2.1, …部分省略…, 2.0.0-alpha.1 Tags: latest : 3.2.2 pre : 4.0.0-alpha.5 </p><p><strong>调试</strong> </p><p>您可以使用–log=debug和–debug来获得更详细的错误消息（堆栈跟踪）。<br>例如： $ gitbook build ./ –log=debug –debug or $ gitbook serve ./ –log=debug –debug</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python强化练习</title>
      <link href="/posts/47220.html"/>
      <url>/posts/47220.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230224850.png" alt=""></p><h1 id="Python强化练习"><a href="#Python强化练习" class="headerlink" title="Python强化练习"></a>Python强化练习</h1><h2 id="1、给程序传参数"><a href="#1、给程序传参数" class="headerlink" title="1、给程序传参数"></a>1、给程序传参数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230212512.png" alt="外部传参"></p><h2 id="2、列表推导式"><a href="#2、列表推导式" class="headerlink" title="2、列表推导式"></a>2、列表推导式</h2><blockquote><p>所谓的列表推导式，就是指的轻量级循环创建列表</p></blockquote><h3 id="2-1、基本的方式"><a href="#2-1、基本的方式" class="headerlink" title="2.1、基本的方式"></a>2.1、基本的方式</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230213445.png" alt=""></p><blockquote><p>请忽略手残的错误。。。</p></blockquote><h3 id="2-2、在循环的过程中使用if"><a href="#2-2、在循环的过程中使用if" class="headerlink" title="2.2、在循环的过程中使用if"></a>2.2、在循环的过程中使用if</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230213841.png" alt=""></p><h3 id="2-3、2个for循环"><a href="#2-3、2个for循环" class="headerlink" title="2.3、2个for循环"></a>2.3、2个for循环</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230214029.png" alt=""></p><h3 id="2-4、3个for循环"><a href="#2-4、3个for循环" class="headerlink" title="2.4、3个for循环"></a>2.4、3个for循环</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230214042.png" alt=""></p><h3 id="2-5、练习"><a href="#2-5、练习" class="headerlink" title="2.5、练习"></a>2.5、练习</h3><blockquote><p>请写出一段 Python 代码实现分组一个 list 里面的元素,比如 [1,2,3,…100]变成 [[1,2,3],[4,5,6]….]</p></blockquote><p>参考答案</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230222649.png" alt=""></p><h2 id="3、set、list、tuple"><a href="#3、set、list、tuple" class="headerlink" title="3、set、list、tuple"></a>3、set、list、tuple</h2><blockquote><h2 id="set是集合类型"><a href="#set是集合类型" class="headerlink" title="set是集合类型"></a>set是集合类型</h2></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230224052.png" alt=""></p><blockquote><h2 id="set、list、tuple之间可以相互转换"><a href="#set、list、tuple之间可以相互转换" class="headerlink" title="set、list、tuple之间可以相互转换"></a>set、list、tuple之间可以相互转换</h2><h2 id="使用set，可以快速的完成对list中的元素去重复的功能"><a href="#使用set，可以快速的完成对list中的元素去重复的功能" class="headerlink" title="使用set，可以快速的完成对list中的元素去重复的功能"></a>使用set，可以快速的完成对list中的元素去重复的功能</h2></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230224322.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建ubuntu</title>
      <link href="/posts/48061.html"/>
      <url>/posts/48061.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230114723.png" alt="ubuntu"></p><h1 id="Ubuntu系统"><a href="#Ubuntu系统" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h1><h2 id="1、虚拟机操作系统"><a href="#1、虚拟机操作系统" class="headerlink" title="1、虚拟机操作系统"></a>1、虚拟机操作系统</h2><p><strong>VMware</strong>  <strong>Virtualbox</strong></p><blockquote><ul><li>1、<a href="https://www.vmware.com/cn.html" target="_blank" rel="noopener">https://www.vmware.com/cn.html</a> </li><li>2、<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">https://www.virtualbox.org/</a></li></ul></blockquote><h2 id="2、小编哪个都玩得很溜"><a href="#2、小编哪个都玩得很溜" class="headerlink" title="2、小编哪个都玩得很溜"></a>2、小编哪个都玩得很溜</h2><p><strong>此处采用 Virtualbox</strong>  原因是不用破解。 支持一下官方。</p><h2 id="3、-下载ubuntu镜像"><a href="#3、-下载ubuntu镜像" class="headerlink" title="3、 下载ubuntu镜像"></a>3、 下载ubuntu镜像</h2><blockquote><p>这里说明一下，官方下载贼慢。</p><p><a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">https://ubuntu.com/download/desktop</a></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 所以小编收集了一个镜像网站 比官网快NNN倍不止</span>http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">-</span>releases<span class="token operator">/</span><span class="token comment" spellcheck="true">#以及上传到自己的微云网盘，供大家使用。如有需要，请加小编微信。</span></code></pre><h2 id="4、万事具备开始安装"><a href="#4、万事具备开始安装" class="headerlink" title="4、万事具备开始安装"></a>4、万事具备开始安装</h2><blockquote><p>每一步都是截图，这样更加直观明了。 </p><p>走你！！！</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141259.png" alt="打开vbox"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141355.png" alt="新建虚拟"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141418.png" alt="配置内存大小"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141455.png" alt="创建磁盘"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141507.png" alt="磁盘文件类型"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141533.png" alt="动态可以更加节省空间"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141611.png" alt="配置硬盘大小"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141638.png" alt="创建完成"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141729.png" alt="选择下载的ubuntu镜像"></p><h2 id="5、ubuntu安装"><a href="#5、ubuntu安装" class="headerlink" title="5、ubuntu安装"></a>5、ubuntu安装</h2><h3 id="5-1、启动"><a href="#5-1、启动" class="headerlink" title="5.1、启动"></a>5.1、启动</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141916.png" alt="启动"></p><h3 id="5-2、选择语言"><a href="#5-2、选择语言" class="headerlink" title="5.2、选择语言"></a>5.2、选择语言</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230141951.png" alt="选择语言"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142039.png" alt=""></p><h3 id="5-3、根据自己需求安装"><a href="#5-3、根据自己需求安装" class="headerlink" title="5.3、根据自己需求安装"></a>5.3、根据自己需求安装</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142132.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142230.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142248.png" alt="默认磁盘分区"></p><h3 id="5-4、选择地区"><a href="#5-4、选择地区" class="headerlink" title="5.4、选择地区"></a>5.4、选择地区</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142316.png" alt=""></p><h3 id="5-5、创建用户信息"><a href="#5-5、创建用户信息" class="headerlink" title="5.5、创建用户信息"></a>5.5、创建用户信息</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142353.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142416.png" alt="安装进行中"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230142813.png" alt="安装插件下载"></p><h2 id="6、安装完成重启"><a href="#6、安装完成重启" class="headerlink" title="6、安装完成重启"></a>6、安装完成重启</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230143441.png" alt=""></p><h2 id="7、安装扩展组件"><a href="#7、安装扩展组件" class="headerlink" title="7、安装扩展组件"></a>7、安装扩展组件</h2><blockquote><p>支持全屏，自定义大小。 双向拖动等。</p><ul><li>Vmware 中安装的是  Tools  需要sudo ./ 执行解压的文件即可</li><li>Vbox 直接根据菜单操作安装即可。</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230144342.png" alt=""></p><h2 id="8、Python"><a href="#8、Python" class="headerlink" title="8、Python"></a>8、Python</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230150043.png" alt="安装python3"></p><blockquote><p>安装pip</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230152454.png" alt=""></p><h2 id="9、安装sublime"><a href="#9、安装sublime" class="headerlink" title="9、安装sublime"></a>9、安装sublime</h2><blockquote><p>对于Ubuntu 18.04及更高版本，只需打开Ubuntu软件搜索并安装sublime-text即可</p><p>对于Ubuntu 16.04，打开终端（Ctrl + Alt + T）并运行snap命令来安装：</p><p><code>sudo apt install snapd &amp;&amp; sudo snap install sublime-text</code></p></blockquote><blockquote><p>1.通过Ctrl + Alt + T键盘快捷键或从应用程序启动器打开终端。 打开时，运行命令添加密钥环：</p><p>wget -qO - <a href="https://download.sublimetext.com/sublimehq-pub.gpg" target="_blank" rel="noopener">https://download.sublimetext.com/sublimehq-pub.gpg</a> | sudo apt-key add -</p><p>在提示时键入用户密码（无星号反馈），然后按Enter键。</p><p>2.然后运行命令添加apt存储库：</p><p>echo “deb <a href="https://download.sublimetext.com/" target="_blank" rel="noopener">https://download.sublimetext.com/</a> apt/stable/“ | sudo tee /etc/apt/sources.list.d/sublime-text.list</p><p>3.最后通过Synaptic包管理器或运行命令安装sublime-text包：</p><p>sudo apt update &amp;&amp; sudo apt install sublime-text</p><h4 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h4><h4 id="要删除编辑器，请运行命令："><a href="#要删除编辑器，请运行命令：" class="headerlink" title="要删除编辑器，请运行命令："></a>要删除编辑器，请运行命令：</h4><h4 id="sudo-apt-remove-–autoremove-sublime-text"><a href="#sudo-apt-remove-–autoremove-sublime-text" class="headerlink" title="sudo apt remove –autoremove sublime-text"></a>sudo apt remove –autoremove sublime-text</h4><p>要删除apt存储库，请转到“软件和更新” - &gt;“其他软件”。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230151657.png" alt=""></p><h2 id="10、玩转sublime"><a href="#10、玩转sublime" class="headerlink" title="10、玩转sublime"></a>10、玩转sublime</h2><blockquote><p><strong>选择类</strong><br>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</p><p>此功能很好。<br>当你想同时修改多个相同代码的时候，比如，将echo 统一改成print，可以双击选中echo，然后Ctrl+D，会向下连选echo，重复，直到你满意的位置，然后就可以统一编辑了。</p><p>有人说了，这不就是查找替换呀，是的，查找替换是可以实现，但这种方式更直观一些，而且不易出错。</p><p>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个例子：快速选中并更改所有相同的变量名、函数名等。<br>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>Ctrl+M 光标移动至括号内结束或开始的位置。<br>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。<br>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。<br>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。<br>Ctrl+K+0 展开所有折叠代码。<br>Ctrl+← 向左单位性地移动光标，快速移动光标。<br>Ctrl+→ 向右单位性地移动光标，快速移动光标。<br>shift+↑ 向上选中多行。<br>shift+↓ 向下选中多行。<br>Shift+← 向左选中文本。<br>Shift+→ 向右选中文本。<br>Ctrl+Shift+← 向左单位性地选中文本。<br>Ctrl+Shift+→ 向右单位性地选中文本。<br>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。<br>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。<br>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</p><p><strong>编辑类</strong><br>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>Ctrl+Shift+D 复制光标所在整行，插入到下一行。<br>Tab 向右缩进。<br>Shift+Tab 向左缩进。<br>Ctrl+K+K 从光标处开始删除代码至行尾。<br>Ctrl+Shift+K 删除整行。<br>Ctrl+/ 注释单行。<br>Ctrl+Shift+/ 注释多行。<br>Ctrl+K+U 转换大写。<br>Ctrl+K+L 转换小写。<br>Ctrl+Z 撤销。<br>Ctrl+Y 恢复撤销。<br>Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。<br>Ctrl+F2 设置书签<br>Ctrl+T 左右字母互换。<br>F6 单词检测拼写</p><p><strong>搜索类</strong><br>Ctrl+F 打开底部搜索框，查找关键字。<br>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。<br>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。<br>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。<br>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。<br>Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。<br>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p><p>Esc 退出光标多行选择，退出搜索框，命令框等。</p><p><strong>显示类</strong><br>Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。<br>Ctrl+PageDown 向左切换当前窗口的标签页。<br>Ctrl+PageUp 向右切换当前窗口的标签页。<br>Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2 左右分屏-2列<br>Alt+Shift+3 左右分屏-3列<br>Alt+Shift+4 左右分屏-4列<br>Alt+Shift+5 等分4屏<br>Alt+Shift+8 垂直分屏-2屏<br>Alt+Shift+9 垂直分屏-3屏<br>Ctrl+K+B 开启/关闭侧边栏。</p><p><strong>F11 全屏模式</strong><br>Shift+F11 免打扰模式</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191230151907.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce深入解析</title>
      <link href="/posts/39508.html"/>
      <url>/posts/39508.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分布式计算框架"><a href="#分布式计算框架" class="headerlink" title="分布式计算框架"></a>分布式计算框架</h1><p><strong>MapReduce</strong></p><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><blockquote><p>MapReduce是一个基于集群的计算<strong>平台</strong>，是一个简化分布式编程的计算<strong>框架</strong>，是一个将分布式计算抽象为Map和Reduce两个阶段的编程<strong>模型</strong>。<em>（这句话记住了是可以用来装逼的）</em></p></blockquote><h2 id="2、执行流程"><a href="#2、执行流程" class="headerlink" title="2、执行流程"></a>2、执行流程</h2><blockquote><p>MapReduce程序执行图。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191227104353.png" alt=""></p><blockquote><p><strong>1. JobClient：</strong>运行于client node，负责将MapReduce程序打成Jar包存储到HDFS，并把Jar包的路径提交到Jobtracker，由Jobtracker进行任务的分配和监控。<br> <strong>2. JobTracker：</strong>运行于name node，负责接收JobClient提交的Job，调度Job的每一个子task运行于TaskTracker上，并监控它们，如果发现有失败的task就重新运行它。<br> <strong>3. TaskTracker：</strong>运行于data node，负责主动与JobTracker通信，接收作业，并直接执行每一个任务。<br> <strong>4. HDFS：</strong>用来与其它实体间共享作业文件。</p></blockquote><p><em>MapReduce作业流程</em></p><blockquote><p>1、JobClient通过RPC协议向JobTracker请求一个新应用的ID，用于MapReduce作业的ID</p><p>2、JobTracker检查作业的输出说明。例如，如果没有指定输出目录或目录已存在，作业就不提交，错误抛回给JobClient，否则，返回新的作业ID给JobClient</p><p>3、JobClient将作业所需的资源（包括作业JAR文件、配置文件和计算所得得输入分片）复制到以作业ID命名的HDFS文件夹中</p><p>4、JobClient通过submitApplication()提交作业</p><p>5、JobTracker收到调用它的submitApplication()消息后，进行任务初始化</p><p>6、JobTracker读取HDFS上的要处理的文件，开始计算输入分片，每一个分片对应一个TaskTracker</p><p>7、TaskTracker通过心跳机制领取任务（任务的描述信息）</p><p>8、TaskTracker读取HDFS上的作业资源（JAR包、配置文件等）</p><p>9、TaskTracker启动一个java child子进程，用来执行具体的任务（MapperTask或ReducerTask）</p><p>10、TaskTracker将Reduce结果写入到HDFS当中</p></blockquote><h2 id="3、工作原理"><a href="#3、工作原理" class="headerlink" title="3、工作原理"></a>3、工作原理</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191227105511.png" alt=""></p><h2 id="4、Map任务处理"><a href="#4、Map任务处理" class="headerlink" title="4、Map任务处理"></a>4、Map任务处理</h2><blockquote><p>1、读取HDFS中的文件。每一行解析成一个&lt;k,v&gt;。每一个键值对调用一次map函数</p></blockquote><blockquote><p>2、重写map()，对第一步产生的&lt;k,v&gt;进行处理，转换为新的&lt;k,v&gt;输出</p></blockquote><blockquote><p>3、对输出的key、value进行分区</p></blockquote><blockquote><p>4、对不同分区的数据，按照key进行排序、分组。相同key的value放到一个集合中</p></blockquote><blockquote><p>5、(可选) 对分组后的数据进行归约</p></blockquote><h2 id="5、Reduce任务处理"><a href="#5、Reduce任务处理" class="headerlink" title="5、Reduce任务处理"></a>5、Reduce任务处理</h2><blockquote><p>1、多个map任务的输出，按照不同的分区，通过网络复制到不同的reduce节点上</p></blockquote><blockquote><p>2、对多个map的输出进行合并、排序。</p></blockquote><blockquote><p>3、重写reduce函数实现自己的逻辑，对输入的key、value处理，转换成新的key、value输出</p></blockquote><blockquote><p>4、把reduce的输出保存到文件中</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象(4)</title>
      <link href="/posts/55248.html"/>
      <url>/posts/55248.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226205105.png" alt=""></p><h1 id="Python面向对象-4"><a href="#Python面向对象-4" class="headerlink" title="Python面向对象(4)"></a>Python面向对象(4)</h1><h2 id="1、异常的传递"><a href="#1、异常的传递" class="headerlink" title="1、异常的传递"></a>1、异常的传递</h2><h3 id="1-1、try嵌套"><a href="#1-1、try嵌套" class="headerlink" title="1.1、try嵌套"></a>1.1、try嵌套</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226194124.png" alt=""></p><blockquote><ul><li>首先从 test.txt 文件中读取到信息</li><li>^c 关闭文件</li><li>没有这个文件</li><li>最后的finally</li></ul></blockquote><h3 id="1-2、函数嵌套调用中"><a href="#1-2、函数嵌套调用中" class="headerlink" title="1.2、函数嵌套调用中"></a>1.2、函数嵌套调用中</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226195040.png" alt=""></p><blockquote><ul><li>如果try嵌套，那么如果里面的try没有捕获到这个异常，那么外面的try会接收到这个异常，然后进行处理，如果外边的try依然没有捕获到，那么再进行传递。。。</li><li>如果一个异常是在一个函数中产生的，例如函数A—-&gt;函数B—-&gt;函数C,而异常是在函数C中产生的，那么如果函数C中没有对这个异常进行处理，那么这个异常会传递到函数B中，如果函数B有异常处理那么就会按照函数B的处理方式进行执行；如果函数B也没有异常处理，那么这个异常会继续传递，以此类推。。。如果所有的函数都没有处理，那么此时就会进行异常的默认处理，即通常见到的那样</li><li>注意观察上图中，当调用test3函数时，在test1函数内部产生了异常，此异常被传递到test3函数中完成了异常处理，而当异常处理完后，并没有返回到函数test1中进行执行，而是在函数test3中继续执行</li></ul></blockquote><h2 id="2、抛出自定义的异常"><a href="#2、抛出自定义的异常" class="headerlink" title="2、抛出自定义的异常"></a>2、抛出自定义的异常</h2><blockquote><p>可以用``raise`语句来引发一个异常。异常/错误对象必须有一个名字，且它们应是Error或Exception类的子类</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226195406.png" alt=""></p><blockquote><p>以上程序中，关于代码<code>#super().__init__()</code>的说明</p><blockquote><p>这一行代码，可以调用也可以不调用，建议调用，因为<code>__init__</code>方法往往是用来对创建完的对象进行初始化工作，如果在子类中重写了父类的<code>__init__</code>方法，即意味着父类中的很多初始化工作没有做，这样就不保证程序的稳定了，所以在以后的开发中，如果重写了父类的<code>__init__</code>方法，最好是先调用父类的这个方法，然后再添加自己的功能</p></blockquote></blockquote><h2 id="3、异常处理中抛出异常"><a href="#3、异常处理中抛出异常" class="headerlink" title="3、异常处理中抛出异常"></a>3、异常处理中抛出异常</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226201034.png" alt=""></p><h2 id="4、模块介绍"><a href="#4、模块介绍" class="headerlink" title="4、模块介绍"></a>4、模块介绍</h2><h3 id="4-1、模块"><a href="#4-1、模块" class="headerlink" title="4.1、模块"></a>4.1、模块</h3><blockquote><p>说的通俗点：模块就好比是工具包，要想使用这个工具包中的工具(就好比函数)，就需要导入这个模块</p></blockquote><h3 id="4-2、import"><a href="#4-2、import" class="headerlink" title="4.2、import"></a>4.2、import</h3><blockquote><p>在python中主要是 用关键字，import 来引入某个模块，</p><p>在调用math模块中的函数时，必须这样引用：</p><pre class=" language-python"><code class="language-python">模块名<span class="token punctuation">.</span>函数名<span class="token keyword">import</span> math<span class="token comment" spellcheck="true">#这样会报错</span><span class="token keyword">print</span> sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这样才能正确输出结果</span><span class="token keyword">print</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="4-3、from…import"><a href="#4-3、from…import" class="headerlink" title="4.3、from…import"></a>4.3、from…import</h3><blockquote><p>Python的from语句让你从模块中导入一个指定的部分到当前命名空间中</p></blockquote><p>语法如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>例如，要导入模块fib的fibonacci函数，使用如下语句：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fib <span class="token keyword">import</span> fibonacci</code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>不会把整个fib模块导入到当前的命名空间中，它只会将fib里的fibonacci单个引入</li></ul><h3 id="4-4、from-…-import"><a href="#4-4、from-…-import" class="headerlink" title="4.4、from … import *"></a>4.4、from … import *</h3><blockquote><p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul><li>这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</li></ul><h3 id="4-5、-as"><a href="#4-5、-as" class="headerlink" title="4.5、 as"></a>4.5、 as</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226200951.png" alt=""></p><h3 id="4-6、定位模块"><a href="#4-6、定位模块" class="headerlink" title="4.6、定位模块"></a>4.6、定位模块</h3><blockquote><p>当你导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li><li>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</li></ol></blockquote><h2 id="5、模块制作"><a href="#5、模块制作" class="headerlink" title="5、模块制作"></a>5、模块制作</h2><h3 id="5-1、定义自己的模块"><a href="#5-1、定义自己的模块" class="headerlink" title="5.1、定义自己的模块"></a>5.1、定义自己的模块</h3><blockquote><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。比如有这样一个文件test.py，在test.py中定义了函数add</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#test.py</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b</code></pre><h3 id="5-2、调用自己定义的模块"><a href="#5-2、调用自己定义的模块" class="headerlink" title="5.2、调用自己定义的模块"></a>5.2、调用自己定义的模块</h3><blockquote><p>那么在其他文件中就可以先import test，然后通过test.add(a,b)来调用了，当然也可以通过from test import add来引入</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#test1.py</span><span class="token keyword">import</span> testresult <span class="token operator">=</span> test<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="5-3、测试模块"><a href="#5-3、测试模块" class="headerlink" title="5.3、测试模块"></a>5.3、测试模块</h3><blockquote><p>在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息，例如：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#test.py</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token comment" spellcheck="true"># 用来进行测试</span>ret <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">543</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'int test.py file,,,,123+543=%d'</span><span class="token operator">%</span>ret<span class="token punctuation">)</span></code></pre><blockquote><p>如果此时，在其他py文件中引入了此文件的话，想想看，测试的那段代码是否也会执行呢！</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#test1.py</span><span class="token keyword">import</span> testresult <span class="token operator">=</span> test<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226201628.png" alt=""></p><h2 id="6、模块中的-all"><a href="#6、模块中的-all" class="headerlink" title="6、模块中的_all_"></a>6、模块中的<code>_all_</code></h2><h3 id="6-1、没有"><a href="#6-1、没有" class="headerlink" title="6.1、没有"></a>6.1、没有</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226202254.png" alt=""></p><h3 id="6-2、有"><a href="#6-2、有" class="headerlink" title="6.2、有"></a>6.2、有</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191226203246.png" alt=""></p><h2 id="7、使用Pip安装模块"><a href="#7、使用Pip安装模块" class="headerlink" title="7、使用Pip安装模块"></a>7、使用Pip安装模块</h2><blockquote><p>pip 是 python 自带的一个软件，相当于手机里的应用市场，可以用来安装、卸载、搜索 python 的常见模块。</p><p>直接输入 pip 后回车，可以查看 pip 命令的所有可用参数。</p></blockquote><h3 id="7-1、安装模块"><a href="#7-1、安装模块" class="headerlink" title="7.1、安装模块"></a>7.1、安装模块</h3><p>在命令行执行</p><pre class=" language-shell"><code class="language-shell">pip install 模块名</code></pre><h3 id="7-2、卸载模块"><a href="#7-2、卸载模块" class="headerlink" title="7.2、卸载模块"></a>7.2、卸载模块</h3><p>在命令行执行</p><pre class=" language-shell"><code class="language-shell">pip uninstall 模块名</code></pre><h3 id="7-3、搜索模块"><a href="#7-3、搜索模块" class="headerlink" title="7.3、搜索模块"></a>7.3、搜索模块</h3><p>在命令行执行</p><pre class=" language-shell"><code class="language-shell">pip search 模块名</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象(3)</title>
      <link href="/posts/59346.html"/>
      <url>/posts/59346.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225231208.png" alt=""></p><h1 id="Python面向对象-3"><a href="#Python面向对象-3" class="headerlink" title="Python面向对象(3)"></a>Python面向对象(3)</h1><h2 id="1、-new-方法"><a href="#1、-new-方法" class="headerlink" title="1、_new_方法"></a>1、<code>_new_</code>方法</h2><blockquote><p><code>__new__和__init__</code>的作用</p><ul><li><code>__new__</code>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供</li><li><code>__new__</code>必须要有返回值，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以return父类<code>__new__</code>出来的实例，或者直接是object的<code>__new__</code>出来的实例</li><li><code>__init__</code>有一个参数self，就是这个<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的动作，<code>__init__</code>不需要返回值</li><li>我们可以将类比作制造商，<code>__new__</code>方法就是前期的原材料购买环节，<code>__init__</code>方法就是在有原材料的基础上，加工，初始化商品环节</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225223720.png" alt=""></p><p><strong>注意点</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225223850.png" alt=""></p><h2 id="2、单例模式"><a href="#2、单例模式" class="headerlink" title="2、单例模式"></a>2、单例模式</h2><blockquote><p>单例模式：</p><p>​    确保某一个类，只有一个实例，并且自行实例化向整个系统提供这个实例，这个类称为 单例类，单例模式 是一种对象创建型模式。</p></blockquote><p><em>创建单例，保证只有1个对象</em></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225224209.png" alt=""></p><p><em>创建单例模式，只执行1次<strong>init</strong>方法</em></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225224301.png" alt=""></p><h2 id="3、异常介绍"><a href="#3、异常介绍" class="headerlink" title="3、异常介绍"></a>3、异常介绍</h2><p><em>异常简介 如下</em></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225225547.png" alt=""></p><p>说明:</p><blockquote><p>打开一个不存在的文件123.txt，当找不到123.txt 文件时，就会抛出给我们一个IOError类型的错误，No such file or directory：123.txt （没有123.txt这样的文件或目录）</p></blockquote><p><strong>异常:</strong></p><blockquote><p>当Python检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”</p></blockquote><h2 id="4、捕获异常"><a href="#4、捕获异常" class="headerlink" title="4、捕获异常"></a>4、捕获异常</h2><h3 id="4-1、捕获异常-try-except…"><a href="#4-1、捕获异常-try-except…" class="headerlink" title="4.1、捕获异常(try..except…)"></a>4.1、捕获异常(try..except…)</h3><blockquote><ul><li>把可能出现问题的代码，放在try中</li><li>把处理异常的代码，放在except中</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225225743.png" alt=""></p><p>说明:</p><ul><li>此程序看不到任何错误，因为用except 捕获到了IOError异常，并添加了处理的方法</li><li>pass 表示实现了相应的实现，但什么也不做；如果把pass改为print语句，那么就会输出其他信息</li></ul><h3 id="4-2、except捕获多个异常"><a href="#4-2、except捕获多个异常" class="headerlink" title="4.2、except捕获多个异常"></a>4.2、except捕获多个异常</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225225756.png" alt=""></p><p>想一想:</p><blockquote><p>上例程序，已经使用except来捕获异常了，为什么还会看到错误的信息提示？</p></blockquote><p>答:</p><blockquote><p>except捕获的错误类型是IOError，而此时程序产生的异常为 NameError ，所以except没有生效</p></blockquote><h3 id="4-3、获取异常的信息描述"><a href="#4-3、获取异常的信息描述" class="headerlink" title="4.3、获取异常的信息描述"></a>4.3、获取异常的信息描述</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225230719.png" alt=""></p><h3 id="4-5、else"><a href="#4-5、else" class="headerlink" title="4.5、else"></a>4.5、else</h3><blockquote><p>咱们应该对<code>else</code>并不陌生，在if中，它的作用是当条件不满足时执行的实行；同样在try…except…中也是如此，即如果没有捕获到异常，那么就执行else中的事情</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225225822.png" alt=""></p><h3 id="4-6、try…finally…"><a href="#4-6、try…finally…" class="headerlink" title="4.6、try…finally…"></a>4.6、try…finally…</h3><blockquote><p>try…finally…语句用来表达这样的情况：</p><blockquote><p>在程序中，如果一个段代码必须要执行，即无论异常是否产生都要执行，那么此时就需要使用finally。 比如文件关闭，释放锁，把数据库连接返还给连接池等</p></blockquote></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191225225831.png" alt=""></p><blockquote><p>test.txt文件中每一行数据打印，但是我有意在每打印一行之前用time.sleep方法暂停2秒钟。这样做的原因是让程序运行得慢一些。在程序运行的时候，按Ctrl+c中断（取消）程序。</p><p>我们可以观察到KeyboardInterrupt异常被触发，程序退出。但是在程序退出之前，finally从句仍然被执行，把文件关闭。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象(2)</title>
      <link href="/posts/30675.html"/>
      <url>/posts/30675.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224164151.png" alt=""></p><h1 id="Python面向对象-2"><a href="#Python面向对象-2" class="headerlink" title="Python面向对象(2)"></a>Python面向对象(2)</h1><h2 id="1、保护对象的属性"><a href="#1、保护对象的属性" class="headerlink" title="1、保护对象的属性"></a>1、保护对象的属性</h2><blockquote><p>如果有一个对象，当需要对其进行修改属性时，有两种方法</p><ul><li>对象名.属性名 = 数据 —-&gt;直接修改</li><li>对象名.方法名() —-&gt;间接修改</li></ul><p>为了更好的保存属性安全，即不能随意修改，一般的处理方式为</p><ul><li>将属性定义为私有属性</li><li>添加一个可以调用的方法，供调用</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224154325.png" alt=""></p><p><strong>私有共有属性区分</strong></p><blockquote><p>它是以属性命名方式来区分，如果在属性名前面加了2个下划线’__’，则表明该属性是私有属性，否则为公有属性（方法也是一样，方法名前面加了2个下划线的话表示该方法是私有的，否则为公有的）。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224154345.png" alt=""></p><h2 id="2、-del-方法"><a href="#2、-del-方法" class="headerlink" title="2、_del_()方法"></a>2、<code>_del_()</code>方法</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224155502.png" alt=""></p><blockquote><ul><li>当有1个变量保存了对象的引用时，此对象的引用计数就会加1</li><li>当使用del删除变量指向的对象时，如果对象的引用计数不会1，比如3，那么此时只会让这个引用计数减1，即变为2，当再次调用del时，变为1，如果再调用1次del，此时会真的把对象进行删除</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224155546.png" alt=""></p><h2 id="3、单继承"><a href="#3、单继承" class="headerlink" title="3、单继承"></a>3、单继承</h2><h3 id="3-1、继承的概念"><a href="#3-1、继承的概念" class="headerlink" title="3.1、继承的概念"></a>3.1、继承的概念</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224155750.png" alt=""></p><blockquote><p>在程序中，继承描述的是事物之间的所属关系，例如猫和狗都属于动物，程序中便可以描述为猫和狗继承自动物；同理，波斯猫和巴厘猫都继承自猫，而沙皮狗和斑点狗都继承自狗，如下如所示：</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224155904.png" alt=""></p><h3 id="3-2、继承示例"><a href="#3-2、继承示例" class="headerlink" title="3.2、继承示例"></a>3.2、继承示例</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224160030.png" alt=""></p><blockquote><p>说明：</p><ul><li>虽然子类没有定义<code>__init__</code>方法，但是父类有，所以在子类继承父类的时候这个方法就被继承了，所以只要创建Bosi的对象，就默认执行了那个继承过来的<code>__init__</code>方法</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>子类在继承的时候，在定义类时，小括号()中为父类的名字</li><li>父类的属性、方法，会被继承给子类</li></ul></blockquote><h3 id="3-3、注意点"><a href="#3-3、注意点" class="headerlink" title="3.3、注意点"></a>3.3、注意点</h3><blockquote><ul><li>私有的属性，不能通过对象直接访问，但是可以通过方法访问</li><li>私有的方法，不能通过对象直接访问</li><li>私有的属性、方法，不会被子类继承，也不能被访问</li><li>一般情况下，私有的属性、方法都是不对外公布的，往往用来做内部的事情，起到安全的作用</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224160310.png" alt=""></p><h2 id="4、多继承"><a href="#4、多继承" class="headerlink" title="4、多继承"></a>4、多继承</h2><blockquote><p>所谓多继承，即子类有多个父类，并且具有他们的特征</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224160833.png" alt=""></p><p><strong>注意点</strong></p><blockquote><p>想一想:</p><blockquote><p>如果在上面的多继承例子中，如果父类A和父类B中，有一个同名的方法，那么通过子类去调用的时候，调用哪个？</p></blockquote></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224160941.png" alt=""></p><h2 id="5、重写与调用父类方法"><a href="#5、重写与调用父类方法" class="headerlink" title="5、重写与调用父类方法"></a>5、重写与调用父类方法</h2><h3 id="5-1、重写父类方法"><a href="#5-1、重写父类方法" class="headerlink" title="5.1、重写父类方法"></a>5.1、重写父类方法</h3><blockquote><p>所谓重写，就是子类中，有一个和父类相同名字的方法，在子类中的方法会覆盖掉父类中同名的方法</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224161305.png" alt=""></p><h3 id="5-2、调用父类方法"><a href="#5-2、调用父类方法" class="headerlink" title="5.2、调用父类方法"></a>5.2、调用父类方法</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224161419.png" alt=""></p><h2 id="6、多态"><a href="#6、多态" class="headerlink" title="6、多态"></a>6、多态</h2><blockquote><p>其实多态的概念，一般应用于Java这类强类型语言中， 而Python崇尚“鸭子类型”</p><p>所谓多态：定义时的类型和运行时的类型不一样，此时就成为多态</p><ul><li>Python伪代码实现Java或C#的多态</li></ul></blockquote><p><em>鸭子类型</em></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224162315.png" alt=""></p><h2 id="7、类、实例-属性"><a href="#7、类、实例-属性" class="headerlink" title="7、类、实例 | 属性"></a>7、类、实例 | 属性</h2><h3 id="7-1、类属性"><a href="#7-1、类属性" class="headerlink" title="7.1、类属性"></a>7.1、类属性</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'A2Data'</span>  <span class="token comment" spellcheck="true">#公有的类属性</span>    __age <span class="token operator">=</span> <span class="token number">22</span>     <span class="token comment" spellcheck="true">#私有的类属性</span>p <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#正确</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#正确</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#错误，不能在类外通过实例对象访问私有的类属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#错误，不能在类外通过类对象访问私有的类属性</span></code></pre><h3 id="7-2、实例属性-对象属性"><a href="#7-2、实例属性-对象属性" class="headerlink" title="7.2、实例属性(对象属性)"></a>7.2、实例属性(对象属性)</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    address <span class="token operator">=</span> <span class="token string">'北京'</span> <span class="token comment" spellcheck="true">#类属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'A2Data'</span> <span class="token comment" spellcheck="true">#实例属性</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span> <span class="token comment" spellcheck="true">#实例属性</span>p <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span><span class="token number">18</span> <span class="token comment" spellcheck="true">#实例属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#正确</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#正确</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#正确</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#正确</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#错误</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>age<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#错误</span></code></pre><p><strong>通过实例(对象)去修改类属性</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    country <span class="token operator">=</span> <span class="token string">'china'</span> <span class="token comment" spellcheck="true">#类属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>country<span class="token punctuation">)</span>p <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>country<span class="token punctuation">)</span>p<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'japan'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>country<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#实例属性会屏蔽掉同名的类属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token keyword">del</span> p<span class="token punctuation">.</span>country    <span class="token comment" spellcheck="true">#删除实例属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>country<span class="token punctuation">)</span></code></pre><blockquote><p><strong>归纳</strong></p><p>如果需要在类外修改<code>类属性</code>，必须通过<code>类对象</code>去引用然后进行修改。如果通过实例对象去引用，会产生一个同名的<code>实例属性</code>，这种方式修改的是<code>实例属性</code>，不会影响到<code>类属性</code>，并且之后如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽掉类属性，即引用的是<code>实例属性</code>，除非删除了该<code>实例属性</code>。</p></blockquote><h2 id="8、静态和类-方法"><a href="#8、静态和类-方法" class="headerlink" title="8、静态和类 | 方法"></a>8、静态和类 | 方法</h2><h3 id="8-1、类方法"><a href="#8-1、类方法" class="headerlink" title="8.1、类方法"></a>8.1、类方法</h3><blockquote><p>类对象所拥有的方法，需要用修饰器<code>@classmethod</code>来标识其为类方法，对于类方法，第一个参数必须是类对象，一般以<code>cls</code>作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯以’cls’作为第一个参数的名字，就最好用’cls’了），能够通过实例对象和类对象去访问。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224163348.png" alt=""></p><blockquote><p>用类方法对类属性修改之后，通过类对象和实例对象访问都发生了改变</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224163503.png" alt=""></p><h3 id="8-2、静态方法"><a href="#8-2、静态方法" class="headerlink" title="8.2、静态方法"></a>8.2、静态方法</h3><blockquote><p>需要通过修饰器<code>@staticmethod</code>来进行修饰，静态方法不需要多定义参数</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191224163613.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python烤地瓜案例</title>
      <link href="/posts/16550.html"/>
      <url>/posts/16550.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python烤地瓜实例"><a href="#Python烤地瓜实例" class="headerlink" title="Python烤地瓜实例"></a>Python烤地瓜实例</h1><p><strong>建议跟着操作，所以小编多数以截图的方式</strong></p><blockquote><p>为了更好的理解面向对象编程，下面以“烤地瓜”为案例，进行分析</p><p>定义地瓜类，存储烤熟的程度和添加的佐料，同时要提供烤地瓜和添加佐料的功能</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223124337.png" alt=""></p><h2 id="1、分析属性事例方法"><a href="#1、分析属性事例方法" class="headerlink" title="1、分析属性事例方法"></a>1、分析属性事例方法</h2><ul><li><code>cook()</code> : 把地瓜烤一段时间</li><li><code>addCondiments()</code> : 给地瓜添加配料</li><li><code>__init__()</code> : 设置默认的属性</li><li><code>__str__()</code> : 让print的结果看起来更好一些</li></ul><h2 id="2、定义类并且测试"><a href="#2、定义类并且测试" class="headerlink" title="2、定义类并且测试"></a>2、定义类并且测试</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223125104.png" alt=""></p><h2 id="3、测试cook方法"><a href="#3、测试cook方法" class="headerlink" title="3、测试cook方法"></a>3、测试cook方法</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223125203.png" alt=""></p><h2 id="4、自定义方法"><a href="#4、自定义方法" class="headerlink" title="4、自定义方法"></a>4、自定义方法</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223125745.png" alt=""></p><h2 id="5、完整代码"><a href="#5、完整代码" class="headerlink" title="5、完整代码"></a>5、完整代码</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223125328.png" alt=""></p><h2 id="6、测试输出效果"><a href="#6、测试输出效果" class="headerlink" title="6、测试输出效果"></a>6、测试输出效果</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223125422.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象(1)</title>
      <link href="/posts/34771.html"/>
      <url>/posts/34771.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223115817.png" alt=""></p><h1 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h1><h2 id="1、面向对象介绍"><a href="#1、面向对象介绍" class="headerlink" title="1、面向对象介绍"></a>1、面向对象介绍</h2><blockquote><p><strong>思考</strong></p><ul><li>例如：你有一个想法，你要做一个项目。然后呢，你聚集了n个人，说明你要做啥，然后大家开始干。</li></ul><p>根据小编的经验，这个项目肯定是失败的。 因为每个人做的事情很多，分工不明确，有些肯定到最后都是没人做的，所以问题来了，必须要进行分工， 哪些人搭架子，做什么。哪些负责哪一块。</p></blockquote><p>例如：数一下如下字符串有多少个字符</p><pre class=" language-python"><code class="language-python">a2datahelloworldwwwa2datacna2data<span class="token punctuation">,</span>helloworld<span class="token punctuation">,</span>www<span class="token punctuation">,</span>a2data<span class="token punctuation">,</span>cn显然，被分组后的字符更容易计数</code></pre><p><em>总结：</em></p><blockquote><p>大型的项目，必须要进行分工，将函数分为几个不同的类型，每个人负责一个或多个类型，比如一个人负责网站首页，一个人负责订单界面，一个人负责用户设置页面。</p></blockquote><p><strong>面向对象与面向过程</strong></p><blockquote><ul><li>面向过程：根据业务逻辑从上到下写代码</li><li>面向对象：将数据与函数绑定到一起，分类进行<strong>封装</strong>，每个程序员只要负责分配给自己的分类，这样能够更快速的开发程序，减少了重复代码</li><li>对于小编而已，跟大家一样，刚开始都喜欢面向过程开发。其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑顺序组织在一起，数据与函数分开考虑。</li></ul></blockquote><blockquote><p>面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）</p></blockquote><p><strong>解决吃啤酒鸭的问题</strong></p><p><em>第一种方式（面向过程）:</em></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、养鸭子<span class="token number">2</span>、鸭子长成<span class="token number">3</span>、杀<span class="token number">4</span>、作料<span class="token number">5</span>、烹饪<span class="token number">6</span>、吃 <span class="token number">7</span>、卒 </code></pre><p><em>第二种方式（面向对象）:</em></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、找个卖啤酒鸭的人 <span class="token number">2</span>、给钱 交易<span class="token number">3</span>、吃</code></pre><blockquote><p>需要了解的定义性文字:</p></blockquote><blockquote><p>面向对象(object-oriented ;简称: OO) 至今还没有统一的概念 我这里把它定义为: 按人们 认识客观世界的系统思维方式,采用基于对象(实体)的概念建立模型,模拟客观世界分析、设 计、实现软件的办法。</p></blockquote><blockquote><p>面向对象编程(Object Oriented Programming-OOP) 是一种解决软件复用的设计和编程方法。 这种方法把软件系统中相近相似的操作逻辑和操作 应用数据、状态,以类的型式描述出来,以对象实例的形式在软件系统中复用,以达到提高软件开发效率的作用。</p></blockquote><h2 id="2、类和对象"><a href="#2、类和对象" class="headerlink" title="2、类和对象"></a>2、类和对象</h2><h3 id="2-1、类"><a href="#2-1、类" class="headerlink" title="2.1、类"></a>2.1、类</h3><blockquote><p>人以类聚 物以群分</p><ul><li>具有相似内部状态和运动规律的实体的集合（抽象）</li><li>具有相同属性和行为事物的统称</li></ul></blockquote><blockquote><p>类是抽象的，使用的时候，通常一个类可以找到多个对象。</p><p>例如：轮胎，汽车，飞机，推车..等等</p></blockquote><h3 id="2-2、对象"><a href="#2-2、对象" class="headerlink" title="2.2、对象"></a>2.2、对象</h3><blockquote><p>某一个具体事物的存在，现实中就是看得见摸得着的。</p><p>code: 可以直接使用的</p></blockquote><h3 id="2-3、类与对象的关系"><a href="#2-3、类与对象的关系" class="headerlink" title="2.3、类与对象的关系"></a>2.3、类与对象的关系</h3><blockquote><p>类就是创建对象的模板</p></blockquote><h3 id="2-4、类的构成"><a href="#2-4、类的构成" class="headerlink" title="2.4、类的构成"></a>2.4、类的构成</h3><blockquote><p>类(Class) 由3个部分构成</p><ul><li>类的名称:类名</li><li>类的属性:一组数据</li><li>类的方法:允许对进行操作的方法 (行为)</li></ul></blockquote><blockquote><p><em>狗类的设计</em></p><ul><li>类名:狗(Dog)</li><li>属性:品种 、毛色、性别、名字、 腿儿的数量</li><li>方法(行为/功能):叫 、跑、咬人、吃、摇尾巴</li></ul></blockquote><h3 id="2-5、类的抽象"><a href="#2-5、类的抽象" class="headerlink" title="2.5、类的抽象"></a>2.5、类的抽象</h3><blockquote><p>拥有相同(或者类似)属性和行为的对象都可以抽像出一个类</p><p>方法:一般名词都是类(名词提炼法)</p></blockquote><h2 id="3、定义类"><a href="#3、定义类" class="headerlink" title="3、定义类"></a>3、定义类</h2><blockquote><p>定义一个类，格式如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 类名<span class="token punctuation">:</span>    方法列表</code></pre></blockquote><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul><li>定义类时有2种：新式类和经典类，如下的Car为经典类，如果是Car(object)则为新式类</li><li>类名 的命名规则按照”大驼峰”</li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223111248.png" alt=""></p><h2 id="4、创建对象"><a href="#4、创建对象" class="headerlink" title="4、创建对象"></a>4、创建对象</h2><p>python中，可以根据已经定义的类去创建出一个个对象</p><p>创建对象的格式为:</p><pre class=" language-python"><code class="language-python">对象名 <span class="token operator">=</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>创建对象demo:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义类</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 移动</span>    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'车在奔跑...'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 鸣笛</span>    <span class="token keyword">def</span> <span class="token function">toot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"车在鸣笛....."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个对象，并用变量BMW来保存它的引用</span>BM <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token punctuation">)</span>BM<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'黑色'</span>BM<span class="token punctuation">.</span>wheelNum <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">#轮子数量</span>BM<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token punctuation">)</span>BM<span class="token punctuation">.</span>toot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>BM<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>BM<span class="token punctuation">.</span>wheelNum<span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223112155.png" alt=""></p><h2 id="5、Self"><a href="#5、Self" class="headerlink" title="5、Self"></a>5、Self</h2><p><strong>理解Self</strong></p><blockquote><ul><li>所谓的self，可以理解为自己</li><li>某个对象调用其方法时，python解释器会把这个对象作为第一个参数传递给self，所以开发者只需要传递后面的参数即可</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223113022.png" alt=""></p><h2 id="6、init"><a href="#6、init" class="headerlink" title="6、init"></a>6、<strong>init</strong></h2><h3 id="6-1、使用方式"><a href="#6-1、使用方式" class="headerlink" title="6.1、使用方式"></a>6.1、使用方式</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 类名<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#初始化函数，用来完成一些默认的设定</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><h3 id="6-2、init-方法调用"><a href="#6-2、init-方法调用" class="headerlink" title="6.2、init()方法调用"></a>6.2、init()方法调用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义汽车类</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>wheelNum <span class="token operator">=</span> <span class="token number">4</span>        self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'蓝色'</span>    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'车在跑，目标:北京'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建对象</span>BM <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'车的颜色为:%s'</span><span class="token operator">%</span>BM<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'车轮胎数量为:%d'</span><span class="token operator">%</span>BM<span class="token punctuation">.</span>wheelNum<span class="token punctuation">)</span></code></pre><blockquote><ul><li><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用</li><li><code>__init__(self)</code>中，默认有1个参数名字为self，如果在创建对象时传递了2个实参，那么<code>__init__(self)</code>中出了self作为第一个形参外还需要2个形参，例如<code>__init__(self,x,y)</code></li><li><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递进去</li></ul></blockquote><h2 id="7、“魔法”方法"><a href="#7、“魔法”方法" class="headerlink" title="7、“魔法”方法"></a>7、“魔法”方法</h2><blockquote><p>定义 <code>__str__()</code> 方法</p><ul><li>在python中方法名如果是<code>__xxxx__()</code>的，那么就有特殊的功能，因此叫做“魔法”方法</li><li>当使用print输出对象的时候，只要自己定义了<code>__str__(self)</code>方法，那么就会打印从在这个方法中return的数据</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191223114534.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试拆招详解</title>
      <link href="/posts/9812.html"/>
      <url>/posts/9812.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="面试拆招"><a href="#面试拆招" class="headerlink" title="面试拆招"></a>面试拆招</h1><h2 id="1、请你自我介绍一下自己好吗"><a href="#1、请你自我介绍一下自己好吗" class="headerlink" title="1、请你自我介绍一下自己好吗?"></a>1、请你自我介绍一下自己好吗?</h2><blockquote><p><strong>回答提示:</strong><br>一般人回答这个问题过于平常,只说姓名、年龄、爰好、工作经验,这些在简历上都有。其实,企业最希望知道的是求职者能否胜任工作,包括:<em><em>最强的技能</em>、<em>最深研究的知识领域</em>、<em>个性中最积极的部分</em>、<em>做过的最成功的事</em>、*可以和学习无关</em>,<em>也可以和学习有关</em>,但要突出<code>积极的个性和做事的能力</code>,说得合情合理企业才会相信。企业很重视一个人的礼貌,求职者要尊重考官,在回答每个问题之后都说一句“谢谢”,企业喜欢有礼貌的求职者。</p></blockquote><h2 id="2、你觉得你个性上最大的优点是什么"><a href="#2、你觉得你个性上最大的优点是什么" class="headerlink" title="2、你觉得你个性上最大的优点是什么?"></a>2、你觉得你个性上最大的优点是什么?</h2><blockquote><p><strong>回答提示:</strong></p><p>沉着冷静、条理清楚、立场坚定、顽强向上、乐于助人和关心他人、适应能力和幽默感、乐观和友爱。我在xxxx经过一到两年的培训及项目实战,加上实习工作，使我适合这份工作。(此处根据自己情况而改)</p></blockquote><h2 id="3、说说你最大的缺点"><a href="#3、说说你最大的缺点" class="headerlink" title="3、说说你最大的缺点?"></a>3、说说你最大的缺点?</h2><blockquote><p><strong>回答提示:</strong></p><p>这个问题企业问的概率很大,通常不希望听到直回答的缺点是什么等,如果求职者说自己小心眼、爱忌妒非常懒、脾气大、工作效率低,企业肯定不会录用你<br>绝对不要自作聪明地回答“<em>我最大的缺点是过于追求完美</em>”,有的人以为这样回答会显得自己比较出色,但事实上,他已经岌岌可危了。企业喜欢求职者从自己的优点说起,中间加一些小缺点,最后再把问题转回到优点上,突出优点的部分,企业喜欢聪明的求职者。</p></blockquote><h2 id="4、你对薪资的要求"><a href="#4、你对薪资的要求" class="headerlink" title="4、你对薪资的要求?"></a>4、你对薪资的要求?</h2><blockquote><p><strong>回答提示:</strong></p><p>如果你对薪酬的要求太低,那显然贬低自己的能力;如果你对薪酣的要求太高,那又会显得你分量过重,公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算,因而他们第一次提出的价钱往往是他们所能给予的最高价钱,他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。</p><p><strong>回答样本一:</strong></p><p>我对工资没有硬性要求,我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会,所以只要条件公平,我则不会计较太多</p><p><strong>回答祥本二:</strong></p><p>我受过系统的软件编程的训练,不需要进行大量的培训,而且我本人也对编程特别感兴趣。因此,我希望公司能根据我的情况和市场标准的水平,给我合理的薪水</p><p><strong>回答样本三:</strong></p><p>如果你必须自己说出具体数目,请不要说一个宽泛的范围,那样你将只能得到最低限庋的数字。最好给出一个具体的数字,这样表明你已经对当今的人才市场作了调查,知道像自己这样学历的雇员有什么样的价值</p></blockquote><h2 id="5、你对加班的看法"><a href="#5、你对加班的看法" class="headerlink" title="5、你对加班的看法?"></a>5、你对加班的看法?</h2><blockquote><p><strong>回答提示:</strong></p><p>实际上好多公司问这个问题,并不证明一定要加班,只是想测试你是否愿意为公司奉献。</p><p><strong>回答样本:</strong></p><p>如果工作需要我会义不容辞加班,我现在单身没有任何家庭负担,可以全身心的投入工作。但同时我也会提高工作效率,减少不必要的加班。</p></blockquote><h2 id="6、如果通过这次面试我们录用了你-但工作一段时间却发现你根本不适合这个职位-你怎么办"><a href="#6、如果通过这次面试我们录用了你-但工作一段时间却发现你根本不适合这个职位-你怎么办" class="headerlink" title="6、如果通过这次面试我们录用了你,但工作一段时间却发现你根本不适合这个职位,你怎么办?"></a>6、如果通过这次面试我们录用了你,但工作一段时间却发现你根本不适合这个职位,你怎么办?</h2><blockquote><p><strong>回答提示:</strong></p><p>一段时间发现工作不适合我,有两种情况:</p><p>①如果你确实热爱这个职业,那你就要不断学习,虚心向领导和同事学习业务知识和处事经验,了解这个职业的精神内涵和职业要求,力争减少差距;</p><p>②你觉得这个职业可有可无,那还是趁早换个职业,去发现适合你的,你热爱的职业,那样你的发展前途也会大点,对单位和个人都有好处。</p></blockquote><h2 id="7、谈谈你对跳槽的看法"><a href="#7、谈谈你对跳槽的看法" class="headerlink" title="7、谈谈你对跳槽的看法?"></a>7、谈谈你对跳槽的看法?</h2><blockquote><p><strong>回答提示:</strong></p><p>①正常的“跳槽”能促进人才合理流动,应该支持。</p><p>②频繁的跳槽对单位和个人双方都不利,应该反对。</p></blockquote><h2 id="8、工作中难以和同事、上司相处-你该怎么办"><a href="#8、工作中难以和同事、上司相处-你该怎么办" class="headerlink" title="8、工作中难以和同事、上司相处,你该怎么办?"></a>8、工作中难以和同事、上司相处,你该怎么办?</h2><blockquote><p><strong>回答提示:</strong></p><p>①我会服从领导的指挥,配合同事的工作。</p><p>②我会从自身找原因,仔鈿分析是不是自己工作做得不好让领导不满意,同事看不惯。还要看看是不是为人处世方面做得不好,如果是这样的话我会努力改正。</p><p>③如果我找不到原因,我会找机会跟他们沟通,请他们指出我的不足,有问题就及<br>时改正。</p><p>④作为优秀的员工,应该时刻以大局为重,即使在段时间内,领导和同事对我不理解,我也会做好本职工作,虚心向他们学习,我相信,他们会看见我在努力,总有天会对我微笑的。</p></blockquote><h2 id="9、你对于我们公司了解多少"><a href="#9、你对于我们公司了解多少" class="headerlink" title="9、你对于我们公司了解多少?"></a>9、你对于我们公司了解多少?</h2><blockquote><p><strong>回答提示:</strong></p><p>在去公司面试前上网查一下该公司主营业务。如回答:贵公司有意改变策略,加强与国外大厂的QFM合作,自有品牌的部分则透过海外经销商.</p></blockquote><h2 id="10、最能慨括你自己的三个词是什么"><a href="#10、最能慨括你自己的三个词是什么" class="headerlink" title="10、最能慨括你自己的三个词是什么?"></a>10、最能慨括你自己的三个词是什么?</h2><blockquote><p><strong>回答提示:</strong></p><p>我经常用的三个词是:适应能力强,有责任心和做事有始终,结合具体例子向主考官解释。</p></blockquote><h2 id="11、你的业余爱好是什么"><a href="#11、你的业余爱好是什么" class="headerlink" title="11、你的业余爱好是什么?"></a>11、你的业余爱好是什么?</h2><blockquote><p><strong>回答提示:</strong></p><p>找一些富于团体合作精神的,这里有一个真实的故事:有人被否决掉,因为他的爰好是深海潜水。主考官说:因为这是一项单人活动,我不敢肯定他能否适应团体工<br>作</p></blockquote><h2 id="12、作为被面试者给我打一下分"><a href="#12、作为被面试者给我打一下分" class="headerlink" title="12、作为被面试者给我打一下分?"></a>12、作为被面试者给我打一下分?</h2><blockquote><p><strong>回答提示:</strong></p><p>试着列出四个优点和一个非常非常非常小的缺点可以抱怨一下设施,没有明确责任人的缺点是不会有人介意的)</p></blockquote><h2 id="13、你为什么要离开原来的公司"><a href="#13、你为什么要离开原来的公司" class="headerlink" title="13、你为什么要离开原来的公司?"></a>13、你为什么要离开原来的公司?</h2><blockquote><p><strong>回答提示:</strong></p><p>①回答这个问题时一定要小心,就算在前一个工作受到再大的委屈,对公司有多少的怨言,都千万不要表现出来,尤其要避免对公司本身主管的批评,避免面试官的负面情绪及印象。</p><p><strong>建议此时</strong>最好的回答方式是将问题归咎在自己身上,例如觉得工作没有学习发展的空间,自己想在面试工作的相关产业中多加学习,或是前一份工作与自己的生涯规划不合等等,回答的答案最好是积极正面的。</p><p>②我希望能获得一份更好的工作,如果机会来临,我会抓住。我觉得目前的工作,已经达到顶峰,即沒有升迁机会。</p></blockquote><h2 id="14、你欣赏哪种性格的人"><a href="#14、你欣赏哪种性格的人" class="headerlink" title="14、你欣赏哪种性格的人?"></a>14、你欣赏哪种性格的人?</h2><blockquote><p><strong>回答提示:</strong></p><p>诚实、不死板而且容易相处的人、有“实际行动”的人。</p></blockquote><h2 id="15、你通常如何对待别人的批评"><a href="#15、你通常如何对待别人的批评" class="headerlink" title="15、你通常如何对待别人的批评?"></a>15、你通常如何对待别人的批评?</h2><blockquote><p><strong>回答提示:</strong></p><p>①沈默是金,不必说什么,否则情况更糟,不过我会接受建设性的批评。</p><p>②我会等大家冷靜下来再讨论。</p></blockquote><h2 id="16、怎样对待自己的失败"><a href="#16、怎样对待自己的失败" class="headerlink" title="16、怎样对待自己的失败?"></a>16、怎样对待自己的失败?</h2><blockquote><p><strong>回答提示:</strong></p><p>我们大家生来都不是十全十美的,我相信我有第二个机会改正我的错误。</p></blockquote><h2 id="17、你为什么原意到我们公司来工作"><a href="#17、你为什么原意到我们公司来工作" class="headerlink" title="17、你为什么原意到我们公司来工作?"></a>17、你为什么原意到我们公司来工作?</h2><blockquote><p><strong>回答提示:</strong></p><p>对于这个问题,你要格外小心,如果你已经对该单位作了研究,你可以回答一些详细的原因,像“公司本身的高技术开发环境很吸引我”,“我同公司出生在同样的时代,我希望能够进入一家与我共同成长的公司。”、“你们公司一直都稳定发展,在近几年来在市场上很有竞争力。”、“我认为贵公司能够给我禔供一个与众不同的发展道路。”这都显示出你已经做了一些调查,也说明你对自己的未来有了较为具体的远景规划。</p></blockquote><h2 id="18、对这项工作-你有哪些可预见的困难"><a href="#18、对这项工作-你有哪些可预见的困难" class="headerlink" title="18、对这项工作,你有哪些可预见的困难?"></a>18、对这项工作,你有哪些可预见的困难?</h2><blockquote><p><strong>回答提示:</strong></p><p>①不宜直接说出具体的困难,否则可能令对方怀疑应聘者不行。</p><p>②可以尝试迂回战术,说出应聘者对困难所持有的态度一一工作中出现一些困难是正常的,也是难免的,但是只要有坚忍不拔的毅力、良好的合作精神以及事前<br>周密而充分的准备,任何困难都是可以克服。</p></blockquote><h2 id="19、如果录用了你-你将怎样开展工作"><a href="#19、如果录用了你-你将怎样开展工作" class="headerlink" title="19、如果录用了你,你将怎样开展工作?"></a>19、如果录用了你,你将怎样开展工作?</h2><blockquote><p><strong>回答提示:</strong></p><p>①如果应聘者对于应聘的职位缺乏足够的了解,最好不要直接说出自己开展工作的具体办法。</p><p>②可以尝试采迂回战术来回答,如“首先听取领导的指示和要求,然后就有关情况进行了解和熟悉,接下来制定一份近期的工作计划并报领导批准,最后根据计划开展工作。”</p><p><strong>分析</strong></p><p>这个问题的主要目的也是了解应聘者的工作能力和计划性、条理性,而且重点想要知道细节。如果向思路中所讲灼迂回战术,面试官会认为回避问题,如果引导了几次仍是回避的话,此人绝对不会录用了。</p></blockquote><h2 id="20、你希望与什么样的上级共事"><a href="#20、你希望与什么样的上级共事" class="headerlink" title="20、你希望与什么样的上级共事?"></a>20、你希望与什么样的上级共事?</h2><blockquote><p><strong>回答提示:</strong></p><p>①通过应聘者对上级的“希望”可以判断出应聘者<em>对自我要求</em>的意识,这既是一个陷阱,又是一次机会。</p><p>②最好回避对上级具体的希望,多谈对自己的要求。</p><p>③如“做为刚步入社会的新人,我应该多要求自己尽快熟悉环境、适应环境,而不应该对环境提出什么要求,只要能发挥我的专长就可以了。</p><p><strong>分析:</strong></p><p>这个问题比较好的回答是,希望我的上级能够在工作中对我多指导,对我工作中的错误能够立即指出。总之，从上级指导这个方面谈,不会有大的纰漏</p></blockquote><h2 id="21、与上级意见不一时-你将怎么办"><a href="#21、与上级意见不一时-你将怎么办" class="headerlink" title="21、与上级意见不一时,你将怎么办?"></a>21、与上级意见不一时,你将怎么办?</h2><blockquote><p><strong>回答提示:</strong></p><p>①一般可以这样回答“我会给上级以必要的解释和提醒,在这种情况下,我会服从上级的意见。”</p><p>②如果面试你的是总经理,而你所应聘的职位另有一位经理,且这位理当时不在场,可以这样回答:“对于非原则性问题,我服从上级的意见,对于涉及公司利益的重大问题,我希望能向更高层领导反映”</p><p><strong>分析:</strong></p><p>这个问题的标准答案是思路①,如果用②的回答,必死无疑。你没有摸清楚改公司的内部情况,先想打小报告,这样的人没有人敢要。</p></blockquote><h2 id="22、为什么选择我们公司"><a href="#22、为什么选择我们公司" class="headerlink" title="22、为什么选择我们公司?"></a>22、为什么选择我们公司?</h2><blockquote><p><strong>回答提示:</strong></p><p>曾经在报章杂志看过关于贵公司的报道,与自己所追求的理念有志一同。而贵公司在业界的成绩也是有目共睹的,而且对员工的教育训练、升迁等世都很有制度。</p><p><strong>分析:</strong></p><p>去面试前先做功课,了解一下该公司的背景,让对方觉得你真的很有心想得到这份工作,而不只是探探路。</p></blockquote><h2 id="23、谈谈如何话应办公室工作的新环境"><a href="#23、谈谈如何话应办公室工作的新环境" class="headerlink" title="23、谈谈如何话应办公室工作的新环境?"></a>23、谈谈如何话应办公室工作的新环境?</h2><blockquote><p><strong>回答提示:</strong></p><p>①办公室里每个人有各自的岗位与职责,不得擅离岗位。</p><p>②根据领导指示和工作安排,制定工作计划,提前预备,并按计划完成。</p><p>③多请示并及时汇报,遇到不明白的要虚心请教。</p><p>④抓间隙时间,多学习,努力提高自己的政治素质和业务水平</p></blockquote><h2 id="24、除了本公司外-还应聘了哪些公司"><a href="#24、除了本公司外-还应聘了哪些公司" class="headerlink" title="24、除了本公司外,还应聘了哪些公司"></a>24、除了本公司外,还应聘了哪些公司</h2><blockquote><p><strong>回答提示:</strong></p><p>很奇怪,这是相当多公司会问的问题,其用意是要概略知道应徵者的求职志向,所以这并非绝对是负面答案,就算不便说出公司名称,也应回答“销售同种产品的公<br>司”,如果应聘的其他公司是不同业界,容易让人产生无法信任的感觉。</p></blockquote><h2 id="25、你还有什么问题要问吗"><a href="#25、你还有什么问题要问吗" class="headerlink" title="25、你还有什么问题要问吗?"></a>25、你还有什么问题要问吗?</h2><blockquote><p><strong>回答提示:</strong></p><p>企业的这个问题看上去<em>可有可无</em>,其实<strong>很关键</strong>,企业不喜欢说“没问题”的人,因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题,如果<br>有人这样问:贵公司对新入公司的员工有没有什么培训项目,我可以参加吗?或者说贵公司的晋升机制是什么样的?企业将很欢迎,因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。</p></blockquote><h2 id="26、如果你被录用-何时可以到职"><a href="#26、如果你被录用-何时可以到职" class="headerlink" title="26、如果你被录用,何时可以到职?"></a>26、如果你被录用,何时可以到职?</h2><blockquote><p><strong>回答提示:</strong></p><p>大多数企业会关心就职时间,最好是回答“如果被录用的话,到职日可按公司规定上班”,但如果还未辞去上一个工作、上班时间又太近,似乎有些强人所难,因为交<br>接至少要一个月的时间,应进一步说明原因,录取公司应该会通融的。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 职场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件操作及应用</title>
      <link href="/posts/8573.html"/>
      <url>/posts/8573.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220093559.png" alt=""></p><h1 id="Python文件操作、应用"><a href="#Python文件操作、应用" class="headerlink" title="Python文件操作、应用"></a>Python文件操作、应用</h1><h2 id="1、文件操作介绍"><a href="#1、文件操作介绍" class="headerlink" title="1、文件操作介绍"></a>1、文件操作介绍</h2><blockquote><p>文件是什么呢？</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191219222645.png" alt="大致这样吧"></p><blockquote><p>文件的作用呢？</p><p>大家应该听说过一句话：“好记性不如烂笔头”。</p><p>不仅人的大脑会遗忘事情，计算机也会如此，比如一个程序在运行过程中用了九牛二虎之力终于计算出了结果，试想一下如果不把这些数据存放起来，相比重启电脑之后，“哭都没地方哭了” </p><p><em>相信很多做ps的朋友，深有体会</em></p><p>可见，在把数据存储起来有做么大的价值</p><p>使用文件的目的：</p><blockquote><p>就是把一些存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力</p></blockquote></blockquote><h2 id="2、文件的打开与关闭"><a href="#2、文件的打开与关闭" class="headerlink" title="2、文件的打开与关闭"></a>2、文件的打开与关闭</h2><h3 id="2-1、打开文件"><a href="#2-1、打开文件" class="headerlink" title="2.1、打开文件"></a>2.1、打开文件</h3><blockquote><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</p><p>open(文件名，访问模式)示例如下：</p></blockquote><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span></code></pre><p><strong>说明:</strong></p><table><thead><tr><th align="center">访问模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3 id="2-2、关闭文件"><a href="#2-2、关闭文件" class="headerlink" title="2.2、关闭文件"></a>2.2、关闭文件</h3><blockquote><p>close( ) 示例如下：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 新建一个文件，文件名为:test.txt</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭这个文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3、文件读写"><a href="#3、文件读写" class="headerlink" title="3、文件读写"></a>3、文件读写</h2><h3 id="3-1、写文件-write"><a href="#3-1、写文件-write" class="headerlink" title="3.1、写文件(write)"></a>3.1、写文件(write)</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220081703.png" alt=""></p><p>注意：</p><ul><li>如果文件不存在那么创建，如果存在那么就先清空，然后写入数据</li></ul><h3 id="3-2、读数据-read"><a href="#3-2、读数据-read" class="headerlink" title="3.2、读数据(read)"></a>3.2、读数据(read)</h3><blockquote><p>使用read(num)可以从文件中读取数据，num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220082213.png" alt=""></p><h3 id="3-3、读数据-readlines"><a href="#3-3、读数据-readlines" class="headerlink" title="3.3、读数据(readlines)"></a>3.3、读数据(readlines)</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220082455.png" alt=""></p><h3 id="3-4、读数据-readline"><a href="#3-4、读数据-readline" class="headerlink" title="3.4、读数据(readline)"></a>3.4、读数据(readline)</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220082813.png" alt=""></p><p>注意：</p><ul><li>如果open是打开一个文件，那么可以不用写打开的模式，即只写 <code>open('text.txt')</code></li><li>如果使用读了多次，那么后面读取的数据是从上次读完后的位置开始的</li></ul><h3 id="3-5、文件定位读写"><a href="#3-5、文件定位读写" class="headerlink" title="3.5、文件定位读写"></a>3.5、文件定位读写</h3><h4 id="3-5-1、获取当前读写的位置"><a href="#3-5-1、获取当前读写的位置" class="headerlink" title="3.5.1、获取当前读写的位置"></a>3.5.1、获取当前读写的位置</h4><blockquote><p>在读写文件的过程中，如果想知道当前的位置，可以使用tell()来获取</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个已经存在的文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"读取的数据是 : "</span><span class="token punctuation">,</span> str<span class="token comment" spellcheck="true"># 查找当前位置</span>position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"当前文件位置 : "</span><span class="token punctuation">,</span> positionstr <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"读取的数据是 : "</span><span class="token punctuation">,</span> str<span class="token comment" spellcheck="true"># 查找当前位置</span>position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"当前文件位置 : "</span><span class="token punctuation">,</span> positionf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-5-2、定位到某个位置"><a href="#3-5-2、定位到某个位置" class="headerlink" title="3.5.2、定位到某个位置"></a>3.5.2、定位到某个位置</h4><blockquote><p>如果在读写文件的过程中，需要从另外一个位置进行操作的话，可以使用seek()</p><p>seek(offset, from)有2个参数</p></blockquote><ul><li>offset:偏移量</li><li>from:方向<ul><li>0:表示文件开头</li><li>1:表示当前位置</li><li>2:表示文件末尾</li></ul></li></ul><p><em>demo:把位置设置为：从文件开头，偏移5个字节</em></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个已经存在的文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"读取的数据是 : "</span><span class="token punctuation">,</span> str<span class="token comment" spellcheck="true"># 查找当前位置</span>position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"当前文件位置 : "</span><span class="token punctuation">,</span> position<span class="token comment" spellcheck="true"># 重新设置位置</span>f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查找当前位置</span>position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"当前文件位置 : "</span><span class="token punctuation">,</span> positionf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>demo:把位置设置为：离文件末尾，3字节处</em></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个已经存在的文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查找当前位置</span>position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"当前文件位置 : "</span><span class="token punctuation">,</span> position<span class="token comment" spellcheck="true"># 重新设置位置</span>f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取到的数据为：文件最后3个字节数据</span>str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"读取的数据是 : "</span><span class="token punctuation">,</span> strf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4、制作文件备份"><a href="#4、制作文件备份" class="headerlink" title="4、制作文件备份"></a>4、制作文件备份</h2><blockquote><p>输入文件的名字，然后程序自动完成对文件的备份操作</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220083035.png" alt=""></p><h2 id="5、文件、文件夹相关操作"><a href="#5、文件、文件夹相关操作" class="headerlink" title="5、文件、文件夹相关操作"></a>5、文件、文件夹相关操作</h2><blockquote><p>有些时候，需要对文件进行重命名、删除等一些操作，python的os模块中都有这么功能</p></blockquote><h3 id="5-1、文件重命名"><a href="#5-1、文件重命名" class="headerlink" title="5.1、文件重命名"></a>5.1、文件重命名</h3><blockquote><p>os模块中的rename()可以完成对文件的重命名操作</p><p>rename(需要修改的文件名, 新的文件名)</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要注意以下</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220083442.png" alt=""></p><h3 id="5-2、删除文件"><a href="#5-2、删除文件" class="headerlink" title="5.2、删除文件"></a>5.2、删除文件</h3><blockquote><p>os模块中的remove()可以完成对文件的删除操作</p><p>remove(待删除的文件名)</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span></code></pre><h3 id="5-3、创建文件夹"><a href="#5-3、创建文件夹" class="headerlink" title="5.3、创建文件夹"></a>5.3、创建文件夹</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"小风"</span><span class="token punctuation">)</span></code></pre><h3 id="5-4、获取当前目录"><a href="#5-4、获取当前目录" class="headerlink" title="5.4、获取当前目录"></a>5.4、获取当前目录</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="5-5、改变默认目录"><a href="#5-5、改变默认目录" class="headerlink" title="5.5、改变默认目录"></a>5.5、改变默认目录</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">)</span></code></pre><h3 id="5-6、获取目录列表"><a href="#5-6、获取目录列表" class="headerlink" title="5.6、获取目录列表"></a>5.6、获取目录列表</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span></code></pre><h3 id="5-7、删除文件夹"><a href="#5-7、删除文件夹" class="headerlink" title="5.7、删除文件夹"></a>5.7、删除文件夹</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">"小风"</span><span class="token punctuation">)</span></code></pre><h2 id="6、批量修改文件名"><a href="#6、批量修改文件名" class="headerlink" title="6、批量修改文件名"></a>6、批量修改文件名</h2><blockquote><p>例如，我们有很多文件，想批量修改，该怎么办呢？</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 批量在文件名前加前缀</span><span class="token keyword">import</span> osfunFlag <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 1表示添加标志  2表示删除标志</span>folderName <span class="token operator">=</span> <span class="token string">'./小风/'</span><span class="token comment" spellcheck="true"># 获取指定路径的所有文件名字</span>dirList <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folderName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 遍历输出所有文件名字</span><span class="token keyword">for</span> name <span class="token keyword">in</span> dirList<span class="token punctuation">:</span>    <span class="token keyword">if</span> funFlag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        newName <span class="token operator">=</span> <span class="token string">'[A2Data出品-]'</span> <span class="token operator">+</span> name     <span class="token keyword">elif</span> funFlag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> len<span class="token punctuation">(</span><span class="token string">'[A2Data出品]-'</span><span class="token punctuation">)</span>        newName <span class="token operator">=</span> name<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>newName<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>folderName<span class="token operator">+</span>name<span class="token punctuation">,</span>folderName<span class="token operator">+</span>newName<span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191220093301.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数(下)</title>
      <link href="/posts/6275.html"/>
      <url>/posts/6275.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python函数-下"><a href="#Python函数-下" class="headerlink" title="Python函数(下)"></a>Python函数(下)</h1><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191219085422.png" alt=""></p><h2 id="1、引用"><a href="#1、引用" class="headerlink" title="1、引用"></a>1、引用</h2><blockquote><p>在python中，值是靠引用来传递来的。</p></blockquote><p><strong>我们可以用id()来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token number">13033816</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 注意两个变量的id值相同</span><span class="token number">13033816</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 注意a的id值已经变了</span><span class="token number">13033792</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># b的id值依旧</span><span class="token number">13033816</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">139935018544808</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">139935018544808</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">139935018544808</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 注意a与b始终指向同一个地址</span><span class="token number">139935018544808</span></code></pre><h2 id="2、递归函数"><a href="#2、递归函数" class="headerlink" title="2、递归函数"></a>2、递归函数</h2><h3 id="2-1、什么是递归函数"><a href="#2-1、什么是递归函数" class="headerlink" title="2.1、什么是递归函数"></a>2.1、什么是递归函数</h3><blockquote><p>通过前面的学习知道一个函数可以调用其他函数。</p><p>如果一个函数在内部不调用其它的函数，而是自己本身的话，这个函数就是递归函数。</p></blockquote><h3 id="2-2、递归函数的作用"><a href="#2-2、递归函数的作用" class="headerlink" title="2.2、递归函数的作用"></a>2.2、递归函数的作用</h3><blockquote><p>举个例子，我们来计算阶乘  n! = 1*2 * 3 * … * n</p></blockquote><p><strong>方案1：</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191219083828.png" alt=""></p><p><em>阶乘的规律</em></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>! <span class="token operator">=</span> <span class="token number">1</span><span class="token number">2</span>! <span class="token operator">=</span> <span class="token number">2</span> × <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> × <span class="token number">1</span>!<span class="token number">3</span>! <span class="token operator">=</span> <span class="token number">3</span> × <span class="token number">2</span> × <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> × <span class="token number">2</span>!<span class="token number">4</span>! <span class="token operator">=</span> <span class="token number">4</span> × <span class="token number">3</span> × <span class="token number">2</span> × <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">4</span> × <span class="token number">3</span>!<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n! <span class="token operator">=</span> n × <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span>!</code></pre><p><strong>方案2：</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191219084252.png" alt="递归"></p><p><em>递归原理</em></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191219084302.png" alt=""></p><h2 id="3、匿名函数"><a href="#3、匿名函数" class="headerlink" title="3、匿名函数"></a>3、匿名函数</h2><blockquote><p>用lambda关键词能创建小型匿名函数。这种函数得名于省略了用def声明函数的标准步骤。</p><p><strong>lambda函数</strong>的语法只包含一个语句，如下：</p></blockquote><pre class=" language-python"><code class="language-python">    <span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression</code></pre><p>如下实例：</p><pre class=" language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2<span class="token comment" spellcheck="true">#调用sum函数</span><span class="token keyword">print</span> <span class="token string">"Value of total : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Value of total : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span></code></pre><p>以上实例输出结果：</p><pre class=" language-python"><code class="language-python">Value of total <span class="token punctuation">:</span>  <span class="token number">30</span>Value of total <span class="token punctuation">:</span>  <span class="token number">40</span></code></pre><p>Lambda函数能接收任何数量的参数但只能返回一个表达式的值</p><p>匿名函数不能直接调用print，因为lambda需要一个表达式</p><p> <strong>应用场合</strong></p><h4 id="3-1函数作为参数传递"><a href="#3-1函数作为参数传递" class="headerlink" title="3.1函数作为参数传递"></a>3.1函数作为参数传递</h4><ol><li><p>自己定义函数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"a ="</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"b ="</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"result ="</span><span class="token punctuation">,</span> opt<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>result <span class="token operator">=</span> <span class="token number">3</span></code></pre></li><li><p>作为内置函数的参数</p></li></ol><h4 id="3-2想一想，下面的数据如何指定按age或name排序？"><a href="#3-2想一想，下面的数据如何指定按age或name排序？" class="headerlink" title="3.2想一想，下面的数据如何指定按age或name排序？"></a>3.2想一想，下面的数据如何指定按age或name排序？</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># A2Data制作</span>stus <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="3-3-按name排序："><a href="#3-3-按name排序：" class="headerlink" title="3.3 按name排序："></a>3.3 按name排序：</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> stus<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> stus<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'wangwu'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="3-4按age排序："><a href="#3-4按age排序：" class="headerlink" title="3.4按age排序："></a>3.4按age排序：</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> stus<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> stus<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'wangwu'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h2 id="4、函数使用注意事项"><a href="#4、函数使用注意事项" class="headerlink" title="4、函数使用注意事项"></a>4、函数使用注意事项</h2><h3 id="4-1、自定义函数"><a href="#4-1、自定义函数" class="headerlink" title="4.1、自定义函数"></a>4.1、自定义函数</h3><blockquote><p>1、无参数、无返回值</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        语句</code></pre><p>2、无参数、有返回值</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        语句        <span class="token keyword">return</span> 需要返回的数值</code></pre><p>注意:</p><ul><li>一个函数到底有没有返回值，就看有没有return，因为只有return才可以返回数据</li><li>在开发中往往根据需求来设计函数需不需要返回值</li><li>函数中，可以有多个return语句，但是只要执行到一个return语句，那么就意味着这个函数的调用完成</li></ul><p>3、有参数、无返回值</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">:</span>        语句</code></pre><p>注意：</p><ul><li>在调用函数时，如果需要把一些数据一起传递过去，被调用函数就需要用参数来接收</li><li>参数列表中变量的个数根据实际传递的数据的多少来确定</li></ul><p>4、有参数、有返回值</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">:</span>        语句        <span class="token keyword">return</span> 需要返回的数值</code></pre><p>5、函数名不能重复（如下所示）</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191219084919.png" alt=""></p><h3 id="4-2、调用函数"><a href="#4-2、调用函数" class="headerlink" title="4.2、调用函数"></a>4.2、调用函数</h3><blockquote><p>1、调用的方式为：</p><pre class=" language-python"><code class="language-python">    函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>实参列表<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>2、调用时，到底写不写 实参</p><ul><li>如果调用的函数 在定义时有形参，那么在调用的时候就应该传递参数</li></ul><p>3、调用时，实参的个数和先后顺序应该和定义函数中要求的一致</p><p>4、如果调用的函数有返回值，那么就可以用一个变量来进行保存这个值</p></blockquote><h3 id="4-3、作用域"><a href="#4-3、作用域" class="headerlink" title="4.3、作用域"></a>4.3、作用域</h3><blockquote><p>1、在一个函数中定义的变量，只能在本函数中用(局部变量)</p><p>2、在函数外定义的变量，可以在所有的函数中使用(全局变量)</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数(中)</title>
      <link href="/posts/30873.html"/>
      <url>/posts/30873.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191218085353.png" alt=""></p><h1 id="Python函数-中"><a href="#Python函数-中" class="headerlink" title="Python函数(中)"></a>Python函数(中)</h1><h2 id="1、回顾函数应用"><a href="#1、回顾函数应用" class="headerlink" title="1、回顾函数应用"></a>1、回顾函数应用</h2><blockquote><ul><li>函数的嵌套应用</li><li>程序设计的思路，复杂问题分解为简单问题</li></ul></blockquote><p><strong>Demo</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.写一个函数打印一条直线</span><span class="token comment" spellcheck="true"># 2.打印自定义行数的横线</span><span class="token comment" spellcheck="true"># 打印一条</span><span class="token keyword">def</span> <span class="token function">printOneLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印多条</span><span class="token keyword">def</span> <span class="token function">printNumLine</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># printOneLine 函数已经完成了打印横线的功能</span>    <span class="token comment" spellcheck="true"># 只需要多次调用此函数即可</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>        printOneLine<span class="token punctuation">(</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 调用</span>printNumLine<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><strong>Demo1</strong></p><blockquote><p>1.写一个函数求三个数的和</p><p>2.写一个函数求三个数的平均值</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 求三个数的和</span><span class="token keyword">def</span> <span class="token function">sum3Number</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c    <span class="token comment" spellcheck="true">#return的后面可以是数值，也可以是表达式</span><span class="token comment" spellcheck="true"># 完成三个数的平均值</span><span class="token keyword">def</span> <span class="token function">average3Number</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 因为sum3Number函数已经完成3个数的求和</span>    <span class="token comment" spellcheck="true"># 将接收到的3个数，当做实参传递即可</span>    sumResult <span class="token operator">=</span> sum3Number<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>    aveResult <span class="token operator">=</span> sumResult<span class="token operator">/</span><span class="token number">3.0</span>    <span class="token keyword">return</span> aveResult<span class="token comment" spellcheck="true"># 调用函数，完成对3个数求平均值</span>result <span class="token operator">=</span> average3Number<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"average is %d"</span><span class="token operator">%</span>result<span class="token punctuation">)</span></code></pre><h2 id="2、局部变量"><a href="#2、局部变量" class="headerlink" title="2、局部变量"></a>2、局部变量</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191218083547.png" alt=""></p><p><strong>归纳分析</strong></p><blockquote><ul><li>局部变量，就是在函数内部定义的变量</li><li>不同的函数，可以定义相同的名字的局部变量，但是各用个的不会产生影响</li><li>局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储，这就是它的作用</li></ul></blockquote><h2 id="3、全局变量"><a href="#3、全局变量" class="headerlink" title="3、全局变量"></a>3、全局变量</h2><h3 id="3-1、全局变量是什么？"><a href="#3-1、全局变量是什么？" class="headerlink" title="3.1、全局变量是什么？"></a>3.1、全局变量是什么？</h3><blockquote><p>如果一个变量，既能在一个函数中使用，也能在其他的函数中使用，这样的变量就是<code>全局变量</code></p></blockquote><p><strong>Demo</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义全局变量</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span>test1<span class="token punctuation">(</span><span class="token punctuation">)</span>test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果显而易见</span><span class="token number">100</span><span class="token number">100</span></code></pre><h3 id="3-2、全局和局部变量名一致的情况"><a href="#3-2、全局和局部变量名一致的情况" class="headerlink" title="3.2、全局和局部变量名一致的情况"></a>3.2、全局和局部变量名一致的情况</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191218084338.png" alt=""></p><h3 id="3-3、修改全局变量"><a href="#3-3、修改全局变量" class="headerlink" title="3.3、修改全局变量"></a>3.3、修改全局变量</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191218084607.png" alt=""></p><h3 id="3-4、可变类型的全局变量"><a href="#3-4、可变类型的全局变量" class="headerlink" title="3.4、可变类型的全局变量"></a>3.4、可变类型的全局变量</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> fUnboundLocalError<span class="token punctuation">:</span> local variable <span class="token string">'a'</span> referenced before assignment<span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> li<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="3-5、-归纳总结"><a href="#3-5、-归纳总结" class="headerlink" title="3.5、 归纳总结"></a>3.5、 归纳总结</h3><blockquote><ul><li>在函数外边定义的变量叫做<code>全局变量</code></li><li>全局变量能够在所有的函数中进行访问</li><li>如果在函数中修改全局变量，那么就需要使用<code>global</code>进行声明，否则出错</li><li>如果全局变量的名字和局部变量的名字相同，那么使用的是局部变量的，小技巧<code>强龙不压地头蛇</code></li><li></li><li>在函数中不使用global声明全局变量时不能修改全局变量的本质是不能修改全局变量的指向，即不能将全局变量指向新的数据。</li><li>对于不可变类型的全局变量来说，因其指向的数据不能修改，所以不使用global时无法修改全局变量。</li><li>对于可变类型的全局变量来说，因其指向的数据可以修改，所以不使用global时也可修改全局变量。</li></ul></blockquote><h2 id="4、函数返回值"><a href="#4、函数返回值" class="headerlink" title="4、函数返回值"></a>4、函数返回值</h2><blockquote><p>在python中我们可不可以返回多个值？</p><p><strong>本质是利用了元组</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">divid</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     shang <span class="token operator">=</span> a<span class="token operator">//</span>b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     yushu <span class="token operator">=</span> a<span class="token operator">%</span>b <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> shang<span class="token punctuation">,</span> yushu<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> sh<span class="token punctuation">,</span> yu <span class="token operator">=</span> divid<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> sh<span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> yu<span class="token number">1</span></code></pre><h2 id="5、函数参数"><a href="#5、函数参数" class="headerlink" title="5、函数参数"></a>5、函数参数</h2><h3 id="5-1、-缺省参数"><a href="#5-1、-缺省参数" class="headerlink" title="5.1、 缺省参数"></a>5.1、 缺省参数</h3><blockquote><p>调用函数时，缺省参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 打印任何传入的字符串</span>   <span class="token keyword">print</span> <span class="token string">"Name: "</span><span class="token punctuation">,</span> name   <span class="token keyword">print</span> <span class="token string">"Age "</span><span class="token punctuation">,</span> age<span class="token comment" spellcheck="true"># 调用printinfo函数</span>printinfo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span></code></pre><p>以上实例输出结果：</p><pre class=" language-python"><code class="language-python">Name<span class="token punctuation">:</span>  mikiAge  <span class="token number">35</span>Name<span class="token punctuation">:</span>  mikiAge  <span class="token number">9</span></code></pre><h4 id="注意：带有默认值的参数一定要位于参数列表的最后面。"><a href="#注意：带有默认值的参数一定要位于参数列表的最后面。" class="headerlink" title="注意：带有默认值的参数一定要位于参数列表的最后面。"></a>注意：带有默认值的参数一定要位于参数列表的最后面。</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>SyntaxError<span class="token punctuation">:</span> non<span class="token operator">-</span>default argument follows default argument</code></pre><h3 id="5-2、不定长参数"><a href="#5-2、不定长参数" class="headerlink" title="5.2、不定长参数"></a>5.2、不定长参数</h3><blockquote><p>有时可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，声明时不会命名。</p></blockquote><p>基本语法如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"函数_文档字符串"</span>    function_suite    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></code></pre><p>加了星号（<em>）的变量args会存放所有未命名的变量参数，args为元组；而加*</em>的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token triple-quoted-string string">"""可变参数演示示例"""</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"a ="</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"b ="</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"args ="</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> <span class="token string">"kwargs: "</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span> key<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意传递的参数对应</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>kwargs<span class="token punctuation">:</span> p <span class="token operator">=</span> <span class="token number">8</span>m <span class="token operator">=</span> <span class="token number">6</span>n <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"m"</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token operator">**</span>d<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意元组与字典的传参方式</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>kwargs<span class="token punctuation">:</span> p <span class="token operator">=</span> <span class="token number">8</span>m <span class="token operator">=</span> <span class="token number">6</span>n <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意不加星号与上面的区别</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span>kwargs<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span></code></pre><h3 id="5-3、引用传参"><a href="#5-3、引用传参" class="headerlink" title="5.3、引用传参"></a>5.3、引用传参</h3><ul><li>可变类型与不可变类型的变量分别作为函数参数时，会有什么不同吗？</li><li>Python有没有类似C语言中的指针传参呢？</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">selfAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token triple-quoted-string string">"""自增"""</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">+=</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> a_int <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a_int<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> selfAdd<span class="token punctuation">(</span>a_int<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a_int<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> selfAdd<span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre><p><strong>Python中函数参数是引用传递（注意不是值传递）。对于不可变类型，因变量不能修改，所以运算不会影响到变量自身；而对于可变类型来说，函数体中的运算有可能会更改传入的参数变量。</strong></p><h4 id="想一想为什么"><a href="#想一想为什么" class="headerlink" title="想一想为什么"></a>想一想为什么</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">selfAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token triple-quoted-string string">"""自增"""</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">=</span> a <span class="token operator">+</span> a   <span class="token comment" spellcheck="true"># 我们更改了函数体的这句话</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> a_int <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a_int<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> selfAdd<span class="token punctuation">(</span>a_int<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a_int<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> selfAdd<span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># 想一想为什么没有变呢？</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数(上)</title>
      <link href="/posts/34946.html"/>
      <url>/posts/34946.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217081025.png" alt=""></p><h1 id="Python函数-上"><a href="#Python函数-上" class="headerlink" title="Python函数(上)"></a>Python函数(上)</h1><h2 id="1、什么是函数"><a href="#1、什么是函数" class="headerlink" title="1、什么是函数"></a>1、什么是函数</h2><blockquote><p>如过在开发程序时，需要某块代码使用多次，但是为了提高编写的效率以及代码的复用。</p><ul><li>将具有独立功能的代码块组织为一个小模块—-&gt;函数</li></ul></blockquote><h2 id="2、函数的定义和调用"><a href="#2、函数的定义和调用" class="headerlink" title="2、函数的定义和调用"></a>2、函数的定义和调用</h2><h3 id="2-1、定义函数"><a href="#2-1、定义函数" class="headerlink" title="2.1、定义函数"></a>2.1、定义函数</h3><blockquote><p>格式如下：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    代码</code></pre><p><em>定义一个函数打印信息</em></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">21</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--人生苦短，我用Python--'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">21</span><span class="token punctuation">)</span></code></pre><h3 id="2-2、调用函数"><a href="#2-2、调用函数" class="headerlink" title="2.2、调用函数"></a>2.2、调用函数</h3><blockquote><p>定义函数之后，就相当于具备一些功能的代码块，想要这些代码执行，就需要调用函数。</p><p>（定义函数后，函数不会自动执行的）如何调用呢？</p><ul><li>函数名（）</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217075442.png" alt=""></p><h3 id="2-3、动动手"><a href="#2-3、动动手" class="headerlink" title="2.3、动动手"></a>2.3、动动手</h3><blockquote><p>定义一个函数，能够输出自己的姓名和年龄，并且调用这个函数让它执行！</p><ul><li>使用def 定义函数</li><li>编写函数完成之后，通过 函数名（）调用</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217075538.png" alt=""></p><h3 id="2-4、函数的文档说明"><a href="#2-4、函数的文档说明" class="headerlink" title="2.4、函数的文档说明"></a>2.4、函数的文档说明</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">"用来完成对2个数求和"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token operator">%</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token number">33</span></code></pre><p>如果执行，以下代码</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>test<span class="token punctuation">)</span></code></pre><p>能够看到test函数的相关说明</p><pre class=" language-python"><code class="language-python">Help on function test <span class="token keyword">in</span> module __main__<span class="token punctuation">:</span>test<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    用来完成对<span class="token number">2</span>个数求和<span class="token punctuation">(</span>END<span class="token punctuation">)</span></code></pre><h2 id="3、函数参数"><a href="#3、函数参数" class="headerlink" title="3、函数参数"></a>3、函数参数</h2><h3 id="3-1、定义带有参数的函数"><a href="#3-1、定义带有参数的函数" class="headerlink" title="3.1、定义带有参数的函数"></a>3.1、定义带有参数的函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">addnum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span>a<span class="token operator">+</span>b    <span class="token keyword">print</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><h3 id="3-2、调用带参函数"><a href="#3-2、调用带参函数" class="headerlink" title="3.2、调用带参函数"></a>3.2、调用带参函数</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用带有参数的函数时，需要在小括号中，传递数据</span>addnum<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217075841.png" alt=""></p><h3 id="3-3、参数练习题"><a href="#3-3、参数练习题" class="headerlink" title="3.3、参数练习题"></a>3.3、参数练习题</h3><blockquote><p>要求：定义一个函数，完成前2个数完成加法运算，然后对第3个数，进行减法；然后调用这个函数</p><ul><li>使用def定义函数，要注意有3个参数</li><li>调用的时候，这个函数定义时有几个参数，那么就需要传递几个参数</li></ul></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217080256.png" alt=""></p><h3 id="3-4、调用函数时参数的顺序"><a href="#3-4、调用函数时参数的顺序" class="headerlink" title="3.4、调用函数时参数的顺序"></a>3.4、调用函数时参数的顺序</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>SyntaxError<span class="token punctuation">:</span> positional argument follows keyword argument<span class="token operator">>></span><span class="token operator">></span> </code></pre><h3 id="3-5、总结"><a href="#3-5、总结" class="headerlink" title="3.5、总结"></a>3.5、总结</h3><blockquote><ul><li>定义时小括号中的参数，用来接收参数用的，称为 “形参”</li><li>调用时小括号中的参数，用来传递给函数用的，称为 “实参”</li></ul></blockquote><h2 id="4、返回值"><a href="#4、返回值" class="headerlink" title="4、返回值"></a>4、返回值</h2><blockquote><p>所谓“返回值”，就是程序中函数完成一件事情后，最后给调用者的结果</p></blockquote><h3 id="4-1、返回值的函数"><a href="#4-1、返回值的函数" class="headerlink" title="4.1、返回值的函数"></a>4.1、返回值的函数</h3><blockquote><p>想要在函数中把结果返回给调用者，需要在函数中使用return</p></blockquote><p><em>如下示例</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">add2num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> a<span class="token operator">+</span>b        <span class="token keyword">return</span> c</code></pre><p><em>或者</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">add2num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b</code></pre><h3 id="4-2、保存函数的返回值"><a href="#4-2、保存函数的返回值" class="headerlink" title="4.2、保存函数的返回值"></a>4.2、保存函数的返回值</h3><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#定义函数</span>    <span class="token keyword">def</span> <span class="token function">add2num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b    <span class="token comment" spellcheck="true">#调用函数，顺便保存函数的返回值</span>    result <span class="token operator">=</span> add2num<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#因为result已经保存了add2num的返回值，所以接下来就可以使用了</span>    <span class="token keyword">print</span> result</code></pre><p><em>结果</em></p><pre class=" language-python"><code class="language-python">    <span class="token number">198</span></code></pre><h2 id="5、函数的类型"><a href="#5、函数的类型" class="headerlink" title="5、函数的类型"></a>5、函数的类型</h2><blockquote><p>根据有没有参数，有没有返回值，可以互相结合，一共有4种</p><ul><li>无参数，无返回值</li><li>无参数，有返回值</li><li>有参数，无返回值</li><li>有参数，有返回值</li></ul></blockquote><h3 id="5-1、无参数，无返回值"><a href="#5-1、无参数，无返回值" class="headerlink" title="5.1、无参数，无返回值"></a>5.1、无参数，无返回值</h3><blockquote><p>此类函数，不能接收参数，也没有返回值，一般情况下，打印提示灯类似的功能，使用这类的函数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎关注A2Data"</span><span class="token punctuation">)</span></code></pre><h3 id="5-2、无参数，有返回值"><a href="#5-2、无参数，有返回值" class="headerlink" title="5.2、无参数，有返回值"></a>5.2、无参数，有返回值</h3><blockquote><p>此类函数，不能接收参数，但是可以返回某个数据，一般情况下，像采集数据，用此类函数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取温度</span><span class="token keyword">def</span> <span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#这里是获取温度的一些处理过程</span>    <span class="token comment" spellcheck="true">#为了简单起见，先模拟返回一个数据</span>    <span class="token keyword">return</span> <span class="token number">24</span>temperature <span class="token operator">=</span> getTemperature<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前的温度为:%d'</span><span class="token operator">%</span>temperature<span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217080730.png" alt=""></p><h3 id="5-3、有参数，无返回值"><a href="#5-3、有参数，无返回值" class="headerlink" title="5.3、有参数，无返回值"></a>5.3、有参数，无返回值</h3><blockquote><p>此类函数，能接收参数，但不可以返回数据，一般情况下，对某些变量设置数据而不需结果时，用此类函数</p></blockquote><h3 id="5-4、有参数，又返回值"><a href="#5-4、有参数，又返回值" class="headerlink" title="5.4、有参数，又返回值"></a>5.4、有参数，又返回值</h3><blockquote><p>此类函数，不仅能接收参数，还可以返回某个数据，一般情况下，像数据处理并需要结果的应用，用此类函数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算1~num的累积和</span><span class="token keyword">def</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>num<span class="token punctuation">:</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> i        i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> resultresult <span class="token operator">=</span> calculateNum<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1~100的累积和为:%d'</span><span class="token operator">%</span>result<span class="token punctuation">)</span></code></pre><p><em>结果</em></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token operator">~</span><span class="token number">100</span>的累积和为<span class="token punctuation">:</span> <span class="token number">5050</span></code></pre><h3 id="5-5、小归纳"><a href="#5-5、小归纳" class="headerlink" title="5.5、小归纳"></a>5.5、小归纳</h3><blockquote><ul><li>函数根据有没有参数，有没有返回值可以相互组合</li><li>定义函数时，是根据实际的功能需求来设计的，所以不同开发人员编写的函数类型各不相同</li></ul></blockquote><h2 id="6、函数的嵌套调用"><a href="#6、函数的嵌套调用" class="headerlink" title="6、函数的嵌套调用"></a>6、函数的嵌套调用</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191217080523.png" alt="嵌套调用"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python元组与字典</title>
      <link href="/posts/520.html"/>
      <url>/posts/520.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213231406.png" alt=""></p><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><blockquote><p>Python的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组使用小括号，列表使用方括号。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">99.9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aTuple<span class="token punctuation">(</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">99.9</span><span class="token punctuation">)</span></code></pre><h2 id="1、访问元组"><a href="#1、访问元组" class="headerlink" title="1、访问元组"></a>1、访问元组</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213182328.png" alt="查看元组"></p><h2 id="2、修改元组"><a href="#2、修改元组" class="headerlink" title="2、修改元组"></a>2、修改元组</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213182827.png" alt=""></p><blockquote><p>说明： <strong>python中不允许修改元组的数据，包括不能删除其中的元素。</strong></p></blockquote><h2 id="3、元组的内置函数count-index"><a href="#3、元组的内置函数count-index" class="headerlink" title="3、元组的内置函数count, index"></a>3、元组的内置函数count, index</h2><blockquote><p>index和count与字符串和列表中的用法相同</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意是左闭右开区间</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>ValueError<span class="token punctuation">:</span> tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> tuple<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token number">0</span></code></pre><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><blockquote><h1 id="字典介绍"><a href="#字典介绍" class="headerlink" title="字典介绍"></a>字典介绍</h1><ul><li>定义字典</li><li>获取字典数据(键、get)</li></ul></blockquote><p>想一想：</p><blockquote><p>如果有列表</p><pre class=" language-python"><code class="language-python">     nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span> <span class="token string">'a2data1'</span><span class="token punctuation">,</span> <span class="token string">'a2data2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>需要对”xiaoWang”这个名字写错了，通过代码修改：</p><pre class=" language-python"><code class="language-python">     nameList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a2data112'</span></code></pre><p>如果列表的顺序发生了变化，如下</p><pre class=" language-python"><code class="language-python">     nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span> <span class="token string">'a2data2'</span><span class="token punctuation">,</span>  <span class="token string">'a2data112'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>此时就需要修改下标，才能完成名字的修改</p><pre class=" language-python"><code class="language-python">     nameList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a2data112'</span></code></pre><h4 id="有没有方法，既能存储多个数据，还能在访问元素的很方便就能够定位到需要的那个元素呢？"><a href="#有没有方法，既能存储多个数据，还能在访问元素的很方便就能够定位到需要的那个元素呢？" class="headerlink" title="有没有方法，既能存储多个数据，还能在访问元素的很方便就能够定位到需要的那个元素呢？"></a><strong><code>有没有方法，既能存储多个数据，还能在访问元素的很方便就能够定位到需要的那个元素呢？</code></strong></h4></blockquote><p>答：</p><blockquote><p>字典</p></blockquote><p>另一个场景：</p><p>学生信息列表，每个学生信息包括学号、姓名、年龄等，如何从中找到某个学生的信息？</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> studens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"王宝强"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"马蓉"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">"宋喆"</span>，<span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><p><strong>循环遍历？ No！</strong></p><h2 id="0、根据键访问值"><a href="#0、根据键访问值" class="headerlink" title="0、根据键访问值"></a>0、根据键访问值</h2><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>结果:</p><pre><code>    班长    地球亚洲中国北京</code></pre><p>若访问不存在的键，则会报错：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> info<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>KeyError<span class="token punctuation">:</span> <span class="token string">'age'</span></code></pre><p>在我们不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> age <span class="token comment" spellcheck="true">#'age'键不存在，所以age为None</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&lt;</span>type <span class="token string">'NoneType'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 若info中不存在'age'这个键，就返回默认值18</span><span class="token operator">>></span><span class="token operator">></span> age<span class="token number">18</span></code></pre><h2 id="1、常见操作1"><a href="#1、常见操作1" class="headerlink" title="1、常见操作1"></a>1、常见操作1</h2><h3 id="1-1、查看元素"><a href="#1-1、查看元素" class="headerlink" title="1.1、查看元素"></a>1.1、查看元素</h3><p>除了使用key查找数据，还可以使用get来获取数据</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213183314.png" alt="key获取值"></p><h3 id="1-2、修改元素"><a href="#1-2、修改元素" class="headerlink" title="1.2、修改元素"></a>1.2、修改元素</h3><p>字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213183458.png" alt="修改学号"></p><h3 id="1-3、添加元素"><a href="#1-3、添加元素" class="headerlink" title="1.3、添加元素"></a>1.3、添加元素</h3><p>访问不存在的元素</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213183641.png" alt="不可访问"></p><p>如果在使用 <strong>变量名[‘键’] = 数据</strong> 时，这个“键”在字典中，不存在，那么就会新增这个元素</p><p><strong>添加新的元素</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213185328.png" alt="添加新元素"></p><h3 id="1-4、删除元素"><a href="#1-4、删除元素" class="headerlink" title="1.4、删除元素"></a>1.4、删除元素</h3><p>对字典进行删除操作，有一下几种：</p><ul><li>del</li><li>clear()</li></ul><blockquote><p>del 删除指定的元素</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213185526.png" alt=""></p><blockquote><p>del 删除整个字典</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213185930.png" alt=""></p><blockquote><p>clear 清空整个字典</p></blockquote><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'a2data'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'China'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'清空前,%s'</span><span class="token operator">%</span>info<span class="token punctuation">)</span>info<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'清空后,%s'</span><span class="token operator">%</span>info<span class="token punctuation">)</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213190644.png" alt=""></p><h2 id="2、常见操作2"><a href="#2、常见操作2" class="headerlink" title="2、常见操作2"></a>2、常见操作2</h2><h3 id="2-1、len"><a href="#2-1、len" class="headerlink" title="2.1、len()"></a>2.1、len()</h3><blockquote><p>测量字典中，键值对的个数</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213190819.png" alt=""></p><h3 id="2-2、keys"><a href="#2-2、keys" class="headerlink" title="2.2、keys"></a>2.2、keys</h3><blockquote><p>返回一个包含字典所有KEY的列表</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213190843.png" alt=""></p><h3 id="2-3、values"><a href="#2-3、values" class="headerlink" title="2.3、values"></a>2.3、values</h3><blockquote><p>返回一个包含字典所有value的列表</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213190900.png" alt=""></p><h3 id="2-4、items"><a href="#2-4、items" class="headerlink" title="2.4、items"></a>2.4、items</h3><blockquote><p>返回一个包含所有（键，值）元祖的列表</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213190922.png" alt=""></p><h3 id="2-5、has-key"><a href="#2-5、has-key" class="headerlink" title="2.5、has_key"></a>2.5、has_key</h3><blockquote><p>dict.has_key(key)如果key在字典中，返回True，否则返回False</p><p>在python3之后删除了这个方法。</p></blockquote><h4 id="contains-key"><a href="#contains-key" class="headerlink" title="contains(key)"></a><strong>contains</strong>(key)</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213191401.png" alt=""></p><h2 id="3、字典遍历"><a href="#3、字典遍历" class="headerlink" title="3、字典遍历"></a>3、字典遍历</h2><blockquote><p>通过for … in …:的语法结构，我们可以遍历字符串、列表、元组、字典等数据结构。</p></blockquote><p><strong>注意python语法的缩进</strong></p><h3 id="3-1、字符串遍历"><a href="#3-1、字符串遍历" class="headerlink" title="3.1、字符串遍历"></a>3.1、字符串遍历</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a_str <span class="token operator">=</span> <span class="token string">"hello itcast"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> char <span class="token keyword">in</span> a_str<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>h e l l o   i t c a s t</code></pre><h3 id="3-2、列表遍历"><a href="#3-2、列表遍历" class="headerlink" title="3.2、列表遍历"></a>3.2、列表遍历</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> num <span class="token keyword">in</span> a_list<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span></code></pre><h3 id="3-3、元组遍历"><a href="#3-3、元组遍历" class="headerlink" title="3.3、元组遍历"></a>3.3、元组遍历</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a_turple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> num <span class="token keyword">in</span> a_turple<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span></code></pre><h3 id="3-4字典遍历"><a href="#3-4字典遍历" class="headerlink" title="3.4字典遍历"></a>3.4字典遍历</h3><h4 id="3-4-1、key（键）"><a href="#3-4-1、key（键）" class="headerlink" title="3.4.1、key（键）"></a>3.4.1、key（键）</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213230115.png" alt=""></p><h4 id="3-4-2、value（值）"><a href="#3-4-2、value（值）" class="headerlink" title="3.4.2、value（值）"></a>3.4.2、value（值）</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213230133.png" alt=""></p><h4 id="3-4-3、项（元素）"><a href="#3-4-3、项（元素）" class="headerlink" title="3.4.3、项（元素）"></a>3.4.3、项（元素）</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213230153.png" alt=""></p><h4 id="3-4-4、-key-value（键值对）"><a href="#3-4-4、-key-value（键值对）" class="headerlink" title="3.4.4、 key-value（键值对）"></a>3.4.4、 key-value（键值对）</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213230213.png" alt=""></p><p>想一想，如何实现带下标索引的遍历</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> chr <span class="token keyword">in</span> chars<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> chr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span> a<span class="token number">1</span> b<span class="token number">2</span> c<span class="token number">3</span> d</code></pre><p> <strong>enumerate()</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> chr <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> i<span class="token punctuation">,</span> chr<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span> a<span class="token number">1</span> b<span class="token number">2</span> c<span class="token number">3</span> d</code></pre><h2 id="4、公共方法"><a href="#4、公共方法" class="headerlink" title="4、公共方法"></a>4、公共方法</h2><h3 id="4-1、运算符"><a href="#4-1、运算符" class="headerlink" title="4.1、运算符"></a>4.1、运算符</h3><table><thead><tr><th align="left">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="left">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td align="left">*</td><td>‘Hi!’ * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>复制</td><td>字符串、列表、元组</td></tr><tr><td align="left">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="left">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr></tbody></table><h4 id=""><a href="#" class="headerlink" title="+"></a>+</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello "</span> <span class="token operator">+</span> <span class="token string">"a2data"</span><span class="token string">'hello a2data'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span></code></pre><h4 id="-1"><a href="#-1" class="headerlink" title="*"></a>*</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'ab'</span><span class="token operator">*</span><span class="token number">4</span><span class="token string">'ababab'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span></code></pre><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a2'</span> <span class="token keyword">in</span> <span class="token string">'hello a2data'</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"name"</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"小风"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">}</span><span class="token boolean">True</span></code></pre><p><strong>注意，in在对字典操作时，判断的是字典的键</strong></p><h3 id="4-2、python内置函数"><a href="#4-2、python内置函数" class="headerlink" title="4.2、python内置函数"></a>4.2、python内置函数</h3><blockquote><p>Python包含了以下内置函数</p><p>Python3 使用 <strong>import operator</strong></p></blockquote><table><thead><tr><th align="left">序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="left">1</td><td>cmp(item1, item2)</td><td>比较两个值</td></tr><tr><td align="left">2</td><td>len(item)</td><td>计算容器中元素个数</td></tr><tr><td align="left">3</td><td>max(item)</td><td>返回容器中元素最大值</td></tr><tr><td align="left">4</td><td>min(item)</td><td>返回容器中元素最小值</td></tr><tr><td align="left">5</td><td>del(item)</td><td>删除变量</td></tr></tbody></table><h4 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"a2data"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token string">"a2data"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token string">"a2data"</span><span class="token punctuation">,</span> <span class="token string">"a2data"</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cmp<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span></code></pre><p><strong>注意：cmp在比较字典数据时，先比较键，再比较值。</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191213230858.png" alt=""></p><h4 id="len"><a href="#len" class="headerlink" title="len"></a>len</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token string">"hello a2data"</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">2</span></code></pre><p><strong>注意：len在操作字典数据时，返回的是键值对个数。</strong></p><h4 id="max"><a href="#max" class="headerlink" title="max"></a>max</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token string">"hello a2data"</span><span class="token punctuation">)</span><span class="token string">'t'</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">522</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">522</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token string">'b'</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token string">'b'</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token string">'c'</span></code></pre><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><blockquote><p>del有两种用法，一种是del加空格，另一种是del()</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> a<span class="token operator">>></span><span class="token operator">></span> aTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>NameError<span class="token punctuation">:</span> name <span class="token string">'a'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>NameError<span class="token punctuation">:</span> name <span class="token string">'a'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined</code></pre><h3 id="4-3、多维列表-元祖访问的示例"><a href="#4-3、多维列表-元祖访问的示例" class="headerlink" title="4.3、多维列表/元祖访问的示例"></a>4.3、多维列表/元祖访问的示例</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>IndexError<span class="token punctuation">:</span> tuple index out of range<span class="token operator">>></span><span class="token operator">></span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> tuple1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>IndexError<span class="token punctuation">:</span> list index out of range<span class="token operator">>></span><span class="token operator">></span> tuple2 <span class="token operator">=</span> tuple1<span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> tuple2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> <span class="token string">'int'</span> object <span class="token keyword">is</span> <span class="token operator">not</span> subscriptable</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python列表介绍</title>
      <link href="/posts/58489.html"/>
      <url>/posts/58489.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191212085923.png" alt="Python列表"></p><h1 id="Python列表解析章节"><a href="#Python列表解析章节" class="headerlink" title="Python列表解析章节"></a>Python列表解析章节</h1><h2 id="1、列表介绍"><a href="#1、列表介绍" class="headerlink" title="1、列表介绍"></a>1、列表介绍</h2><p>想一想：</p><blockquote><p>前面学习的字符串可以用来存储一串信息，那么想一想，怎样存储公号所有粉丝的名字呢？</p><p>定义100个变量，每个变量存放一个粉丝的姓名可行吗？有更好的办法吗？</p></blockquote><p>答：</p><blockquote><p>列表</p></blockquote><h3 id="1-1、列表的格式"><a href="#1-1、列表的格式" class="headerlink" title="1.1、列表的格式"></a>1.1、列表的格式</h3><p>变量A的类型为列表</p><pre class=" language-python"><code class="language-python">namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span></code></pre><p>比C语言的数组强大的地方在于列表中的元素可以是不同类型的</p><pre class=" language-python"><code class="language-python">testList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span></code></pre><h3 id="1-2、打印列表"><a href="#1-2、打印列表" class="headerlink" title="1.2、打印列表"></a>1.2、打印列表</h3><p><strong>demo:</strong></p><pre class=" language-python"><code class="language-python">    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>结果：</strong></p><pre class=" language-python"><code class="language-python">    a2data    a2data1    a2data2</code></pre><h2 id="2、列表的循环"><a href="#2、列表的循环" class="headerlink" title="2、列表的循环"></a>2、列表的循环</h2><h3 id="2-1、-使用for循环"><a href="#2-1、-使用for循环" class="headerlink" title="2.1、 使用for循环"></a>2.1、 使用for循环</h3><blockquote><p>为了更有效率的输出列表的每个数据，可以使用循环来完成</p></blockquote><p><strong>demo:</strong></p><pre class=" language-python"><code class="language-python">    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> namesList<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><p><strong>结果:</strong></p><pre><code>    a2data    a2data1    a2data</code></pre><h3 id="2-2、-使用while循环"><a href="#2-2、-使用while循环" class="headerlink" title="2.2、 使用while循环"></a>2.2、 使用while循环</h3><p>为了更有效率的输出列表的每个数据，可以使用循环来完成</p><p><strong>demo:</strong></p><pre class=" language-python"><code class="language-python">    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>namesList<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span></code></pre><p><strong>结果:</strong></p><pre><code>    a2data    a2data1    a2data2</code></pre><h2 id="3、列表的常见操作"><a href="#3、列表的常见操作" class="headerlink" title="3、列表的常见操作"></a>3、列表的常见操作</h2><blockquote><p>列表中存放的数据是可以进行修改的，比如”增”、”删”、”改”、”查”</p></blockquote><h3 id="3-1、添加元素"><a href="#3-1、添加元素" class="headerlink" title="3.1、添加元素"></a>3.1、添加元素</h3><blockquote><p>(“增”append, extend, insert)</p></blockquote><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>通过append可以向列表添加元素</p><p><strong>demo:</strong></p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#定义变量A，默认有3个元素</span>    A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----添加之前，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提示、并添加元素</span>    temp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要添加的学生姓名:'</span><span class="token punctuation">)</span>    A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----添加之后，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span></code></pre><h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><p>通过extend可以将另一个集合中的元素逐一添加到列表中</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>insert(index, object) 在指定位置index前插入元素object</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre><h3 id="3-2、修改元素"><a href="#3-2、修改元素" class="headerlink" title="3.2、修改元素"></a>3.2、修改元素</h3><p>(“改”)：修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改</p><p><strong>demo:</strong></p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#定义变量A，默认有3个元素</span>    A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----修改之前，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#修改元素</span>    A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a2data666'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----修改之后，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span></code></pre><p>结果:</p><pre><code>    -----修改之前，列表A的数据-----    a2data    a2data1    a2data2    -----修改之后，列表A的数据-----    a2data    a2data666    a2data2</code></pre><h3 id="3-3、查找元素"><a href="#3-3、查找元素" class="headerlink" title="3.3、查找元素"></a>3.3、查找元素</h3><blockquote><p>(“查”in, not in, index, count)</p></blockquote><p>所谓的查找，就是看看指定的元素是否存在</p><h4 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in, not in"></a>in, not in</h4><blockquote><p>python中查找的常用方法为：</p><ul><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ul></blockquote><p><strong>demo</strong></p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#待查找的列表</span>    nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#获取用户要查找的名字</span>    findName <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要查找的姓名:'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#查找是否存在</span>    <span class="token keyword">if</span> findName <span class="token keyword">in</span> nameList<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在字典中找到了相同的名字'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有找到'</span><span class="token punctuation">)</span></code></pre><p>说明：</p><blockquote><p>in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在</p></blockquote><h4 id="index-count"><a href="#index-count" class="headerlink" title="index, count"></a>index, count</h4><p>index和count与字符串中的用法相同</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意是左闭右开区间</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>ValueError<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token keyword">is</span> <span class="token operator">not</span> <span class="token keyword">in</span> list<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token number">0</span></code></pre><h3 id="3-4、删除元素"><a href="#3-4、删除元素" class="headerlink" title="3.4、删除元素"></a>3.4、删除元素</h3><blockquote><p>(“删”del, pop, remove)</p></blockquote><p>类比公号中，如果掉粉了，那么就应该把这个取关粉丝的姓名删除掉；在开发中经常会用到删除这种功能。</p><p>列表元素的常用删除方法有：</p><ul><li>del：根据下标进行删除</li><li>pop：删除最后一个元素</li><li>remove：根据元素的值进行删除</li></ul><p><strong>demo:(del)</strong></p><pre class=" language-python"><code class="language-python">    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">,</span><span class="token string">'a2data3'</span><span class="token punctuation">,</span><span class="token string">'a2data4'</span><span class="token punctuation">,</span><span class="token string">'a2data5'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之前------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token keyword">del</span> movieName<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之后------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span></code></pre><p><strong>结果:</strong></p><pre><code>    ------删除之前------    a2data    a2data1    a2data2    a2data3    a2data4    a2data5    ------删除之后------    a2data    a2data1    a2data3    a2data4    a2data5</code></pre><p><strong>demo:(pop)</strong></p><pre class=" language-python"><code class="language-python">    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">,</span><span class="token string">'a2data3'</span><span class="token punctuation">,</span><span class="token string">'a2data4'</span><span class="token punctuation">,</span><span class="token string">'a2data5'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之前------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    movieName<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之后------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span></code></pre><p><strong>结果:</strong></p><pre class=" language-python"><code class="language-python">    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>删除之前<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>    a2data    a2data1    a2data2    a2data3    a2data4    a2data5    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>删除之后<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>    a2data    a2data1    a2data2    a2data3    a2data4</code></pre><p><strong>demo:(remove)</strong></p><pre class=" language-python"><code class="language-python">    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a2data'</span><span class="token punctuation">,</span><span class="token string">'a2data1'</span><span class="token punctuation">,</span><span class="token string">'a2data2'</span><span class="token punctuation">,</span><span class="token string">'a2data3'</span><span class="token punctuation">,</span><span class="token string">'a2data4'</span><span class="token punctuation">,</span><span class="token string">'a2data5'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之前------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    movieName<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'a2data3'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之后------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span></code></pre><p><strong>结果:</strong></p><pre class=" language-python"><code class="language-python">    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>删除之前<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>    a2data    a2data1    a2data2    a2data3    a2data4    a2data5    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>删除之后<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>    a2data    a2data1    a2data2    a2data4    a2data5</code></pre><h3 id="3-5、排序"><a href="#3-5、排序" class="headerlink" title="3.5、排序"></a>3.5、排序</h3><p><strong>(sort, reverse)</strong></p><blockquote><p>sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。</p><p>reverse方法是将list逆置。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="4、列表的嵌套"><a href="#4、列表的嵌套" class="headerlink" title="4、列表的嵌套"></a>4、列表的嵌套</h2><h3 id="4-1-列表嵌套"><a href="#4-1-列表嵌套" class="headerlink" title="4.1 列表嵌套"></a>4.1 列表嵌套</h3><blockquote><p>类似while循环的嵌套，列表也是支持嵌套的</p><p>一个列表中的元素又是一个列表，那么这就是列表的嵌套</p></blockquote><pre class=" language-python"><code class="language-python">    schoolNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token string">'山西'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string">'湖南'</span><span class="token punctuation">,</span><span class="token string">'天津'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string">'长沙'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h3 id="4-2、-应用"><a href="#4-2、-应用" class="headerlink" title="4.2、 应用"></a>4.2、 应用</h3><blockquote><p>一个公号，有5个长期运营，现在要分配其中3个位置，但是有8位运营者等待分配，请编写程序，完成随机的分配</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 定义 一个运营管理者的列表</span>offices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义一个列表用来存储8位运营者的名字</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        offices<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> tempNames <span class="token keyword">in</span> offices<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'运营%d的人数为:%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>len<span class="token punctuation">(</span>tempNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> tempNames<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token operator">%</span>name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的字符串</title>
      <link href="/posts/29055.html"/>
      <url>/posts/29055.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211073327.png" alt="Python字符串"></p><h1 id="Python的字符串"><a href="#Python的字符串" class="headerlink" title="Python的字符串"></a>Python的字符串</h1><h2 id="1、字符串介绍"><a href="#1、字符串介绍" class="headerlink" title="1、字符串介绍"></a>1、字符串介绍</h2><ul><li><p>想一想：</p><blockquote><p>当打来浏览器登录某些网站的时候，需要输入密码，浏览器把密码传送到服务器后，服务器会对密码进行验证，其验证过程是把之前保存的密码与本次传递过去的密码进行对比，如果相等，那么就认为密码正确，否则就认为不对；服务器既然想要存储这些密码可以用数据库（比如MySQL），当然为了简单起见，咱们可以先找个变量把密码存储起来即可；那么怎样存储带有字母的密码呢？</p></blockquote></li><li><p>答：</p><blockquote><p>字符串</p></blockquote></li></ul><p><strong>python中字符串的格式</strong></p><p>如下定义的变量a，存储的是数字类型的值</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span></code></pre><p>如下定义的变量b，存储的是字符串类型的值</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> <span class="token string">"hello a2data.cn"</span>或者b <span class="token operator">=</span> <span class="token string">'hello www.a2data.cn'</span></code></pre><p>小总结：</p><ul><li>双引号或者单引号中的数据，就是字符串</li></ul><h2 id="2、字符串输出"><a href="#2、字符串输出" class="headerlink" title="2、字符串输出"></a>2、字符串输出</h2><p><strong>demo</strong></p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'小风'</span>position <span class="token operator">=</span> <span class="token string">'大数据分析狮'</span>address <span class="token operator">=</span> <span class="token string">'北京市朝阳区xxxx'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名：%s"</span><span class="token operator">%</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"职位：%s"</span><span class="token operator">%</span>position<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"公司地址：%s"</span><span class="token operator">%</span>address<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------------------'</span><span class="token punctuation">)</span></code></pre><p><em>结果</em></p><pre><code>--------------------------------------------------    姓名： 小风    职位： 大数据分析狮    公司地址： 北京市朝阳区xxxx--------------------------------------------------</code></pre><h2 id="3、字符串输入"><a href="#3、字符串输入" class="headerlink" title="3、字符串输入"></a>3、字符串输入</h2><blockquote><p>在input的时候，通过它能够完成从键盘获取数据，然后保存到指定的变量中；</p><p>注意：input获取的数据，都以字符串的方式进行保存，即使输入的是数字，那么也是以字符串方式保存</p></blockquote><p><strong>demo</strong></p><pre class=" language-python"><code class="language-python">    userName <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入用户名:'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"用户名为：%s"</span><span class="token operator">%</span>userName<span class="token punctuation">)</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入密码:'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码为：%s"</span><span class="token operator">%</span>password<span class="token punctuation">)</span></code></pre><h2 id="4、下标和切片"><a href="#4、下标和切片" class="headerlink" title="4、下标和切片"></a>4、下标和切片</h2><h3 id="4-1、下标索引"><a href="#4-1、下标索引" class="headerlink" title="4.1、下标索引"></a>4.1、下标索引</h3><blockquote><p>字符串中”下标”的使用</p><p><strong>列表与元组支持下标索引好理解，字符串实际上就是字符的数组，</strong></p><p><strong>所以也支持下标索引。</strong></p><p>如果有字符串:<code>name = 'abcdef'</code>，在内存中的实际存储如下:</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211074509.png" alt="下标索引"></p><p>如果想取出部分字符，那么可以通过<code>下标</code>的方法，（注意python中下标从 0 开始）</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211075204.png" alt="如图"></p><h3 id="4-2、切片"><a href="#4-2、切片" class="headerlink" title="4.2、切片"></a>4.2、切片</h3><blockquote><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h4 id="切片的语法：-起始-结束-步长"><a href="#切片的语法：-起始-结束-步长" class="headerlink" title="切片的语法：[起始:结束:步长]"></a>切片的语法：[起始:结束:步长]</h4><p><strong>注意：选取的区间属于左闭右开型，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)。</strong></p><p>我们以字符串为例讲解。</p><p>如果取出一部分，则可以在<code>中括号[]</code>中使用 <strong>:</strong></p></blockquote><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取 下标0~2 的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取 下标为0~4 的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取 下标为3、4 的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取 下标为2开始到最后的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取 下标为1开始 到 最后第2个  之间的字符</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211075831.png" alt="如图"></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"abcdef"</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token string">'abc'</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token string">'ace'</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token string">''</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token string">'bd'</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token string">'fdb'</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token string">'fd'</span></code></pre><p><strong>想一想</strong></p><ul><li>（面试题）给定一个字符串aStr, 请反转字符串</li></ul><blockquote><p>例如： ‘<a href="http://www.a2data.cn'">www.a2data.cn'</a> </p></blockquote><h2 id="5、字符串常见操作"><a href="#5、字符串常见操作" class="headerlink" title="5、字符串常见操作"></a>5、字符串常见操作</h2><blockquote><p>如有字符串<code>mystr = 'hello world a2data and jackfeng'</code>，以下是常见的操作</p></blockquote><h3 id="5-1、find"><a href="#5-1、find" class="headerlink" title="5.1、find"></a>5.1、find</h3><blockquote><p>检测 str 是否包含在 mystr中，如果是返回开始的索引值，否则返回-1</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span>len<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span>mystr <span class="token operator">=</span> <span class="token string">'hello world a2data and jackfeng'</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211080637.png" alt="Find"></p><h3 id="5-2、index"><a href="#5-2、index" class="headerlink" title="5.2、index"></a>5.2、index</h3><blockquote><p>跟find()方法一样，只不过如果str不在 mystr中会报一个异常.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span>str<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span>len<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span> mystr <span class="token operator">=</span> <span class="token string">'hello world a2data and jackfeng'</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211080919.png" alt="Index"></p><h3 id="5-3、count"><a href="#5-3、count" class="headerlink" title="5.3、count"></a>5.3、count</h3><blockquote><p>返回 str在start和end之间 在 mystr里面出现的次数</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span>str<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span>len<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span>mystr <span class="token operator">=</span> <span class="token string">'hello world a2data and jackfeng'</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211081139.png" alt="Count"></p><h3 id="5-4、replace"><a href="#5-4、replace" class="headerlink" title="5.4、replace"></a>5.4、replace</h3><blockquote><p>把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span>  mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>name <span class="token operator">=</span><span class="token string">"hello world ha ha"</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211081609.png" alt="Replace"></p><h3 id="5-5、split"><a href="#5-5、split" class="headerlink" title="5.5、split"></a>5.5、split</h3><blockquote><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span>str<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  name <span class="token operator">=</span><span class="token string">"hello world ha ha"</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211081917.png" alt="Split"></p><h3 id="5-6、capitalize"><a href="#5-6、capitalize" class="headerlink" title="5.6、capitalize"></a>5.6、capitalize</h3><blockquote><p>把字符串的第一个字符大写</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211082148.png" alt="Capitalize"></p><h3 id="5-7、title"><a href="#5-7、title" class="headerlink" title="5.7、title"></a>5.7、title</h3><blockquote><p>把字符串的每个单词首字母大写</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211082321.png" alt="Title"></p><h3 id="5-8、startswith"><a href="#5-8、startswith" class="headerlink" title="5.8、startswith"></a>5.8、startswith</h3><blockquote><p>检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211082515.png" alt="Startswith"></p><h3 id="5-9、endswith"><a href="#5-9、endswith" class="headerlink" title="5.9、endswith"></a>5.9、endswith</h3><blockquote><p>检查字符串是否以obj结束，如果是返回True,否则返回 False.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211082741.png" alt="endswith"></p><h3 id="5-10、lower"><a href="#5-10、lower" class="headerlink" title="5.10、lower"></a>5.10、lower</h3><blockquote><p>转换 mystr 中所有大写字符为小写</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>     </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084145.png" alt="lower"></p><h3 id="5-11、upper"><a href="#5-11、upper" class="headerlink" title="5.11、upper"></a>5.11、upper</h3><blockquote><p>转换 mystr 中的小写字母为大写</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084249.png" alt=""></p><h3 id="5-12、ljust"><a href="#5-12、ljust" class="headerlink" title="5.12、ljust"></a>5.12、ljust</h3><blockquote><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>width<span class="token punctuation">)</span> </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084406.png" alt=""></p><h3 id="5-13、rjust"><a href="#5-13、rjust" class="headerlink" title="5.13、rjust"></a>5.13、rjust</h3><blockquote><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>width<span class="token punctuation">)</span>    </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084420.png" alt=""></p><h3 id="5-14、center"><a href="#5-14、center" class="headerlink" title="5.14、center"></a>5.14、center</h3><blockquote><p>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>center<span class="token punctuation">(</span>width<span class="token punctuation">)</span>   </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084445.png" alt=""></p><h3 id="5-15、lstrip"><a href="#5-15、lstrip" class="headerlink" title="5.15、lstrip"></a>5.15、lstrip</h3><blockquote><p>删除 mystr 左边的空白字符</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084547.png" alt=""></p><h3 id="5-16、rstrip"><a href="#5-16、rstrip" class="headerlink" title="5.16、rstrip"></a>5.16、rstrip</h3><blockquote><p>删除 mystr 字符串末尾的空白字符</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084620.png" alt=""></p><h3 id="5-17、strip"><a href="#5-17、strip" class="headerlink" title="5.17、strip"></a>5.17、strip</h3><blockquote><p>删除mystr字符串两端的空白字符</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084704.png" alt=""></p><h3 id="5-18、rfind"><a href="#5-18、rfind" class="headerlink" title="5.18、rfind"></a>5.18、rfind</h3><blockquote><p>类似于 find()函数，不过是从右边开始查找.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span>str<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">=</span>len<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span> <span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084802.png" alt=""></p><h3 id="5-19、rindex"><a href="#5-19、rindex" class="headerlink" title="5.19、rindex"></a>5.19、rindex</h3><blockquote><p>类似于 index()，不过是从右边开始.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span> str<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">=</span>len<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211084906.png" alt=""></p><h3 id="5-20、partition"><a href="#5-20、partition" class="headerlink" title="5.20、partition"></a>5.20、partition</h3><blockquote><p>把mystr以str分割成三部分,str前，str和str后</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085003.png" alt=""></p><h3 id="5-21、rpartition"><a href="#5-21、rpartition" class="headerlink" title="5.21、rpartition"></a>5.21、rpartition</h3><blockquote><p>类似于 partition()函数,不过是从右边开始.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085041.png" alt=""></p><h3 id="5-22、splitlines"><a href="#5-22、splitlines" class="headerlink" title="5.22、splitlines"></a>5.22、splitlines</h3><blockquote><p>按照行分隔，返回一个包含各行作为元素的列表</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085356.png" alt=""></p><h3 id="5-23、isalpha"><a href="#5-23、isalpha" class="headerlink" title="5.23、isalpha"></a>5.23、isalpha</h3><blockquote><p>如果 mystr 所有字符都是字母 则返回 True,否则返回 False</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085450.png" alt=""></p><h3 id="5-24、isdigit"><a href="#5-24、isdigit" class="headerlink" title="5.24、isdigit"></a>5.24、isdigit</h3><blockquote><p>如果 mystr 只包含数字则返回 True 否则返回 False.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085529.png" alt=""></p><h3 id="5-25、isalnum"><a href="#5-25、isalnum" class="headerlink" title="5.25、isalnum"></a>5.25、isalnum</h3><blockquote><p>如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085656.png" alt=""></p><h3 id="5-26、isspace"><a href="#5-26、isspace" class="headerlink" title="5.26、isspace"></a>5.26、isspace</h3><blockquote><p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211085806.png" alt=""></p><h3 id="5-27、join"><a href="#5-27、join" class="headerlink" title="5.27、join"></a>5.27、join</h3><blockquote><p>mystr 中每个字符后面插入str,构造出一个新的字符串</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>join<span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211090020.png" alt=""></p><p><strong>想一想</strong></p><ul><li>（面试题）给定一个字符串aStr，返回使用空格或者’\t’分割后的倒数第二个子串</li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191211083910.png" alt="面试题"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python第二天作业答案</title>
      <link href="/posts/27081.html"/>
      <url>/posts/27081.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python第二天作业"><a href="#Python第二天作业" class="headerlink" title="Python第二天作业"></a>Python第二天作业</h1><blockquote><p>第二天学习链接：</p><p><a href="https://www.a2data.cn/posts/51417.html">https://www.a2data.cn/posts/51417.html</a></p></blockquote><h2 id="1-2、练一练"><a href="#1-2、练一练" class="headerlink" title="1.2、练一练"></a>1.2、练一练</h2><pre class=" language-python"><code class="language-python">length <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入刀具的长度（cm):'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以上火车回家咯'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'携带超过规定的管制刀具，不允许上火车'</span><span class="token punctuation">)</span></code></pre><h2 id="3-3、练一练"><a href="#3-3、练一练" class="headerlink" title="3.3、练一练"></a>3.3、练一练</h2><pre class=" language-python"><code class="language-python">restMoney <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入当前公交卡的余额（元）：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> restMoney <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以上公交车'</span><span class="token punctuation">)</span>    restSeats <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入公交车上空座位数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> restSeats <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以坐公交车回家咯'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'只能站着回家，好辛苦'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'坏了，卡里钱不够，赶紧用手机充一下卡'</span><span class="token punctuation">)</span></code></pre><h2 id="9-3、打印：九九乘法表"><a href="#9-3、打印：九九乘法表" class="headerlink" title="9.3、打印：九九乘法表"></a>9.3、打印：九九乘法表</h2><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token operator">and</span> i <span class="token operator">>=</span> j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span>i<span class="token operator">*</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'  '</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#九九乘法表</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%-2d "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="11-1、必做题："><a href="#11-1、必做题：" class="headerlink" title="11.1、必做题："></a>11.1、必做题：</h2><pre class=" language-python"><code class="language-python">userName <span class="token operator">=</span> <span class="token string">'li'</span>passWord <span class="token operator">=</span> <span class="token string">'1501127'</span>user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入用户名：'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> user <span class="token operator">==</span> userName<span class="token punctuation">:</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> passWord<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎进入%s的世界"</span><span class="token operator">%</span> userName<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误'</span><span class="token punctuation">)</span></code></pre><h3 id="使用while，完成以下图形的输出"><a href="#使用while，完成以下图形的输出" class="headerlink" title="使用while，完成以下图形的输出"></a>使用while，完成以下图形的输出</h3><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span>j <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">while</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"* "</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"* "</span> <span class="token operator">*</span> j<span class="token punctuation">)</span>    j <span class="token operator">-=</span> <span class="token number">1</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="11-2、选做题："><a href="#11-2、选做题：" class="headerlink" title="11.2、选做题："></a>11.2、选做题：</h2><pre class=" language-python"><code class="language-python">totalTimes <span class="token operator">=</span> <span class="token number">40</span>kmile <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入单次上班的里程（km):'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>total <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> kmile <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token operator">and</span> kmile <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    takeTimes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">3</span> <span class="token operator">+</span><span class="token number">1</span>    total <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">20</span><span class="token operator">-</span>takeTimes<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">0.8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每月乘坐地铁需要支出的总费用：%.2f 元'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span><span class="token keyword">elif</span> kmile <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token operator">and</span> kmile <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> totalTimes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">4</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">4</span><span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">150</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">0.5</span>        totalTimes <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每月乘坐地铁需要支出的总费用：%.2f 元'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span><span class="token keyword">elif</span> kmile <span class="token operator">&lt;=</span> <span class="token number">22</span> <span class="token operator">and</span> kmile <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> totalTimes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">5</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">0.8</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">0.5</span>        totalTimes <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每月乘坐地铁需要支出的总费用：%.2f 元'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span><span class="token keyword">elif</span> kmile <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token operator">and</span> kmile <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> totalTimes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">6</span>        <span class="token keyword">elif</span> total<span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">0.5</span>        totalTimes <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每月乘地铁需要支出的总费用：%.2f 元'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span><span class="token keyword">elif</span> kmile <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> <span class="token punctuation">(</span>kmile<span class="token number">-32</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">20</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">while</span> totalTimes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">6</span><span class="token operator">+</span>m        <span class="token keyword">elif</span> total<span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">+</span>m<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">and</span> total <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">+</span>m<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span>        <span class="token keyword">elif</span> total <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> <span class="token number">6</span><span class="token operator">+</span>m        totalTimes <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每月乘地铁需要支出的总费用：%.2f 元'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python判断和循环语句</title>
      <link href="/posts/51417.html"/>
      <url>/posts/51417.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191209085857.png" alt="Python判断与循环"></p><h1 id="Python判断循环语句"><a href="#Python判断循环语句" class="headerlink" title="Python判断循环语句"></a>Python判断循环语句</h1><h2 id="1、if-else"><a href="#1、if-else" class="headerlink" title="1、if-else"></a>1、if-else</h2><ul><li>掌握 if-else 的语法格式 </li></ul><blockquote><p>想一想：在使用if的时候，它只能做到满足条件时要做的事情。那万一需要在不满足条件的时候，做某些事，该怎么办呢？</p><p>答：else</p></blockquote><h3 id="1-1、使用格式"><a href="#1-1、使用格式" class="headerlink" title="1.1、使用格式"></a>1.1、使用格式</h3><blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    满足条件时要做的事情<span class="token number">1</span>    满足条件时要做的事情<span class="token number">2</span>    满足条件时要做的事情<span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    不满足条件时要做的事情<span class="token number">1</span>    不满足条件时要做的事情<span class="token number">2</span>    不满足条件时要做的事情<span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></blockquote><p><strong>demo</strong></p><p>马上要过年了，又到了抢票的季节。</p><pre class=" language-python"><code class="language-python">    chePiao <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 用1代表有车票，0代表没有车票</span>    <span class="token keyword">if</span> chePiao <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有车票，可以上火车"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"终于可以坐着回家了，美滋滋~~~"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有车票，不能上车"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可否上车补票啊，真是一票难求啊~~~~(>_&lt;)~~~~"</span><span class="token punctuation">)</span></code></pre><h3 id="1-2、练一练"><a href="#1-2、练一练" class="headerlink" title="1.2、练一练"></a>1.2、练一练</h3><blockquote><p>要求：从键盘输入刀子的长度，如果刀子长度没有超过10cm，则允许上火车，否则不允许上火车 </p></blockquote><h2 id="2、elif"><a href="#2、elif" class="headerlink" title="2、elif"></a>2、elif</h2><ul><li><p>想一想:</p><blockquote><p>if能完成当xxx时做事情</p><p>if-else能完成当xxx时做事情1，否则做事情2</p><p>如果有这样一种情况：</p><p>当xxx1时做事情1，</p><p>当xxx2时做事情2，</p><p>当xxx3时做事情3，</p><p>那该怎么实现呢？</p></blockquote></li><li><p>答:</p><blockquote><p>elif</p></blockquote></li></ul><h3 id="2-1、elif的功能"><a href="#2-1、elif的功能" class="headerlink" title="2.1、elif的功能"></a>2.1、elif的功能</h3><p><em>elif的使用格式如下</em></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">if</span> xxx1<span class="token punctuation">:</span>        事情<span class="token number">1</span>    <span class="token keyword">elif</span> xxx2<span class="token punctuation">:</span>        事情<span class="token number">2</span>    <span class="token keyword">elif</span> xxx3<span class="token punctuation">:</span>        事情<span class="token number">3</span></code></pre><p>说明:</p><ul><li>当xxx1满足时，执行事情1，然后整个if结束</li><li>当xxx1不满足时，那么判断xxx2，如果xxx2满足，则执行事情2，然后整个if结束</li><li>当xxx1不满足时，xxx2也不满足，如果xxx3满足，则执行事情3，然后整个if结束</li></ul><p><strong>demo</strong></p><pre class=" language-python"><code class="language-python">    score <span class="token operator">=</span> <span class="token number">77</span>    <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'本次考试，等级为A'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">and</span> score<span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'本次考试，等级为B'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">and</span> score<span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'本次考试，等级为C'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">and</span> score<span class="token operator">&lt;</span><span class="token number">70</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'本次考试，等级为D'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> score<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'本次考试，等级为E'</span><span class="token punctuation">)</span></code></pre><h3 id="2-2、注意点"><a href="#2-2、注意点" class="headerlink" title="2.2、注意点"></a>2.2、注意点</h3><ul><li><p>可以和else一起使用</p><pre class=" language-reStructuredText"><code class="language-reStructuredText">   if 性别为男性:       输出男性的特征       ...   elif 性别为女性:       输出女性的特征       ...   else:       第三种性别的特征       ...</code></pre><p>说明:</p><ul><li>当 “性别为男性” 满足时，执行 “输出男性的特征”的相关代码</li><li>当 “性别为男性” 不满足时，如果 “性别为女性”满足，则执行 “输出女性的特征”的相关代码</li><li>当 “性别为男性” 不满足，“性别为女性”也不满足，那么久默认执行else后面的代码，即 “第三种性别的特征”相关代码</li></ul></li><li><p>elif必须和if一起使用，否则出错</p></li></ul><h2 id="3、if嵌套"><a href="#3、if嵌套" class="headerlink" title="3、if嵌套"></a>3、if嵌套</h2><p>想一想：</p><blockquote><p>坐火车或者地铁的实际情况是：先进行安检如果安检通过才会判断是否有车票，或者是先检查是否有车票之后才会进行安检，即实际的情况某个判断是再另外一个判断成立的基础上进行的，这样的情况该怎样解决呢？</p></blockquote><p>答：</p><blockquote><p>if嵌套</p></blockquote><h3 id="3-1、嵌套格式"><a href="#3-1、嵌套格式" class="headerlink" title="3.1、嵌套格式"></a>3.1、嵌套格式</h3><pre class=" language-python"><code class="language-python">  <span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>        满足条件<span class="token number">1</span> 做的事情<span class="token number">1</span>        满足条件<span class="token number">1</span> 做的事情<span class="token number">2</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>            满足条件<span class="token number">2</span> 做的事情<span class="token number">1</span>            满足条件<span class="token number">2</span> 做的事情<span class="token number">2</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>说明<ul><li>外层的if判断，也可以是if-else</li><li>内层的if判断，也可以是if-else</li><li>根据实际开发的情况，进行选择</li></ul></li></ul><h3 id="3-2、嵌套应用"><a href="#3-2、嵌套应用" class="headerlink" title="3.2、嵌套应用"></a>3.2、嵌套应用</h3><p><strong>demo</strong></p><pre class=" language-python"><code class="language-python">    chePiao <span class="token operator">=</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># 用1代表有车票，0代表没有车票</span>    daoLenght <span class="token operator">=</span> <span class="token number">9</span>     <span class="token comment" spellcheck="true"># 刀子的长度，单位为cm</span>    <span class="token keyword">if</span> chePiao <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有车票，可以进站"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> daoLenght <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"通过安检"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"终于可以坐着回家了，美滋滋~~~"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有通过安检"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"刀子的长度超过规定，等待警察处理..."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有车票，不能进站"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不要方，真是一票难求啊~~~~(>_&lt;)~~~~"</span><span class="token punctuation">)</span></code></pre><p>结果1：chePiao = 1;daoLenght = 9</p><pre><code>    有车票，可以进站    通过安检    终于可以回家了，美滋滋~~~</code></pre><p>结果2：chePiao = 1;daoLenght = 20</p><pre><code>    有车票，可以进站    没有通过安检    刀子的长度超过规定，等待警察处理...</code></pre><p>结果3：chePiao = 0;daoLenght = 9</p><pre><code>    没有车票，不能进站    一票难求啊~~~~(&gt;_&lt;)~~~~</code></pre><p>结果4：chePiao = 0;daoLenght = 20</p><pre><code>    没有车票，不能进站    一票难求啊~~~~(&gt;_&lt;)~~~~</code></pre><blockquote><p> 想一想:为什么结果3和结果4相同？？？</p></blockquote><h3 id="3-3-、练一练"><a href="#3-3-、练一练" class="headerlink" title="3.3 、练一练"></a>3.3 、练一练</h3><blockquote><p>情节描述：上公交车，并且可以有座位坐下</p><p>要求：输入公交卡当前的余额，只要超过2元，就可以上公交车；如果空座位的数量大于0，就可以坐下</p></blockquote><h2 id="4、猜拳游戏"><a href="#4、猜拳游戏" class="headerlink" title="4、猜拳游戏"></a>4、猜拳游戏</h2><blockquote><p>应用，根据if语句相关知识，完善猜拳游戏</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191209081136.png" alt="ε=(´ο｀*))"></p><p><strong>优化参考代码</strong></p><blockquote><p>优化以下代码，解决只能玩一次的问题</p></blockquote><pre class=" language-python"><code class="language-python">    <span class="token keyword">import</span> random    player <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入：剪刀(0)  石头(1)  布(2):'</span><span class="token punctuation">)</span>    player <span class="token operator">=</span> int<span class="token punctuation">(</span>player<span class="token punctuation">)</span>    computer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用来进行测试</span>    <span class="token comment" spellcheck="true"># 感谢关注A2Data</span>    <span class="token comment" spellcheck="true">#print('player=%d,computer=%d',(player,computer))</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>computer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>player <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>computer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>computer <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获胜，哈哈，你太厉害了'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'平局，要不再来一局'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输了，不要走，洗洗手接着来，决战到天亮'</span><span class="token punctuation">)</span></code></pre><h2 id="5、循环语句"><a href="#5、循环语句" class="headerlink" title="5、循环语句"></a>5、循环语句</h2><blockquote><p>生活中的循环应用场景：</p><p><strong>跑道、风扇、空调左右上下摆风、地铁日常运行等</strong></p></blockquote><blockquote><p>开发中的循环场景。</p><p>某天，你惹你女朋友生气了，</p><p>需要跟她<em>诚恳</em>地道歉。</p></blockquote><pre class=" language-python"><code class="language-python">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"亲爱的，我错了"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"亲爱的，我错了"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"亲爱的，我错了"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>还有<span class="token number">99997</span>遍<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>使用循环语句呢？ 一句话搞定</li></ul><pre class=" language-python"><code class="language-python">    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"亲爱的，我错了"</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># i+=1 同等于 i= i+1 </span></code></pre><blockquote><p>使用场景：</p><ul><li>一般情况下，需要多次重复执行的代码，都可以用循环的方式来完成</li><li>循环不是必须要使用的，但是为了提高代码的重复使用率，所以有经验的开发者都会采用循环</li></ul></blockquote><h2 id="6、while循环"><a href="#6、while循环" class="headerlink" title="6、while循环"></a>6、while循环</h2><p><strong>格式</strong></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">while</span> 条件<span class="token punctuation">:</span>        条件满足时，做的事情<span class="token number">1</span>        条件满足时，做的事情<span class="token number">2</span>        条件满足时，做的事情<span class="token number">3</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>demo</strong></p><pre class=" language-python"><code class="language-python">    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前是第%d次执行循环"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i=%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span></code></pre><blockquote><p>结果</p></blockquote><pre><code>    当前是第1次执行循环    i=0    当前是第2次执行循环    i=1    当前是第3次执行循环    i=2    当前是第4次执行循环    i=3    当前是第5次执行循环    i=4</code></pre><h2 id="7、while循环应用"><a href="#7、while循环应用" class="headerlink" title="7、while循环应用"></a>7、while循环应用</h2><h3 id="7-1、计算1-100累积和"><a href="#7-1、计算1-100累积和" class="headerlink" title="7.1、计算1~100累积和"></a>7.1、计算1~100累积和</h3><ul><li>注意：包含 1 和 100</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># A2Data提供参考代码</span>i <span class="token operator">=</span> <span class="token number">1</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1~100的累积和为:%d"</span><span class="token operator">%</span>sum<span class="token punctuation">)</span></code></pre><h3 id="7-2-、计算1-100偶数累积和"><a href="#7-2-、计算1-100偶数累积和" class="headerlink" title="7.2 、计算1~100偶数累积和"></a>7.2 、计算1~100偶数累积和</h3><ul><li>注意： 同样包含1 和 100</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 欢迎关注A2Data 转发在看求支持哦</span>i <span class="token operator">=</span> <span class="token number">1</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> i    i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1~100的累积和为:%d"</span><span class="token operator">%</span>sum<span class="token punctuation">)</span></code></pre><h2 id="8、break和continue"><a href="#8、break和continue" class="headerlink" title="8、break和continue"></a>8、break和continue</h2><h3 id="8-1、break"><a href="#8-1、break" class="headerlink" title="8.1、break"></a>8.1、break</h3><h4 id="8-1-1、for循环"><a href="#8-1-1、for循环" class="headerlink" title="8.1.1、for循环"></a>8.1.1、for循环</h4><blockquote><p>for循环场景下的使用案例。</p><p>具体差别，自己动手输出看。</p></blockquote><p><strong>正常for循环</strong></p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'a2data'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><strong>带有break</strong></p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'a2data'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'d'</span><span class="token punctuation">:</span>         <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h4 id="8-1-2、while循环"><a href="#8-1-2、while循环" class="headerlink" title="8.1.2、while循环"></a>8.1.2、while循环</h4><blockquote><p>普通循环如下</p></blockquote><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><blockquote><p>带有‘break’循环</p></blockquote><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><ul><li>break的作用：用来结束整个循环 </li></ul><h3 id="8-2、continue"><a href="#8-2、continue" class="headerlink" title="8.2、continue"></a>8.2、continue</h3><h4 id="8-2-1、for循环"><a href="#8-2-1、for循环" class="headerlink" title="8.2.1、for循环"></a>8.2.1、for循环</h4><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'a2data'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'d'</span><span class="token punctuation">:</span>         <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h4 id="8-2-2、while循环"><a href="#8-2-2、while循环" class="headerlink" title="8.2.2、while循环"></a>8.2.2、while循环</h4><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p><strong>总结:</strong></p><ul><li>continue的作用：用来结束本次循环，紧接着执行下一次的循环</li></ul><h4 id="8-2-3、注意点"><a href="#8-2-3、注意点" class="headerlink" title="8.2.3、注意点"></a>8.2.3、注意点</h4><blockquote><ul><li>break/continue只能用在循环中，除此以外不能单独使用</li><li>break/continue在嵌套循环中，只对最近的一层循环起作用</li></ul></blockquote><h2 id="9、while循环嵌套"><a href="#9、while循环嵌套" class="headerlink" title="9、while循环嵌套"></a>9、while循环嵌套</h2><h3 id="9-1while嵌套格式"><a href="#9-1while嵌套格式" class="headerlink" title="9.1while嵌套格式"></a>9.1while嵌套格式</h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>        条件<span class="token number">1</span>满足时，做的事情<span class="token number">1</span>        条件<span class="token number">1</span>满足时，做的事情<span class="token number">2</span>        条件<span class="token number">1</span>满足时，做的事情<span class="token number">3</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>            条件<span class="token number">2</span>满足时，做的事情<span class="token number">1</span>            条件<span class="token number">2</span>满足时，做的事情<span class="token number">2</span>            条件<span class="token number">2</span>满足时，做的事情<span class="token number">3</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="9-2、练习打印如下图形"><a href="#9-2、练习打印如下图形" class="headerlink" title="9.2、练习打印如下图形"></a>9.2、练习打印如下图形</h3><pre class=" language-python"><code class="language-python">    <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span></code></pre><p><strong>参考代码</strong></p><pre class=" language-python"><code class="language-python">    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span></code></pre><h3 id="9-3、打印：九九乘法表"><a href="#9-3、打印：九九乘法表" class="headerlink" title="9.3、打印：九九乘法表"></a>9.3、打印：九九乘法表</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191209083921.png" alt="九九乘法表"></p><h2 id="10、for循环"><a href="#10、for循环" class="headerlink" title="10、for循环"></a>10、for循环</h2><ul><li>掌握 for 循环的语法格式</li><li>掌握 for-else 的执行过程</li></ul><blockquote><p>像while循环一样，for可以完成循环的功能。</p><p>在Python中 for循环可以遍历任何序列的项目，</p><p>如一个列表或者一个字符串等。</p><p>请跟着操作如下demo！</p></blockquote><p><strong>demo0</strong></p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'a2data'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><strong>demo1</strong></p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'hello1'</span> <span class="token comment" spellcheck="true"># 皮一下很开心</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'l'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span> <span class="token comment" spellcheck="true">#退出for循环</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"==for循环过程中，如果没有break则执行=="</span><span class="token punctuation">)</span></code></pre><p><strong>demo2</strong></p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#if x=='l':</span>    <span class="token comment" spellcheck="true">#    break #退出for循环</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"==for循环过程中，如果没有break则执行=="</span><span class="token punctuation">)</span></code></pre><h2 id="11、总结与练习"><a href="#11、总结与练习" class="headerlink" title="11、总结与练习"></a>11、总结与练习</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191209085033.png" alt="总结"></p><h3 id="11-1、必做题："><a href="#11-1、必做题：" class="headerlink" title="11.1、必做题："></a>11.1、必做题：</h3><p><strong>使用if，编写程序，实现以下功能</strong></p><ul><li>从键盘获取用户名、密码</li><li>如果用户名和密码都正确（预先设定一个用户名和密码），那么就显示“欢迎进入xxx的世界”，否则提示密码或者用户名错误</li></ul><p><strong>使用while，完成以下图形的输出</strong></p><pre><code>** ** * ** * * ** * * * ** * * ** * ** **</code></pre><h3 id="11-2、选做题："><a href="#11-2、选做题：" class="headerlink" title="11.2、选做题："></a>11.2、选做题：</h3><p>根据以下信息提示，计算出每月乘坐地铁支出的总费用</p><blockquote><p>提示信息（票价）：</p><ul><li>地铁6公里(含)内3元，公交车10公里(含)内2元，使用市政交通一卡通刷卡乘公交车普通卡5折，学生卡2.5折。</li></ul><p>　　一、城市公共电汽车价格调整为：10公里(含)内2元，10公里以上部分，每增加1元可乘坐5公里。使用市政交通一卡通刷卡乘坐城市公共电汽车，市域内路段给予普通卡5折，学生卡2.5折优惠;市域外路段维持现行折扣优惠不变。享受公交政策的郊区客运价格，由各区、县政府按照城市公共电汽车价格制定。</p><p>　　二、轨道交通价格调整为：6公里(含)内3元;6公里至12公里(含)4元;12公里至22公里(含)5元;22公里至32公里(含)6元;32公里以上部分，每增加1元可乘坐20公里。使用市政交通一卡通刷卡乘坐轨道交通，每自然月内每张卡支出累计满100元以后的乘次，价格给予8折优惠;满150元以后的乘次，价格给予5折优惠;支出累计达到400元以后的乘次，不再享受打折优惠。</p></blockquote><p><strong>要求</strong></p><p>假设每个月，你都需要上20天班，每次上班需要来回1次，即每天需要乘坐2次同样路线的地铁；每月月初第一次刷公交卡时，扣款5元；编写程序，请计算出你每月乘坐地铁需要的总费用</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python第一天作业答案</title>
      <link href="/posts/5010.html"/>
      <url>/posts/5010.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python第一天作业"><a href="#Python第一天作业" class="headerlink" title="Python第一天作业"></a>Python第一天作业</h1><blockquote><p>第一天学习链接：</p><p><a href="https://www.a2data.cn/posts/59977.html#toc-heading-43">https://www.a2data.cn/posts/59977.html#toc-heading-43</a></p></blockquote><p><strong>必做题</strong></p><h2 id="1、-变量的命名组成"><a href="#1、-变量的命名组成" class="headerlink" title="1、 变量的命名组成"></a>1、 变量的命名组成</h2><blockquote><p>  数字、字母、下划线，但是不能以数字开头</p></blockquote><h2 id="2、变量命名时的规则"><a href="#2、变量命名时的规则" class="headerlink" title="2、变量命名时的规则"></a>2、变量命名时的规则</h2><blockquote><p>1）变量名可以由数字，字母，下划线组成，但是不能以数字开头</p><p>2）Python中已经使用的关键字不允许开发者自己定义和关键字相同名字的标识符</p></blockquote><h2 id="3、驼峰法（大驼峰、小驼峰）"><a href="#3、驼峰法（大驼峰、小驼峰）" class="headerlink" title="3、驼峰法（大驼峰、小驼峰）"></a>3、驼峰法（大驼峰、小驼峰）</h2><blockquote><p>当变量是由两个或者多个单词组成的时候，可以利用驼峰命名法来命名：</p><p> ①小驼峰命名法：</p><p>第一个单词以小写字母开始，后续单词的首字母大写</p><p>例如：firstName、lastName</p><p>②大驼峰命名法：</p><p>每个单词的首字母都大写</p><p>例如：FirstName、LastName、CamelCase</p></blockquote><h2 id="4、编写程序，完成以下要求："><a href="#4、编写程序，完成以下要求：" class="headerlink" title="4、编写程序，完成以下要求："></a>4、编写程序，完成以下要求：</h2><blockquote><p>提示用户进行输入数据</p><p>获取用户的数据数据（需要获取2个）</p><p>对获取的两个数字进行求和运行，并输出相应的结果</p></blockquote><pre class=" language-python"><code class="language-python">egg <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入够买鸡蛋的金额："</span><span class="token punctuation">)</span>bun <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入够买包子的金额："</span><span class="token punctuation">)</span>milk <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入够买豆浆的金额："</span><span class="token punctuation">)</span>breakfast <span class="token operator">=</span> egg <span class="token operator">+</span> bun <span class="token operator">+</span> milk<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您的早餐费用共计为"</span><span class="token punctuation">,</span>breakfast<span class="token punctuation">,</span><span class="token string">"元！"</span><span class="token punctuation">)</span>egg <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入够买鸡蛋的金额："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bun <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入够买包子的金额："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>milk <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入够买豆浆的金额："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>breakfast <span class="token operator">=</span> egg <span class="token operator">+</span> bun <span class="token operator">+</span> milk<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您的早餐费用共计为"</span><span class="token punctuation">,</span>breakfast<span class="token punctuation">,</span><span class="token string">"元！"</span><span class="token punctuation">)</span></code></pre><h2 id="5、编写程序，完成以下要求"><a href="#5、编写程序，完成以下要求" class="headerlink" title="5、编写程序，完成以下要求"></a>5、编写程序，完成以下要求</h2><blockquote><p> 提示用户进行输入数据</p><p> 获取用户的数据数据（需要获取2个）</p><p> 对获取的两个数字进行减法运行，并输出相应的结果</p></blockquote><pre class=" language-python"><code class="language-python">totalwork <span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'今天小风布置作业题数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>finislwork <span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'已经完成作业题数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>restwork <span class="token operator">=</span>  totalwork <span class="token operator">-</span>finislwork<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'还需要完成%d 道就完成作业了'</span> <span class="token operator">%</span> restwork<span class="token punctuation">)</span></code></pre><h2 id="6、编写身份认证系统"><a href="#6、编写身份认证系统" class="headerlink" title="6、编写身份认证系统"></a>6、编写身份认证系统</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎进入身份证认证系统V1.0 "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.登陆"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.退出"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3.认证"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4.修改密码"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">21</span><span class="token punctuation">)</span></code></pre><h2 id="7、编写程序，从键盘获取一个人的信息，然后输出"><a href="#7、编写程序，从键盘获取一个人的信息，然后输出" class="headerlink" title="7、编写程序，从键盘获取一个人的信息，然后输出"></a>7、编写程序，从键盘获取一个人的信息，然后输出</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">21</span><span class="token punctuation">)</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token punctuation">)</span>qq <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'QQ:'</span><span class="token punctuation">)</span>tel <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'手机号:'</span><span class="token punctuation">)</span>adress <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'公司地址:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">21</span><span class="token punctuation">)</span></code></pre><h2 id="8、编写程序-判断用户名密码"><a href="#8、编写程序-判断用户名密码" class="headerlink" title="8、编写程序,判断用户名密码"></a>8、编写程序,判断用户名密码</h2><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'你的姓名：'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'登陆密码：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'亲爱的%s,欢迎登陆A2Data学习管理系统'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span></code></pre><p><strong>文中习题</strong></p><h2 id="12-2-练一练"><a href="#12-2-练一练" class="headerlink" title="12.2 练一练"></a>12.2 练一练</h2><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'哥，已成年，网吧可以去了'</span><span class="token punctuation">)</span></code></pre><h2 id="12-3-想一想"><a href="#12-3-想一想" class="headerlink" title="12.3 想一想"></a>12.3 想一想</h2><blockquote><p> 判断age大于或者等于18岁，使用的是 &gt;=，还有哪些呢？ </p></blockquote><pre class=" language-python"><code class="language-python">age <span class="token operator">></span> <span class="token number">18</span> <span class="token operator">or</span> age <span class="token operator">=</span><span class="token number">18</span> </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识</title>
      <link href="/posts/59977.html"/>
      <url>/posts/59977.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/py_1.png" alt="Python基础"></p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><blockquote><p>为什么那么多培训机构？那么多的程序员呢？</p><p>很简单啊。 因为 <code>门槛低啊</code>。 ==.</p><p>不信？来动手试试吧。</p></blockquote><h2 id="1、操作系统-科普一下"><a href="#1、操作系统-科普一下" class="headerlink" title="1、操作系统(科普一下)"></a>1、操作系统(科普一下)</h2><p><strong>目标</strong></p><ul><li>了解操作系统及应用</li></ul><blockquote><p>操作系统接口示意图</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191205231734.png" alt="正常流程"></p><blockquote><p>那么没有安装操作系统的计算机, 那就是<strong>裸机</strong> </p></blockquote><h2 id="2、Python优缺点"><a href="#2、Python优缺点" class="headerlink" title="2、Python优缺点"></a>2、Python优缺点</h2><ul><li>时势造英雄  人生苦短，我用python </li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191205233547.png" alt="Windows 3.0"></p><p><strong>Python可以做什么呢？</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206003910.png" alt="Python"></p><h2 id="3、Python的第一个程序"><a href="#3、Python的第一个程序" class="headerlink" title="3、Python的第一个程序"></a>3、Python的第一个程序</h2><blockquote><p>上篇已经说过一些，但是竟然有人问我<code>如何创建！</code>！</p><p>此处以  <em>jupyter</em> 为例吧。</p><p>果真是炒鸡小白。</p></blockquote><p>1、运行服务，进入web页面</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206003758.png" alt="jupyter"></p><p>2、进入你的工作目录</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206004401.png" alt="具体相关操作如下"></p><p>3、成功输出你的第一行代码</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204224614.png" alt="Hello"></p><h2 id="4、注释"><a href="#4、注释" class="headerlink" title="4、注释"></a>4、注释</h2><h3 id="4-1、注释引入"><a href="#4-1、注释引入" class="headerlink" title="4.1、注释引入"></a>4.1、注释引入</h3><h4 id="1、未使用注释"><a href="#1、未使用注释" class="headerlink" title="1、未使用注释"></a>1、未使用注释</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206004820.png" alt="未注释"></p><h4 id="2、使用注释"><a href="#2、使用注释" class="headerlink" title="2、使用注释"></a>2、使用注释</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206005029.png" alt="注释"></p><h4 id="3、注释的作用"><a href="#3、注释的作用" class="headerlink" title="3、注释的作用"></a>3、注释的作用</h4><blockquote><p>通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性 </p></blockquote><h3 id="4-2、注释分类"><a href="#4-2、注释分类" class="headerlink" title="4.2、注释分类"></a>4.2、注释分类</h3><h4 id="1、-lt-单行注释-gt"><a href="#1、-lt-单行注释-gt" class="headerlink" title="1、<单行注释>"></a>1、&lt;单行注释&gt;</h4><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># 我是注释，可以在里写一些功能说明之类的哦</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></code></pre><h4 id="2、-lt-多行注释-gt"><a href="#2、-lt-多行注释-gt" class="headerlink" title="2、<多行注释>"></a>2、&lt;多行注释&gt;</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206005951.png" alt="自行练习哦"></p><h4 id="3、-lt-注意-gt"><a href="#3、-lt-注意-gt" class="headerlink" title="3、<注意>"></a>3、&lt;注意&gt;</h4><blockquote><p> 在python的语法规范中推荐使用的方式： </p><p>（早期版本，不写的话，``print(‘努力赚钱的小风’) `就会报错哦）</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span></code></pre><h2 id="5、变量以及类型"><a href="#5、变量以及类型" class="headerlink" title="5、变量以及类型"></a>5、变量以及类型</h2><p><strong>目标</strong></p><ul><li>掌握变量的定义和修改</li><li>了解变量有哪些类型和查看方式</li></ul><h3 id="5-1、-lt-变量的定义-gt"><a href="#5-1、-lt-变量的定义-gt" class="headerlink" title="5.1、<变量的定义>"></a>5.1、&lt;变量的定义&gt;</h3><blockquote><p>A：简单来讲就是，在程序中，我们需要对2个数据进行求和，那么该怎么做呢？</p><p>B：类比现实生活中，比如你去买早餐，一个鸡蛋，一个茄子包子等，你需要算你共花了多少钱。</p><p><em>所以，对于Python而言，存储一个数据，就需要一个<code>变量</code></em></p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206075351.png" alt="您的早餐已送达"></p><ul><li>程序就是用来处理数据，而变量就是用来存储数据的。</li></ul><p><code>*思考：我们应该让变量占用多大空间，保存什么样的数据？*</code></p><h3 id="5-2、-lt-变量的类型-gt"><a href="#5-2、-lt-变量的类型-gt" class="headerlink" title="5.2、<变量的类型>"></a>5.2、&lt;变量的类型&gt;</h3><p>生活中类型的例子(拿车来举例吧)：</p><blockquote><p>挖掘机、轿车、跑车、公交车</p><p>（类型，大小，价格都不同）</p></blockquote><p>程序中：</p><p><strong>充分利用空间，有效管理内存</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206080650.png" alt="类型分类图"></p><p>那么问题来了，如何知道一个变量的类型呢？</p><ul><li>Python中，只要定义了变量，且它有数据，那么它的类型就确定了。不用去说明它的类型，系统会自动辨别。</li><li>type(变量名称)—- 查看变量类型</li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206081804.png" alt="比较"></p><h2 id="6、标示符和关键字"><a href="#6、标示符和关键字" class="headerlink" title="6、标示符和关键字"></a>6、标示符和关键字</h2><h3 id="6-1、标示符"><a href="#6-1、标示符" class="headerlink" title="6.1、标示符"></a>6.1、标示符</h3><blockquote><p>开发人员在程序中自定义的一些符号和名称</p><p>标示符是自己定义的,如变量名 、函数名等</p></blockquote><h3 id="6-2、标示符的规则"><a href="#6-2、标示符的规则" class="headerlink" title="6.2、标示符的规则"></a>6.2、标示符的规则</h3><blockquote><p> 标示符由字母、下划线和数字组成，且数字不能开头 </p><p> 找一找:（如下，哪些是对的，哪些是错的？）</p></blockquote><pre class=" language-python"><code class="language-python">fromNo12<span class="token keyword">from</span><span class="token comment" spellcheck="true">#12</span>my_Booleanmy<span class="token operator">-</span>BooleanObj22ndObjmyInttest1Mike2jackMy_tExt_testtest!<span class="token number">32</span>haha<span class="token punctuation">(</span>da<span class="token punctuation">)</span>ttintjack_rosejack<span class="token operator">&amp;</span>roseGUIG<span class="token punctuation">.</span>U<span class="token punctuation">.</span>Ia2data</code></pre><p> <strong>python中的标识符是区分大小写的</strong></p><p> <img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206082419.png" alt="不相等的"></p><h3 id="6-3、命名规则"><a href="#6-3、命名规则" class="headerlink" title="6.3、命名规则"></a>6.3、命名规则</h3><ul><li><p>见名知意 </p></li><li><p>驼峰命名 </p></li><li><p>下划线链接</p></li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206083051.png" alt="驼峰命名"></p><h3 id="6-4、关键字"><a href="#6-4、关键字" class="headerlink" title="6.4、关键字"></a>6.4、关键字</h3><blockquote><p>python一些具有特殊功能的标示符，这就是所谓的关键字 </p><p>关键字，是python已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标示符 </p></blockquote><p><em>查看关键字</em></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206083430.png" alt="关键字"></p><h2 id="7、输出"><a href="#7、输出" class="headerlink" title="7、输出"></a>7、输出</h2><h3 id="7-1、普通输出"><a href="#7-1、普通输出" class="headerlink" title="7.1、普通输出"></a>7.1、普通输出</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印提示</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span></code></pre><h3 id="7-1、格式化输出"><a href="#7-1、格式化输出" class="headerlink" title="7.1、格式化输出"></a>7.1、格式化输出</h3><h4 id="7-1-1、格式化的目的"><a href="#7-1-1、格式化的目的" class="headerlink" title="7.1.1、格式化的目的"></a>7.1.1、格式化的目的</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小风今年10岁'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小风今年18岁'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小风今年20岁'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 思考，年龄多次使用，如何简化 -- 字符串可视化</span></code></pre><h4 id="7-1-2、格式化"><a href="#7-1-2、格式化" class="headerlink" title="7.1.2、格式化"></a>7.1.2、格式化</h4><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206084128.png" alt="格式化输出"></p><h4 id="7-1-3、换行输出"><a href="#7-1-3、换行输出" class="headerlink" title="7.1.3、换行输出"></a>7.1.3、换行输出</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在输出的时候，如果有\n那么，此时\n后的内容会在另外一行显示</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1234567890-------"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 会在一行显示</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1234567890\n-------"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 一行显示1234567890，另外一行显示-------</span></code></pre><h4 id="7-1-4、Python2-3输出区别"><a href="#7-1-4、Python2-3输出区别" class="headerlink" title="7.1.4、Python2-3输出区别"></a>7.1.4、Python2-3输出区别</h4><blockquote><p>Python3 使用 print 必须要以小括号包裹打印内容，比如 <code>print('hi')</code></p><p>Python2 既可以使用带小括号的方式，也可以使用一个空格来分隔打印内容，比如 <code>print 'hi'</code></p><p><strong>现在都是以python3为主</strong></p></blockquote><h4 id="7-1-5、动手试试吧"><a href="#7-1-5、动手试试吧" class="headerlink" title="7.1.5、动手试试吧"></a>7.1.5、动手试试吧</h4><blockquote><p>编码完成一下名片的显示：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>姓名<span class="token punctuation">:</span> 努力赚钱的小风    QQ<span class="token punctuation">:</span>xxxxxxx手机号<span class="token punctuation">:</span>185xxxxxx公司地址<span class="token punctuation">:</span>北京市xxxx<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token comment" spellcheck="true">#思考，如何格式化输出？换行？</span></code></pre><h2 id="8、输入"><a href="#8、输入" class="headerlink" title="8、输入"></a>8、输入</h2><blockquote><p>这里简单说一下，Python2中的输入是 raw_input()函数 </p><p>而在Python3中只有input()</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191206084931.png" alt="input输入"></p><h2 id="9、运算符"><a href="#9、运算符" class="headerlink" title="9、运算符"></a>9、运算符</h2><ul><li>算术运算符<ul><li>运算优先级</li></ul></li><li>赋值运算符</li><li>复合赋值运算符</li></ul><h3 id="9-1、算术运算符"><a href="#9-1、算术运算符" class="headerlink" title="9.1、算术运算符"></a>9.1、算术运算符</h3><p>下面以a=10 ,b=20为例进行计算</p><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="center">加</td><td>两个对象相加 a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="center">减</td><td>得到负数或是一个数减去另一个数 a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="center">乘</td><td>两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td></tr><tr><td align="left">/</td><td align="center">除</td><td>x除以y b / a 输出结果 2</td></tr><tr><td align="left">%</td><td align="center">取余</td><td>返回除法的余数 b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="center">幂</td><td>返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td align="left">//</td><td align="center">取整除</td><td>返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token number">4.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">9</span> <span class="token operator">//</span> <span class="token number">2.0</span><span class="token number">4.0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token number">9</span></code></pre><h3 id="9-2、赋值运算符"><a href="#9-2、赋值运算符" class="headerlink" title="9.2、赋值运算符"></a>9.2、赋值运算符</h3><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="center">赋值运算符</td><td>把=号右边的结果给左边的变量 num=1+2*3 结果num的值为7</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token number">2</span></code></pre><h3 id="9-3、复合赋值运算符"><a href="#9-3、复合赋值运算符" class="headerlink" title="9.3、复合赋值运算符"></a>9.3、复合赋值运算符</h3><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">+=</td><td align="center">加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="center">减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="center">乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="center">除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="center">取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="center">幂赋值运算符</td><td>c ** = a 等效于 c = c ** a</td></tr><tr><td align="left">//=</td><td align="center">取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h2 id="10、数据类型转化"><a href="#10、数据类型转化" class="headerlink" title="10、数据类型转化"></a>10、数据类型转化</h2><ul><li>了解类型转换的作用</li><li>掌握常用的类型转换</li></ul><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x [,base ])</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">long(x [,base ])</td><td align="center">将x转换为一个长整数</td></tr><tr><td align="center">float(x )</td><td align="center">将x转换到一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数</td></tr><tr><td align="center">str(x )</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">eval(str )</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">tuple(s )</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">list(s )</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个字符</td></tr><tr><td align="center">unichr(x )</td><td align="center">将一个整数转换为Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr></tbody></table><p><strong>举例</strong></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'100'</span> <span class="token comment" spellcheck="true"># 此时a的类型是一个字符串，里面存放了100这3个字符</span>b <span class="token operator">=</span> int<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 此时b的类型是整型，里面存放的是数字100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a=%d"</span><span class="token operator">%</span>b<span class="token punctuation">)</span></code></pre><h2 id="11、判断语句介绍"><a href="#11、判断语句介绍" class="headerlink" title="11、判断语句介绍"></a>11、判断语句介绍</h2><blockquote><p>直接拿一个例子来说明吧。</p><p>&lt;重要日期判断案例&gt;</p></blockquote><pre class=" language-python"><code class="language-python">    <span class="token keyword">if</span> 今天是周六或者周日<span class="token punctuation">:</span>        约妹子    <span class="token keyword">if</span> 今天是情人节<span class="token punctuation">:</span>        买玫瑰    <span class="token keyword">if</span> 今天发工资<span class="token punctuation">:</span>        先还信用卡的钱        <span class="token keyword">if</span> 有剩余<span class="token punctuation">:</span>            又可以happy了，O<span class="token punctuation">(</span>∩_∩<span class="token punctuation">)</span>O哈哈<span class="token operator">~</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            噢，no。。。还的等<span class="token number">30</span>天</code></pre><p>小总结：</p><ul><li>如果某些条件满足，才能做某件事情，而不满足时不允许做，这就是所谓的判断</li><li>不仅生活中有，在软件开发中“判断”功能也经常会用到</li></ul><h2 id="12、if语句"><a href="#12、if语句" class="headerlink" title="12、if语句"></a>12、if语句</h2><ul><li>掌握 if 语句的语法格式</li></ul><h3 id="12-1、if判断语句介绍"><a href="#12-1、if判断语句介绍" class="headerlink" title="12.1、if判断语句介绍"></a>12.1、if判断语句介绍</h3><ul><li>if语句是用来进行判断的，其使用格式如下：</li></ul><pre class=" language-python"><code class="language-python">    <span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>        条件成立时，要做的事情</code></pre><ul><li>demo1:</li></ul><pre class=" language-python"><code class="language-python">    age <span class="token operator">=</span> <span class="token number">30</span>    <span class="token keyword">print</span> <span class="token string">"------if判断开始------"</span>    <span class="token keyword">if</span> age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"我已经成年了"</span>    <span class="token keyword">print</span> <span class="token string">"------if判断结束------"</span></code></pre><ul><li>运行结果:</li></ul><pre class=" language-python"><code class="language-python">    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断开始<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>    我已经成年了    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断结束<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></code></pre><ul><li>demo2:</li></ul><pre class=" language-python"><code class="language-python">    age <span class="token operator">=</span> <span class="token number">16</span>    <span class="token keyword">print</span> <span class="token string">"------if判断开始------"</span>    <span class="token keyword">if</span> age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"我已经成年了"</span>    <span class="token keyword">print</span> <span class="token string">"------if判断结束------"</span></code></pre><ul><li>运行结果:</li></ul><pre class=" language-python"><code class="language-python">    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断开始<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断结束<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></code></pre><p>小总结：</p><ul><li>以上2个demo仅仅是age变量的值不一样，结果却不同；能够看得出if判断语句的作用：就是当满足一定条件时才会执行那块代码，否则就不执行那块代码</li></ul><p>注意：</p><ul><li>代码的缩进为一个tab键，或者4个空格</li></ul><h3 id="12-2、练一练"><a href="#12-2、练一练" class="headerlink" title="12.2、练一练"></a>12.2、练一练</h3><p>要求：从键盘获取自己的年龄，判断是否大于或者等于18岁，如果满足就输出“哥，已成年，网吧可以去了”</p><blockquote><ol><li>使用input从键盘中获取数据，并且存入到一个变量中</li><li>使用if语句，来判断 age&gt;=18是否成立</li></ol></blockquote><h3 id="12-3、想一想"><a href="#12-3、想一想" class="headerlink" title="12.3、想一想"></a>12.3、想一想</h3><ul><li>判断age大于或者等于18岁，使用的是 &gt;=，还有哪些呢？</li></ul><h2 id="13、比较、关系运算符"><a href="#13、比较、关系运算符" class="headerlink" title="13、比较、关系运算符"></a>13、比较、关系运算符</h2><h3 id="13-1、比较-即关系-运算符"><a href="#13-1、比较-即关系-运算符" class="headerlink" title="13.1、比较(即关系)运算符"></a>13.1、比较(即关系)运算符</h3><p>python中的比较运算符如下表</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">检查两个操作数的值是否相等，如果是则条件变为真。</td><td align="left">如a=3,b=3则（a == b) 为 true.</td></tr><tr><td align="left">!=</td><td align="left">检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td align="left">如a=1,b=3则(a != b) 为 true.</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td align="left">如a=1,b=3则(a &lt;&gt; b) 为 true。这个类似于 != 运算符</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</td><td align="left">如a=7,b=3则(a &gt; b) 为 true.</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是，则条件成立。</td><td align="left">如a=7,b=3则(a &lt; b) 为 false.</td></tr><tr><td align="left">&gt;=</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。</td><td align="left">如a=3,b=3则(a &gt;= b) 为 true.</td></tr><tr><td align="left">&lt;=</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</td><td align="left">如a=3,b=3则(a &lt;= b) 为 true.</td></tr></tbody></table><h3 id="13-2、-逻辑运算符"><a href="#13-2、-逻辑运算符" class="headerlink" title="13.2、 逻辑运算符"></a>13.2、 逻辑运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><h2 id="14、小风作业练习"><a href="#14、小风作业练习" class="headerlink" title="14、小风作业练习"></a>14、小风作业练习</h2><p><strong>必做题</strong></p><blockquote><ol><li><p>说出变量名字，可以由哪些字符组成</p></li><li><p>写出变量命名时的规则</p></li><li><p>说出什么是驼峰法（大驼峰、小驼峰）</p></li><li><p>编写程序，完成以下要求：</p><ul><li>提示用户进行输入数据</li><li>获取用户的数据数据（需要获取2个）</li><li>对获取的两个数字进行求和运行，并输出相应的结果</li></ul></li><li><p>编写程序，完成以下要求：</p><ul><li>提示用户进行输入数据</li><li>获取用户的数据数据（需要获取2个）</li><li>对获取的两个数字进行减法运行，并输出相应的结果</li></ul></li><li><p>编写程序，完成以下信息的显示:</p><pre class=" language-Python"><code class="language-Python">===================================        欢迎进入到身份认证系统V1.0= 1. 登录= 2. 退出= 3. 认证= 4. 修改密码==================================</code></pre></li><li><p>编写程序，从键盘获取一个人的信息，然后按照下面格式显示</p><pre class=" language-python"><code class="language-python"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>姓名<span class="token punctuation">:</span> A2Data  QQ<span class="token punctuation">:</span>xxxxxxx手机号<span class="token punctuation">:</span>185xxxxxx公司地址<span class="token punctuation">:</span>北京市xxxx<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span></code></pre></li><li><p>编写程序，从键盘获取用户名和密码，然后判断，如果正确就输出以下信息</p></li></ol></blockquote><pre class=" language-python"><code class="language-python">    亲爱的xxx，欢迎登陆 A2Data学习管理系统</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的由来</title>
      <link href="/posts/62910.html"/>
      <url>/posts/62910.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/p0.png" alt="Python,你好"> </p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204180846.png" alt="Python相关"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>这是一个支持 Linux, Mac, Windows系统的python发行版本，占空间约600MB。如对空间要求严格的用户，Miniconda是一种选择。 </p><p><strong>Windows系统</strong></p><p> <a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">https://www.anaconda.com/distribution/</a> </p><p>首先打开这个网址</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204181606.png" alt=""></p><p>本文以作者系统为例， 双击安装文件 <strong>Anaconda3-2019.10-Windows-x86_64.exe</strong>，进入安装界面，点击 <strong>Next</strong>。 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204182724.png" alt="此处用的是之前下载好的版本"></p><p> 点击 <strong>I Agree</strong>，同意 Anaconda 的协议。 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204182821.png" alt="点击 I Agree"></p><p> 一般选择 <strong>Just Me</strong>，这也是建议安装选项，当然，选 <strong>All Users</strong>，为电脑上的所有用户安装也未尝不可。选好了以后点击 <strong>Next</strong> 继续。 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204182905.png" alt=""></p><p> 在下图显示的界面选择安装目录，建议不要存C盘，这样以后会更多。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204182950.png" alt=""></p><p> 默认第一个勾选框是没有选中的，<strong>需要自己点选</strong>，这个选项说的是把 <strong>Anaconda 添加为 PATH 环境参数</strong> 。 后边基本没太多需要注意的。<strong>Install</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204183244.png" alt=""></p><p>安装到如下界面，可以选择安装，也可以跳过。我这里跳过了。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204183533.png" alt=""></p><p>下一步，<strong>Finish</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204183700.png" alt=""></p><p>到此，安装完成。其实这个安装很简单。一般都会。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204183919.png" alt=""></p><h3 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h3><p>开发者最爱之一的编译器。诸多便利之处。等待你 细细体会。</p><p>这里作者安装的是最新的IDEA 2019.02</p><p>这里不说明，具体安装教程。 主要说破解部分。</p><p> <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a> </p><p>下载之后，双击exe文件。正常安装即可。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204185325.png" alt=""></p><p><strong>划重点，安装完成之后</strong><br>我们选择试用，然后进去Pycharm 进行破解</p><p> 1、下载补丁文件 <strong>jetbrains-agent.jar</strong>并将它放置到 <strong>pycharm安装目录的\bin目录下</strong>（位置可随意，放这里是怕误操作删除了破解文件）。 </p><p> 2、进入项目界面**<br><strong>“Evaluate for free”</strong>免费试用，然后再创建一个空项目，这样就可以进入到pycharm的工作页面 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204200255.png" alt=""></p><p>3、配置文件</p><p>点击Pycharm最上面的菜单栏中的 <strong>“Help” -&gt; “Edit Custom VM Options…”</strong>，如果提示是否要创建文件，点<strong>“Create”</strong>。 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204185740.png" alt=""></p><p> 在打开的vmoptions编辑窗口末行添加：<strong>-javaagent:你pycharm的安装目录\jetbrains-agent.jar</strong> </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204185855.png" alt=""></p><p><strong>（注：请仔细检查补丁路径是否正确，如果错误则会出现Pycharm打不开的情况，这时候可以删除用户配置目录下的pycharm）</strong><br><strong>windwos：C:\Users\用户名\</strong> </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204200621.png" alt=""></p><p>修改完配置文件之后重启Pycharm<br>修改完配置文件之后重启Pycharm<br>修改完配置文件之后重启Pycharm</p><p>（重要事情说三遍） </p><p> 4、输入激活码<br>重启pycharm之后，点击菜单栏中的 <strong>“Help” -&gt; “Register …”</strong>，这里有两种激活方式： </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204201604.png" alt=""></p><p> 一、选择最后一种<strong>License server</strong>激活方式，地址填入：<strong><a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a></strong> （应该会自动填上），或者点击按钮：<strong>“Discover Server”</strong> 来自动填充地址，完成激活 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204201733.png" alt=""></p><p> 二、如果服务器激活方式无法激活，还可以选择Activation code方式激活，复制下面激活码即可 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204201930.png" alt=""></p><p>重启Pycharm，选择自动激活，会自动识别网址进行激活。没有出现日期，就说明永久了。（激活码以及激活插件，请在公号内联系小编获取！）</p><p><strong>划重点—- 本教程适用于所有idea，不仅限pycharm哦</strong></p><blockquote><p> – <em>看到就是赚到，转发一波吧！</em></p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204190110.png" alt=""></p><h2 id="Python-你好！"><a href="#Python-你好！" class="headerlink" title="Python,你好！"></a>Python,你好！</h2><blockquote><p>也许会迟到，但绝对不会缺席！</p></blockquote><h3 id="Anaconda-1"><a href="#Anaconda-1" class="headerlink" title="Anaconda"></a>Anaconda</h3><ul><li><em>全宇宙最亲近一行代码</em> 没有之一</li></ul><p>这里我们通过执行<code>Jupyter notebook</code> ，启动方式有两种！</p><p>1、点击 jupyter botebook 图标运行</p><p>2、Ctrl + R  在命令行中输入 <code>Jupyter notebook</code></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204223943.png" alt="命令行效果"></p><p>对于小白来说，你可能会遇到这样的问题？</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204224223.png" alt="权限问题"></p><p><strong>恭喜进入Coding的世界</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204224614.png" alt="你的第一行代码"></p><h3 id="Pycharm-1"><a href="#Pycharm-1" class="headerlink" title="Pycharm"></a>Pycharm</h3><p>1、使用默认安装的Python</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204230003.png" alt="Hello"></p><p>2、 如何更改可以调用anaconda解释器呢？</p><p>添加对应的路径即可。</p><blockquote><p>因为anaconda 集成了很多库，不用再安装了。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/20191204230533.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运营工具箱</title>
      <link href="/posts/41382.html"/>
      <url>/posts/41382.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/yunying.png" alt=""></p><h2 id="126-种运营人必备工具"><a href="#126-种运营人必备工具" class="headerlink" title="126 种运营人必备工具"></a>126 种运营人必备工具</h2><h3 id="微场景编辑器"><a href="#微场景编辑器" class="headerlink" title="微场景编辑器"></a>微场景编辑器</h3><blockquote><p>易企秀：<a href="http://www.eqxiu.com/main" target="_blank" rel="noopener">http://www.eqxiu.com/main</a></p><p>易企微：<a href="http://www.e7wei.com/" target="_blank" rel="noopener">http://www.e7wei.com/</a></p><p>兔展：<a href="http://www.rabbitpre.com/" target="_blank" rel="noopener">http://www.rabbitpre.com/</a></p><p>麦片 BlueMP：<a href="http://www.bluemp.cn/" target="_blank" rel="noopener">http://www.bluemp.cn</a></p><p>初页：<a href="http://www.ichuye.cn/" target="_blank" rel="noopener">http://www.ichuye.cn/</a></p><p>MAKA: <a href="http://maka.im/" target="_blank" rel="noopener">http://maka.im/</a></p><p>翼码旺财：<a href="http://cp.wangcaio2o.com/" target="_blank" rel="noopener">http://cp.wangcaio2o.com/</a></p><p>24好玩：<a href="http://24haowan.com/" target="_blank" rel="noopener">http://24haowan.com/</a></p><p>微页：<a href="http://www.zhichiwangluo.com/" target="_blank" rel="noopener">http://www.zhichiwangluo.com/</a></p><p>点点客海报：<a href="http://www.dodoca.com/" target="_blank" rel="noopener">http://www.dodoca.com/</a></p><p>秀米秀制作：<a href="http://xiumi.us/" target="_blank" rel="noopener">http://xiumi.us/</a></p><p>易传单：<a href="http://echuandan.com/" target="_blank" rel="noopener">http://echuandan.com/</a></p><p>Epub360 意派：<a href="http://www.epub360.com/" target="_blank" rel="noopener">http://www.epub360.com/</a></p><p>LiveApp 场景应用：<a href="http://www.liveapp.cn/" target="_blank" rel="noopener">http://www.liveapp.cn/</a></p><p>Vxplo ：<a href="http://www.vxplo.cn/" target="_blank" rel="noopener">http://www.vxplo.cn/</a></p><p>最酷网：<a href="http://www.zuiku.com/" target="_blank" rel="noopener">http://www.zuiku.com/</a></p><p>起飞页：<a href="http://www.qifeiye.com/#bit_elmpz" target="_blank" rel="noopener">http://www.qifeiye.com/#bit_elmpz</a></p><p>WIX: <a href="http://www.wix.com/" target="_blank" rel="noopener">http://www.wix.com/</a></p><p>有图：<a href="http://www.360youtu.cn/" target="_blank" rel="noopener">http://www.360youtu.cn/</a></p></blockquote><h3 id="图片素材来源"><a href="#图片素材来源" class="headerlink" title="图片素材来源"></a>图片素材来源</h3><blockquote><p>千图网：<a href="http://www.58pic.com/" target="_blank" rel="noopener">http://www.58pic.com/</a></p><p>优美图：<a href="http://www.topit.me/" target="_blank" rel="noopener">http://www.topit.me/</a></p><p>花瓣：<a href="http://huaban.com/" target="_blank" rel="noopener">http://huaban.com/</a> </p><p>图虫：<a href="https://tuchong.com/" target="_blank" rel="noopener">https://tuchong.com/</a></p><p>图片 114：<a href="http://www.tupian114.com/" target="_blank" rel="noopener">http://www.tupian114.com/</a></p><p>Picjumbo： <a href="https://picjumbo.com/" target="_blank" rel="noopener">https://picjumbo.com/</a></p><p>Pexels： <a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a></p><p>Gifs Categories：<a href="http://giphy.com/categories" target="_blank" rel="noopener">http://giphy.com/categories</a> </p><p>SOOGIF 动图搜索：<a href="http://soogif.com/" target="_blank" rel="noopener">http://soogif.com/</a> </p><p>素材公社：<a href="http://www.tooopen.com/" target="_blank" rel="noopener">http://www.tooopen.com/</a></p><p>插画家园：<a href="http://www.13cg.com/" target="_blank" rel="noopener">http://www.13cg.com/</a></p><p>Pixabay 免费高清图片：<a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></p><p>Wallpaper：<a href="http://cn.forwallpaper.com/" target="_blank" rel="noopener">http://cn.forwallpaper.com/</a></p></blockquote><h3 id="图片处理网站"><a href="#图片处理网站" class="headerlink" title="图片处理网站"></a>图片处理网站</h3><blockquote><p>trikingly 建站工具：<a href="https://www.strikingly.com/" target="_blank" rel="noopener">https://www.strikingly.com</a></p><p>canva 海报设计：<a href="https://www.canva.com/" target="_blank" rel="noopener">https://www.canva.com</a></p><p>暴走漫画制作器：<a href="http://baozoumanhua.com/" target="_blank" rel="noopener">http://baozoumanhua.com</a></p><p>tuyitu 动图制作：<a href="http://www.tuyitu.com/" target="_blank" rel="noopener">http://www.tuyitu.com</a></p><p>tagul 在线文字云制作：<a href="https://tagul.com/" target="_blank" rel="noopener">https://tagul.com</a> </p><p>smallpdf pdf 转换网站：<a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></p><p>Gif 录制编辑工具：GifCam </p><p>图片批量处理工具：美图秀秀批处理</p><p>创客贴：<a href="https://www.chuangkit.com/dc.html" target="_blank" rel="noopener">https://www.chuangkit.com/dc.html</a> </p><p>Magic Mockups：<a href="http://magicmockups.com/mockup/2/" target="_blank" rel="noopener">http://magicmockups.com/mockup/2/</a></p></blockquote><h3 id="行业资源合作"><a href="#行业资源合作" class="headerlink" title="行业资源合作"></a>行业资源合作</h3><blockquote><p>APP换量/采量/变现/异业合作/礼品卡券</p><p><a href="http://www.niaogebiji.com/pc/index/appchange" target="_blank" rel="noopener">http://www.niaogebiji.com/pc/index/appchange</a></p></blockquote><h3 id="各大媒体平台"><a href="#各大媒体平台" class="headerlink" title="各大媒体平台"></a>各大媒体平台</h3><blockquote><p>微信公众平台： <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com</a></p><p>企鹅媒体平台： <a href="http://om.qq.com/userAuth/index" target="_blank" rel="noopener">http://om.qq.com/userAuth/index</a></p><p>头条号： <a href="http://mp.toutiao.com/" target="_blank" rel="noopener">http://mp.toutiao.com/</a></p><p>搜狐公众平台： <a href="http://mp.sohu.com/" target="_blank" rel="noopener">http://mp.sohu.com</a></p><p>网易媒体号： <a href="http://dy.163.com/wemedia/login.html" target="_blank" rel="noopener">http://dy.163.com/wemedia/login.html</a></p><p>UC 订阅平台： <a href="http://mp.uc.cn/" target="_blank" rel="noopener">http://mp.uc.cn</a></p><p>百家号： <a href="http://publish.baidu.com/" target="_blank" rel="noopener">http://publish.baidu.com</a></p><p>数据查询网站</p><p>搜狗微信搜索： <a href="http://weixin.sogou.com/" target="_blank" rel="noopener">http://weixin.sogou.com/</a> </p><p>新榜：<a href="http://www.newrank.cn/" target="_blank" rel="noopener">http://www.newrank.cn/</a> </p><p>站长工具：<a href="http://tool.chinaz.com/" target="_blank" rel="noopener">http://tool.chinaz.com</a></p><p>百度搜索风云榜：<a href="http://top.baidu.com/" target="_blank" rel="noopener">http://top.baidu.com</a></p><p>百度指数：<a href="http://index.baidu.com/" target="_blank" rel="noopener">http://index.baidu.com</a></p><p>微指数： <a href="http://data.weibo.com/index" target="_blank" rel="noopener">http://data.weibo.com/index</a></p><p>微博数据中心： <a href="http://data.weibo.com/datacenter/recommendapp" target="_blank" rel="noopener">http://data.weibo.com/datacenter/recommendapp</a></p></blockquote><h3 id="行业数据来源"><a href="#行业数据来源" class="headerlink" title="行业数据来源"></a>行业数据来源</h3><blockquote><p>媒体微博排行榜：<a href="http://v6.bang.weibo.com/xmt" target="_blank" rel="noopener">http://v6.bang.weibo.com/xmt</a></p><p>友盟：<a href="http://www.umeng.com/" target="_blank" rel="noopener">http://www.umeng.com/</a></p><p>中国新闻地图：<a href="http://vis.360.cn/open/cnnews/" target="_blank" rel="noopener">http://vis.360.cn/open/cnnews/</a></p><p>中国票房榜：<a href="http://www.cbooo.cn/" target="_blank" rel="noopener">http://www.cbooo.cn/</a></p><p>收视率排行：<a href="http://www.tvtv.hk/archives/category/tv" target="_blank" rel="noopener">http://www.tvtv.hk/archives/category/tv</a></p><p>农业大数据云平台：<a href="http://www.dataagri.com/agriculture/gis.action" target="_blank" rel="noopener">http://www.dataagri.com/agriculture/gis.action</a></p><p>房价指数：<a href="http://data.eastmoney.com/cjsj/newhouse.html" target="_blank" rel="noopener">http://data.eastmoney.com/cjsj/newhouse.html</a></p><p>中国统计局：<a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">http://data.stats.gov.cn/</a></p><p>主要城市拥堵实时排名：<a href="http://report.amap.com/traffic/" target="_blank" rel="noopener">http://report.amap.com/traffic/</a></p><p>中国综合社会调查：<a href="http://www.chinagss.org/" target="_blank" rel="noopener">http://www.chinagss.org/</a></p><p>P2P 网贷指数：<a href="http://www.p2p001.com/wdzs/wdzs_p2pline.html" target="_blank" rel="noopener">http://www.p2p001.com/wdzs/wdzs_p2pline.html</a></p><p>Alexa：<a href="http://www.alexa.com/" target="_blank" rel="noopener">http://www.alexa.com/</a></p><p>易车汽车指数：<a href="http://index.bitauto.com/" target="_blank" rel="noopener">http://index.bitauto.com/</a></p><p>旅游预测：<a href="http://trends.baidu.com/tour/" target="_blank" rel="noopener">http://trends.baidu.com/tour/</a></p></blockquote><h3 id="网盘搜索网站"><a href="#网盘搜索网站" class="headerlink" title="网盘搜索网站"></a>网盘搜索网站</h3><blockquote><p>盘多多：<a href="http://www.panduoduo.net/" target="_blank" rel="noopener">http://www.panduoduo.net</a></p><p>网盘屋：<a href="http://www.wangpanwu.com/" target="_blank" rel="noopener">http://www.wangpanwu.com/</a></p><p>呆木瓜：<a href="http://www.daimugua.com/" target="_blank" rel="noopener">http://www.daimugua.com</a></p><p>西林街：<a href="http://www.xilinjie.com/" target="_blank" rel="noopener">http://www.xilinjie.com</a></p><p>胖次网盘搜索引擎： <a href="http://www.panc.cc/" target="_blank" rel="noopener">http://www.panc.cc</a></p><p>百度网盘分享之家： <a href="http://wowenda.com/" target="_blank" rel="noopener">http://wowenda.com/</a></p><p>网盘 007：<a href="http://wangpan007.com/" target="_blank" rel="noopener">http://wangpan007.com/</a></p><p>去转盘网：<a href="http://www.quzhuanpan.com/" target="_blank" rel="noopener">http://www.quzhuanpan.com/</a></p><p>鸵鸟搜索：<a href="http://www.tuoniao.me/" target="_blank" rel="noopener">http://www.tuoniao.me/</a></p></blockquote><h3 id="社群管理工具"><a href="#社群管理工具" class="headerlink" title="社群管理工具"></a>社群管理工具</h3><blockquote><p>进群宝：<a href="http://www.jinqunbao.com/" target="_blank" rel="noopener">http://www.jinqunbao.com/</a></p><p>小U管家企业版：<a href="http://www.xiaouqyfw.com/" target="_blank" rel="noopener">http://www.xiaouqyfw.com</a>/</p><p>行业社群助手：<a href="https://xzs.jinqunla.com/" target="_blank" rel="noopener">https://xzs.jinqunla.com/</a></p><p>群鲸SCRM个人号管理：<a href="http://www.qunsir.com/#/" target="_blank" rel="noopener">http://www.qunsir.com/#/</a></p><p>Wetools：<a href="https://www.wxb.com/wetool" target="_blank" rel="noopener">https://www.wxb.com/wetool</a> </p></blockquote><h3 id="图文排版编辑器"><a href="#图文排版编辑器" class="headerlink" title="图文排版编辑器"></a>图文排版编辑器</h3><blockquote><p>i 排版：<a href="http://www.ipaiban.com/" target="_blank" rel="noopener">http://www.ipaiban.com/</a> </p><p>新榜编辑器：<a href="http://edit.newrank.cn/" target="_blank" rel="noopener">http://edit.newrank.cn/</a> </p><p>秀米：<a href="http://xiumi.us/" target="_blank" rel="noopener">http://xiumi.us/</a></p><p>96 微信编辑器：<a href="http://bj.96weixin.com/" target="_blank" rel="noopener">http://bj.96weixin.com/</a></p><p>96 微信标题表情： <a href="http://bj.96weixin.com/emoji/" target="_blank" rel="noopener">http://bj.96weixin.com/emoji/</a> </p><p>135 编辑器：<a href="http://www.135editor.com/" target="_blank" rel="noopener">http://www.135editor.com/</a></p><p>小蚂蚁微信编辑器：<a href="http://www.xmyeditor.com/" target="_blank" rel="noopener">http://www.xmyeditor.com/</a></p><p>易点编辑器：<a href="http://wxedit.yead.net/" target="_blank" rel="noopener">http://wxedit.yead.net/</a></p><p>易企微微信编辑器：<a href="http://www.e7wei.cn/" target="_blank" rel="noopener">http://www.e7wei.cn/</a></p><p>91 微信编辑器：<a href="http://www.91join.com/edit/" target="_blank" rel="noopener">http://www.91join.com/edit/</a></p><p>微信编辑器：<a href="http://www.wxbj.cn/" target="_blank" rel="noopener">http://www.wxbj.cn/</a></p><p>微助点微信编辑器：<a href="http://www.videaba.com/" target="_blank" rel="noopener">http://www.videaba.com/</a></p><p>懒人模板：<a href="http://bj.lanrenmb.com/" target="_blank" rel="noopener">http://bj.lanrenmb.com/</a></p><p>果优微信编辑器：<a href="http://guoyoo.99vu.com/" target="_blank" rel="noopener">http://guoyoo.99vu.com/</a></p><p>做最好用的微信编辑器：<a href="http://editor.fzn.cc/" target="_blank" rel="noopener">http://editor.fzn.cc/</a></p><p>微信在线编辑：<a href="http://wx.bzrw.net/" target="_blank" rel="noopener">http://wx.bzrw.net/</a></p><p>微兔兔编辑器：<a href="http://www.weitutu.com/" target="_blank" rel="noopener">http://www.weitutu.com/</a></p><p>有图微信编辑器：<a href="http://bj.360youtu.com/" target="_blank" rel="noopener">http://bj.360youtu.com/</a></p><p>排版 365：<a href="http://paiban.lizhi.in/" target="_blank" rel="noopener">http://paiban.lizhi.in/</a></p><p>乐排：<a href="http://pb.ishangtong.com/" target="_blank" rel="noopener">http://pb.ishangtong.com/</a></p><p>秀多多：<a href="http://xiudodo.com/?m=graphic#/for/new" target="_blank" rel="noopener">http://xiudodo.com/?m=graphic#/for/new</a></p></blockquote><h3 id="在线问卷调查"><a href="#在线问卷调查" class="headerlink" title="在线问卷调查"></a>在线问卷调查</h3><blockquote><p>腾讯问卷调查：<a href="http://wj.qq.com/" target="_blank" rel="noopener">http://wj.qq.com/</a></p><p>麦客：<a href="http://www.mikecrm.com/" target="_blank" rel="noopener">http://www.mikecrm.com/</a></p><p>ICTR：<a href="http://cn2.ictr.cn/" target="_blank" rel="noopener">http://cn2.ictr.cn/</a></p><p>问道网：<a href="http://www.askform.cn/" target="_blank" rel="noopener">http://www.askform.cn/</a></p><p>问卷星：<a href="http://www.sojump.com/" target="_blank" rel="noopener">http://www.sojump.com/</a></p><p>调查派：<a href="http://www.diaochapai.com/" target="_blank" rel="noopener">http://www.diaochapai.com/</a></p><p>问卷网：<a href="http://www.wenjuan.com/" target="_blank" rel="noopener">http://www.wenjuan.com/</a></p><p>SurveyMonkey：<a href="https://zh.surveymonkey.com/" target="_blank" rel="noopener">https://zh.surveymonkey.com/</a></p></blockquote><h3 id="每日运营资讯"><a href="#每日运营资讯" class="headerlink" title="每日运营资讯"></a>每日运营资讯</h3><blockquote><p>运营派<a href="https://www.adquan.com/" target="_blank" rel="noopener">https://www.adquan.com/</a></p><p>Next新产品<a href="http://next.36kr.com/posts" target="_blank" rel="noopener">http://next.36kr.com/posts</a></p><p>新榜资讯<a href="https://www.newrank.cn/public/news.html" target="_blank" rel="noopener">https://www.newrank.cn/public/news.html</a></p></blockquote><h3 id="二维码生成器"><a href="#二维码生成器" class="headerlink" title="二维码生成器"></a>二维码生成器</h3><blockquote><p>草料二维码：<a href="http://cli.im/" target="_blank" rel="noopener">http://cli.im</a></p><p>联图网：<a href="http://www.liantu.com/" target="_blank" rel="noopener">http://www.liantu.com</a></p><p>二维工坊：<a href="http://www.2weima.com/" target="_blank" rel="noopener">http://www.2weima.com</a></p><p>wwei 创意二维码：<a href="http://www.wwei.cn/" target="_blank" rel="noopener">http://www.wwei.cn</a></p><p>二维码解码器：<a href="http://jiema.wwei.cn/" target="_blank" rel="noopener">http://jiema.wwei.cn/</a> </p><p>半色调二维码生成器：<a href="https://spacekid.me/halftone-qr-code-generator/" target="_blank" rel="noopener">https://spacekid.me/halftone-qr-code-generator/</a></p></blockquote><h3 id="其他实用工具"><a href="#其他实用工具" class="headerlink" title="其他实用工具"></a>其他实用工具</h3><blockquote><p>多媒体格式转换工具：格式工厂 </p><p>微信文章视频地址采集工具：<a href="http://www.hengha.tv/caiji.html" target="_blank" rel="noopener">http://www.hengha.tv/caiji.html</a> </p><p>第一字体转换器：<a href="http://www.diyiziti.com/List" target="_blank" rel="noopener">http://www.diyiziti.com/List</a></p><p>上传图片找字体：<a href="http://www.qiuziti.com/" target="_blank" rel="noopener">http://www.qiuziti.com/</a> </p><p>广告买卖网：<a href="http://www.admaimai.com/" target="_blank" rel="noopener">http://www.admaimai.com/</a></p><p>GIF 压缩/水印/裁剪/制作/视频转 GIF：<a href="http://www.piggif.com/tools/compress" target="_blank" rel="noopener">http://www.piggif.com/tools/compress</a></p><p>在线文件转换器：<a href="http://cn.office-converter.com/" target="_blank" rel="noopener">http://cn.office-converter.com/</a></p><p>PDF 转 DOC：<a href="http://pdf2doc.com/zh/" target="_blank" rel="noopener">http://pdf2doc.com/zh/</a></p><p>VIP 视频在线解析：<a href="http://vip.ifkdy.com/" target="_blank" rel="noopener">http://vip.ifkdy.com/</a> </p><p>装逼神器：<a href="http://deepba.com/" target="_blank" rel="noopener">http://deepba.com/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> 运营工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造稳定快速、高效免费图床</title>
      <link href="/posts/6059.html"/>
      <url>/posts/6059.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床"><a href="#GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床" class="headerlink" title="GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床"></a>GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>为什么要使用图床呢？</p></blockquote><p>因为在不同平台发布同一篇文章的时候，最一个痛苦的点就是，图片存储问题，各个平台的文件存储方式各不相同，无法直接 <code>Ctrl + C</code> 的方式一键搞定，为了解决这个问题，使用 <code>MarkDown + 图床</code> 的方式进行文章的写作，将图片放到一个统一的地方，在文章中引入图片外链。<br>所谓图床，就是将图片储存到第三方静态资源库中，其返回给你一个 URL 进行获取图片。<code>MarkDown</code> 支持使用 URL 的方式显示图片，我想这也是程序员为什么对其偏爱的原因之一。<br>作为程序员，你会发现，现在很多论坛和社区都开始支持使用 <code>MarkDown</code>，如果你没使用图床的情况下，你分享同一篇文章，你要在不同的平台，各自重新编辑排版一遍和上传图片一次。<br>有了图床，情况就不一样了，<code>Ctrl+C</code> 的方式就搞定了，根本不用再 Check 文章内容一遍。</p><blockquote><p>图床的选择？</p></blockquote><ol><li><code>微博图床</code>：以前用的人比较多，从 2019 年 4 月开始开启了防盗链，凉凉</li><li><code>SM.MS</code>：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li><code>其他小众图床</code>：随时有挂掉的风险</li><li><code>Imgur 等国外图床</code>：国内访问速度太慢，随时有被墙的风险</li><li><code>大厂储存服务</code>：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li><li><code>GitHub 图床</code>：免费，但是国内访问速度慢（不过没关系，利用 <code>jsDelivr</code> 提供的免费的 CDN 加速 速度足够了）</li></ol><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li>新建 GitHub 仓库</li><li>生成一个 Token</li><li>配置 PicGo 并使用 jsdelivr 作为 CDN 加速</li><li>使用 Imagine 进行图片压缩</li><li>上传图片到 PicGo 并使用图床</li></ol><h2 id="新建-GitHub-仓库"><a href="#新建-GitHub-仓库" class="headerlink" title="新建 GitHub 仓库"></a>新建 GitHub 仓库</h2><ul><li>登录/注册 GitHub</li><li>新建一个仓库，填写好仓库名</li><li>仓库描述</li><li>将权限设置成 <code>public</code></li><li>根据需求选择是否为仓库初始化一个 <code>README.md</code> 描述文件</li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/github.png" alt=""></p><p><strong>新建 GitHub 仓库</strong></p><h2 id="生成一个-Token"><a href="#生成一个-Token" class="headerlink" title="生成一个 Token"></a>生成一个 Token</h2><ol><li>点击用户头像 -&gt; 选择 <code>Settings</code></li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/github1.png" alt=""></p><p><strong>Settings</strong></p><ol><li>点击 <code>Developer settings</code></li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/QQ%E6%88%AA%E5%9B%BE20191126090504.png" alt=""></p><p><strong>Developer settings</strong></p><ol><li>点击 <code>Personal access tokens</code></li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/QQ%E6%88%AA%E5%9B%BE20191126090657.png" alt=""></p><p><strong>Personal access tokens</strong></p><ol><li>点击 <code>Generate new token</code></li></ol><p><strong>Generate new token</strong></p><ol><li>填写 <code>Token</code> 描述，勾选 <code>repo</code>，然后点击 <code>Generate token</code> 生成一个 <code>Token</code></li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/token.png" alt="填写Token 描述"></p><p><strong>填写 Token 描述</strong></p><ol><li>获取 <code>Token</code> 密钥</li></ol><blockquote><p>注意这个 Token 只会显示一次，自己先保存下来，或者等后面配置好 PicGo 后再关闭此网页</p></blockquote><p><strong>获取 Token 密钥</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/key.png" alt=""></p><h2 id="配置-PicGo-并使用-jsdelivr-作为-CDN-加速"><a href="#配置-PicGo-并使用-jsdelivr-作为-CDN-加速" class="headerlink" title="配置 PicGo 并使用 jsdelivr 作为 CDN 加速"></a>配置 PicGo 并使用 jsdelivr 作为 CDN 加速</h2><p>前往下载 <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo</a>（<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">点击下载</a>），安装好后开始配置图床</p><ul><li>设定仓库名：按照 <code>用户名/图床仓库名</code> 的格式填写</li><li>设定分支名：<code>master</code></li><li>设定 Token：粘贴之前生成的 <code>Token</code></li><li>指定存储路径：填写想要储存的路径，如 <code>img/</code>，这样就会在仓库下创建一个名为 <code>img</code> 的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照<code>自定义域名+上传的图片名</code>的方式生成访问链接，放到粘贴板上，因为我们要使用 <code>jsDelivr</code> 加速访问，所以可以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191126095623.png" alt=""></p><p><strong>配置 PicGo</strong></p><p>Text</p><pre class=" language-text"><code class="language-text">Q：什么是 jsdelivr ?A：jsDelivr 为开发者提供免费公共 CDN 加速服务</code></pre><h2 id="使用-Imagine-进行图片压缩"><a href="#使用-Imagine-进行图片压缩" class="headerlink" title="使用 Imagine 进行图片压缩"></a>使用 Imagine 进行图片压缩</h2><p>通常情况下，图片大小都是超过 200KB 的，所以网页加载的时候会特别慢，一般我们会对图片进行压缩，这里我推荐 <a href="https://github.com/meowtec/Imagine/releases" target="_blank" rel="noopener">Imagine</a>（<a href="https://github.com/meowtec/Imagine/releases" target="_blank" rel="noopener">点击下载</a>） 支持全平台。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191126105603.png" alt=""></p><p><strong>使用 Imagine 进行图片压缩</strong></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/ing.png" alt=""></p><blockquote><p>Imagine 采用的是有损压缩，介意的可以忽略这一步</p></blockquote><p>顺便推荐一个无损压缩的网站：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></p><h2 id="上传图片到-PicGo-并使用图床"><a href="#上传图片到-PicGo-并使用图床" class="headerlink" title="上传图片到 PicGo 并使用图床"></a>上传图片到 PicGo 并使用图床</h2><p>配置好 <code>PicGo</code> 后，我们就可以进行高效创作了，将<code>压缩后的图片</code>拖拽到<code>上传区</code>，将会自动上传并复制<code>访问链接</code>，将链接粘贴到博文中就行了，访问速度杠杠的</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang010.png" alt="上传图片到 PicGo 并使用图床"></p><p><strong>上传图片到 PicGo 并使用图床</strong></p><p>此外 <code>PicGo</code> 还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，<code>PicGo</code> 还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myStory</title>
      <link href="/posts/52477.html"/>
      <url>/posts/52477.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一个成功跨行者的自述"><a href="#一个成功跨行者的自述" class="headerlink" title="一个成功跨行者的自述"></a>一个成功跨行者的自述</h1><p><em>年轻，是我们唯一拥有权力去编织梦想的时光。</em></p><blockquote><p>为什么说我的跨行经历呢，因为我的专业特殊，以及经历上的与众不同，全网唯一都不为过。下面来看看我的介绍。（来自粗人的自述）</p></blockquote><blockquote><p><code>年少风</code></p><p>学校： 山西师范大学体育学院(1本)</p><p>专业： 武术于民族传统体育</p><p>爱好： 软件控 &amp; 技术控  运动、健身、项目策划、有想法并愿意为之努力</p><p><code>Dream</code> 梦想用大数据&amp;人工智能推动传统行业的发展。</p></blockquote><h2 id="行动是一切梦想的起点"><a href="#行动是一切梦想的起点" class="headerlink" title="行动是一切梦想的起点"></a>行动是一切梦想的起点</h2><blockquote><p>没有什么，比犹豫和纠结更浪费时间。</p><p>只要你去做，那么一切就会简单起来。</p></blockquote><h3 id="大学特招之路"><a href="#大学特招之路" class="headerlink" title="大学特招之路"></a>大学特招之路</h3><p><strong>特招</strong> </p><p>对于很多人来说，这是个比较特殊的渠道，对于我们上大学来说，需要在上大学前，就要参加比赛，打到省前三，才可以有二级证书。也就是成为二级运动员。 有了这个证书之后，你才可以报名参加特招考试。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/640.jpg" alt=""></p><p>我记得我那一届参赛选手有700+，然后我们整个系别招收人数不到70，也就基本上是十几个人里边选一个，而且是定点定考，就是你想去哪个学校，就得报哪个学校去考试。然后考文化课，以及专业，是以专业分数为优先录取，我当时考了89分，当时录取分数是往届最高的，75分。给大家基本普及一下我当时考试的内容。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/%E8%80%83%E8%AF%95%E9%A1%B9%E7%9B%AE.png" alt=""></p><blockquote><p>很荣幸,我被录取了，录取名单在高考前就出来了，然后后边我还参加了一天的高考考试，用教练的话说，就是去体验体验高考的氛围。当时就自己写了点，然后睡了会，后边的姑娘还把试卷漏出来给我抄，我前边的同学也是认识的，学习好的那种，我都懒得抄，监考老师还帮我挡摄像头，我简直觉得自己遇到传说中的好老师，好队友，所以后来，我就没参加了。 怕影响别人。 因为我们的付出比常人更多，每天早上5点起，拉练一般最少是 5-7公里，当时有一个7.2 ，然后蛙跳，到7:30左右，晨练结束，开始吃饭，放松休息一下，从9点开始训练到中午，一般其他时间 都是以反应靶，空击、实战为主。 有一次去塔沟特训，教官只要第一名，真的是有几次吃不上早饭，不是因为你跑的慢，不达标，而是因为你们团队有人不符合，你快了不行，慢了也不行。这个经历是我受用终身的，人的潜力只有在特定的条件下才能最大价值的发挥出来。也让我从那时开始有了团队意识。</p></blockquote><h3 id="大学生涯"><a href="#大学生涯" class="headerlink" title="大学生涯"></a>大学生涯</h3><p>2013年，我成功进入山西师范大学体育学院，可以毫不夸张的说，整个山西省百分之七八十的教师都是出自我们学校。</p><p>大一大二， 之后 暑期去过国企 ：北京公交总站，富士康，管理跆拳道馆，运营公众号合作。(那个时候，我就有了公众号，只不过开始都是给道管做)</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/4.jpg" alt="北京之旅遇到的一幕"></p><h3 id="为了梦想，你愿意付出什么？"><a href="#为了梦想，你愿意付出什么？" class="headerlink" title="为了梦想，你愿意付出什么？"></a>为了梦想，你愿意付出什么？</h3><blockquote><p>当别人都还在玩游戏，周六日出去玩的时候，你愿意去道馆代课么？当别人都舍不得买个u盘的时候，你愿意花5 6 百去买个1T 的移动硬盘吗？ 什么东西都是需要付出的，你做了多少未必有一定比例的收获，但是你不做，一定不会有收获。 你所有的付出都是为你心中的梦想去奠定基础。 </p></blockquote><blockquote><p>久而久之，渐渐的发现，不论是一个技术工，还是一个教练，你的价值都只是在当前的一个工作时间， 一堂有趣的课程；学习ps （目前还是很low逼的设计）之后，我发现一门教程，可以影响很多人， 但是起初的付出只需要一分，而不论是教练或者是打工，你的价值都只是当前。 </p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/2.jpg" alt=""></p><h3 id="毕业时的抉择才是最艰难的"><a href="#毕业时的抉择才是最艰难的" class="headerlink" title="毕业时的抉择才是最艰难的"></a>毕业时的抉择才是最艰难的</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/5.jpg" alt=""></p><p><strong><em>\</em>对于不爱学习的我：**</strong> </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/6.jpg" alt=""></p><blockquote><p>有一个技术梦，随着不断接触到计算机方向的东西。 起初的安装系统，到收集各类破解软件，觉得，哇，大牛 好厉害。之后，从开始辛苦的付出，到目前转行从业的大数据 人工智能 机器学习。</p></blockquote><blockquote><p>你的努力到底应该是怎样的呢？ </p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/9.jpg" alt=""></p><blockquote><p>不是你有多少种想法，你掌握多少资源，你拥有多少朋友；而是 你在思考了之后，去做了什么，去舍弃了什么，去改变了什么！！！</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/8.jpg" alt=""></p><h2 id="自媒体的所遇所感"><a href="#自媒体的所遇所感" class="headerlink" title="自媒体的所遇所感"></a>自媒体的所遇所感</h2><h3 id="关于方向"><a href="#关于方向" class="headerlink" title="关于方向"></a>关于方向</h3><p>2018年10月，我开启了自己的公号之旅。也成了跟很多号主一样的作息，甚至经常凌晨一两点休息，一篇原创文章可能需要写2-3天，每天大概需要2-3小时，很多人就会说，不就是一篇文章么？ <code>有这么南么？</code> 首先，我开始的定位是大数据，大数据集群的安装是必不可少的一部分，不信你试试，搭建一台完全分布式的集群，配置好大数据的各个组件。 同时你又要一步一步操作，截图，分享。 如果你的机器不给力。可能卡死都有可能的。 所以不要以为什么都是那么简单的。看着做，跟自己做还是两码事！</p><p>于是，从一个跨行的小白，就开始分享自己的大数据学习之旅，然后也有每个号主刚开始的激情，不断更，即使很晚也坚持去写。所以刚开始的阅读量还不错，但后来渐渐发现，定位不够垂直，大佬们说我写的太详细了。 但我从小白过来，我理解的只有小白才懂小白的<code>痛点</code>，为什么这么说呢？ 因为当你会了之后呢，你再去写的时候，你就会潜意识的略过一些较为基础，同时小白不懂得这些点。 然后我就坚持我的想法，写了下来了。</p><p>并且，我因为工作参与项目较多，所以分享的范围也比较广。</p><pre class=" language-javascript"><code class="language-javascript">Linux    Hadoop    HiveSQL    Python    Java    Vue    Git    等等 <span class="token template-string"><span class="token string">`后续会聚焦在数据领域`</span></span></code></pre><p>那么，你就会看到我公众号内容比较杂，但很多都是干货，骚操作。这点我也会花时间整理一下。重新上线，让大家方便快捷的涨点知识。少踩点坑。多一些经验以及实操。有些跨行的经验，后续我会更新在星球，或者网站。  相信现在大家看到公号，发现写文章的比看文章的还多，因为一方面，号主不断引领粉丝发展自媒体，另一方面，公众号如果你玩的好，套路深，收益还是蛮大的。 看阅读量来定价格接广告的。 甚至有的号，你可以看到只有几篇原创，但是阅读量很高。所以就很值钱。</p><p>我呢，甚至组建了好几拨人，团队式的发文，最终都失败了。(原因有很多)，我从中学会很多，由于开始niubility 吹的有点大， 起名叫做 Ai大数据与机器学习，大数据还好，机器学习 不咋懂，受众也很宅。只有大数据的还好。也坚持了半年，中间有些事情，耽搁一段时间没更文。 后来想聚焦与数据，各行各业都离不开数据。 所以改名叫做—-&gt; <strong>A2Data</strong> </p><blockquote><p><strong>重点</strong></p><p>如果你开始了，自媒体之旅，那么<code>断更</code> 将是你最大的敌人。</p><p>不知道你看没看过李佳琦的直播，他之所以火，是因为他每天连续直播3-4个小时。</p><p>你不知道有多少个公众号，你一天不断更，就会被淹没。 所以，如果你是为了通过这盈利。</p><p>那么坚持是必须的。 而且你会发现，如果跟你同一批用户，刚开始做，你断更了两个月，</p><p>你会发现别人的号都做起来了，mmmp，真是个魔化的世界。(有木有)</p><p>So, <code>一定要坚持 不断输出 曝光</code></p></blockquote><ol><li>内容输出，垂直领域。</li><li>固定时间，保持高频输出</li><li>排版标题，规划，一定要有规划</li><li>复盘，也就是最重要的一点，很多人都不做的</li></ol><h3 id="关于内容"><a href="#关于内容" class="headerlink" title="关于内容"></a>关于内容</h3><p>简单来说，一个公众号也好，朋友圈也好，知乎简书，都是在打造个人品牌。甚至大到公司，都是在做宣传，品牌。</p><h4 id="写作的价值？"><a href="#写作的价值？" class="headerlink" title="写作的价值？"></a>写作的价值？</h4><p><strong>写作是人人都需要的底层能力</strong> </p><hr><blockquote><p>1、沟通能力决定了你链接资源的效率。</p><p>2、写作是倒逼成长的绝佳方法</p><p>3、写作是学习效果 个人能力的放大器</p></blockquote><h4 id="个人品牌如何打造？"><a href="#个人品牌如何打造？" class="headerlink" title="个人品牌如何打造？"></a>个人品牌如何打造？</h4><p><strong>简单讲 技能定位  +  持续曝光</strong></p><hr><blockquote><p>持续曝光，就需要借助写作能力。</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>职场简语</p></blockquote><p>*<em>英文 + 经典语录 *</em></p><h4 id="软文要素"><a href="#软文要素" class="headerlink" title="软文要素"></a>软文要素</h4><p><strong>闪电胰腺</strong>  <code>三点一线</code></p><ul><li>三点： 寻找软文的核心诉求</li><li>痒点： 消费者享受的体验  （Good Experience） </li><li>痛点： 无法获得该功能会有什么痛苦  （Terrible Felling） </li><li>利益点： 解决方案  （Benifit Point ） </li><li>一线：故事性【热点、冲突、惊悚、情感、悬念、幽默、争议、名人等】</li><li><code>GTB核心</code></li></ul><p>即用故事性的叙述来铺垫和陈述GT，最后用B收尾。</p><p><strong>图样理论</strong></p><blockquote><p>1、以图代文，分段易读。</p><p>2、切记开门见山，不可以直接上来就说品牌、产品等</p><p>3、内容由浅入深，有趣打头。</p><p>4、受众第一，要有读者心态。</p><p><code>软文的目的是被阅读</code>，没有打开率，一切都是无用功</p></blockquote><p>{<code>读者心态--&gt; 娱乐、八卦、时事、搞笑。。。</code>}    </p><h3 id="关于工具"><a href="#关于工具" class="headerlink" title="关于工具"></a>关于工具</h3><blockquote><p>其实，我是个不折不扣的工具控。 </p><p>一般朋友们有什么软件，工具的需要，都会找我，什么黑科技啥的？(偷笑)</p><p>对于号主来说，排版是一个最大的问题。</p><p>根据我一直以来的经验，这里给大家几点建议。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/A2Data/cdn/img/tools.png" alt=""></p><h3 id="关于知识"><a href="#关于知识" class="headerlink" title="关于知识"></a>关于知识</h3><blockquote><p>不知道你是否也看到了？</p><p>有这么一个现象</p><p>自从入了互联网，</p><p>发现很多人喜欢 ‘囤知识 囤资料’</p><p>收藏xxx的干货，百度云盘可能存了好几T 的资源</p><p>但是，你真正掌握的有多少呢？</p><p>学习了，做了多少？</p></blockquote><p>很多人有一个错觉，自以为关注了好多公众号，加了很多好友，积攒了很多资料，其实大多数是打广告的资料，你真正看的也不会有的。 在这里，小编的建议是：希望你可以选择一个方向，踏踏实实的学一点，<code>有的时候，什么都做，什么都会，结果也可能是，什么都做不好，什么都不会</code> </p><h2 id="该奋斗的年纪，就不要再飘了"><a href="#该奋斗的年纪，就不要再飘了" class="headerlink" title="该奋斗的年纪，就不要再飘了"></a>该奋斗的年纪，就不要再飘了</h2><h3 id="市场永远不会一成不变的，所以，改变就是好事"><a href="#市场永远不会一成不变的，所以，改变就是好事" class="headerlink" title="市场永远不会一成不变的，所以，改变就是好事"></a>市场永远不会一成不变的，所以，改变就是好事</h3><p>为什么会说着一点呢？ </p><blockquote><p>因为很多人本来写公众号是分享个人经历，成长的，看到市场的利益，就会变得利益化；于是乎，有了很多小白蜂拥而至。时间花在了增粉、阅读、加人，微群，发圈，你会发现越来越的文章只是题目不一样，内容都一样。 用户好感度就降低了。 所以，微信现在对原创号非常友好。</p><p>其实，以上不是重点，重点是在本该奋斗的年级，应该踏踏实实的去提升自己，拥抱市场，而不是所谓的跟风。</p><p>我断更期间，自己有时候玩会游戏，真香，健健身，发现真的是好。 日常工作我都是爬楼梯上楼的，试问？每天运动的人，跟每天不动的人，长期结果能一样吗？ 你去练了两天拳，跟练了几年的，能一样？ </p><p>所以在该努力的年纪，希望大家，沉淀下来，好好想想，自己到底需要什么？可以去做什么？ 改变了哪些？还需要补充哪些？ 我时常鼓励我的朋友，激励他们说：<code>你看我跨行都可以的</code> 你们会更优秀的。</p></blockquote><h3 id="摸鱼一时爽，一直摸鱼一直爽"><a href="#摸鱼一时爽，一直摸鱼一直爽" class="headerlink" title="摸鱼一时爽，一直摸鱼一直爽"></a>摸鱼一时爽，一直摸鱼一直爽</h3><blockquote><p>为什么越来越多人，交完智商税，反而混的比之前更差了，首先说一下，例如你进了某某某大佬的知识星球，或者加个好友，并不代表你厉害了，而是你是想向他学习之一，你是付费用户，其次，你的摸鱼时间更久了，你会应酬大佬吧，也许会关注更多的圈子动态，你划水的本领越来越强了。而大佬还是大佬，因为他已经<code>经历过曾经你没有经历过的时光</code>，遇上你没有遇上的风口，例如我跨行大数据的风口，现在你试试？ </p><p>再说说，我删了2k人的感想，我的公众号，基本上发文章不推文，不怎么发圈，不发群，也没有建立自己的微信群。 所以阅读量 活跃度 也很少。加了很多号主，有认识的不认识的。 也有很多好友。发现莫名的被删，莫名的被拉群。工作都忙不过来，所以 我花了近半个月的时间，删除了2k+好友 退出了200+微信群。现在相对亲近多了。 所以没有必要的社交，不对等的资源的社交，最终只是被割韭菜的下场，资源不会跑的，关键看你有没有实力。 </p></blockquote><blockquote><p>1、未来制造业将不再是主要的雇主，<strong>人工智能和自动化将取代工人。</strong>人应该回归去做人类更擅长的、具备创造力、体验性的工作。</p><p>2、<strong>网上90%的评论都是没脑子的评论</strong>，各种水军和谣言是精神排泄物。</p><p>信息开放的时代，取出对你真正有价值的信息，帮助，资源，其实是一门学问，以前人人都是产品经理，现在人人都是数据分析。</p><p>对于我来讲：  <strong>成功就是用99次失败去尝试一次成功的可能性</strong> </p><p>那么对于新人来讲：<code>技术就是最好的入场劵</code>！  </p><p>亲爱滴朋友们，感谢您的阅读，<code>流年笑掷 未来可期</code></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 毒鸡汤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何构建知识体系</title>
      <link href="/posts/18572.html"/>
      <url>/posts/18572.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>成长就是孤独的把委屈和泪水拼命的咽下去不让别人知道。</p></blockquote><blockquote><p><em>只有在孤独中，才能够更好的意识到自己真正追求的是什么，才能不局限于当下的小事，放眼更远大的志向。</em></p></blockquote><h1 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h1><blockquote><p>是在(恰如其分、环环相扣的)提问和实践的基础上形成的概念和概念间联系的集合，知识点之间彼此形式多样的方式关联，形成了特定的结构。</p></blockquote><h2 id="知行"><a href="#知行" class="headerlink" title="知行"></a>知行</h2><p><em>概念 = 内涵 + 外延 + 联系（知 -&gt; 行</em>）</p><blockquote><p>外延的常用描述方式 “是什么而不是什么”，经验是用枚举外延以及枚举高价值联系的方式来对提升概念理解的精确度，即将内涵方式描述不显而易见的加入到备忘录。</p></blockquote><blockquote><p>理解 = 能够枚举更多概念的CASE以及概念间的联系，理解就是 识 -&gt; 记 -&gt; 忆（用场景+联系来唤醒，记的时候想着忆，写的时候想着读）。</p></blockquote><p>学以致用的基础是理解概念间的高价值联系，而发挥力量的关键是显性表达。</p><blockquote><p>我们可以借助“<code>八大问</code>”，来分析信息、观点、事件、经历等，从中整理出概念和联系。<br>八大问是一个提问的框架，将针对信息、观点、事件、经历等的提问，分为“<code>前、因、后、果、适、用、边、界</code>”八类。</p></blockquote><p>八大问可以分为两组，<strong>前因后果用于分析信息，适用边界用于整理信息。</strong></p><pre class=" language-javascript"><code class="language-javascript">前（前车之鉴）：为什么这件事对我重要？它是怎么引出这个信息的？因（相因相生）：作者有哪些关于原因的假设？怎么验证或排除这些假设？还有其他可能性吗？后（以观后效）：从已有信息去做之后会怎样？对我的好处（效用）是什么？果（自食其果）：不这么做的后果是什么？不改变的问题有多严重？<span class="token function">适（适得其反）：有没有相反的观点？有没有不支持这个实现的案例</span><span class="token punctuation">(</span>CASE to CASE<span class="token punctuation">)</span>？用（使用条件）：要这样做，需要具备哪些条件？（考虑 成本、收益、效率、安全、态度、能力等）这件事可以哪些方式来完成？边（旁敲边鼓）：从前有没有类似的（或乍看起来差不多的）信息？其他 （领域 <span class="token operator">|</span> 行业 <span class="token operator">|</span> 人）如何解决类似问题呢？界（楚河汉界）：无论是相反的还是类似的信息，和这个信息的真正区别是什么？交界在哪里？</code></pre><p><img src="/medias/loading.gif" data-original="/resource/image/strive/zstx.png" alt=""></p><h2 id="应用指南"><a href="#应用指南" class="headerlink" title="应用指南"></a>应用指南</h2><blockquote><p>在使用八大问时，不一定要原模原样地问上面列举出的示范问题，可以在理解这八类问题的前提下，针对具体情境，提出合适的问题。也就是说，八大问最重要的是提供了一种提出有洞察力的问题的框架，这是他的意义所在。如果你有能力，可以领会心法，保持心法不变，提出新的问题。</p><p>如果一开始不知道怎么用，则建议直接使用示范问题或在其基础上做变化。欢迎一起探讨哦。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 毒鸡汤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/posts/17683.html"/>
      <url>/posts/17683.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MarkDown-用法精选"><a href="#MarkDown-用法精选" class="headerlink" title="MarkDown 用法精选"></a>MarkDown 用法精选</h1><p><strong>Markdown</strong>是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><blockquote><p><strong>强力推荐</strong>: Tproa<code>MarkDown编辑器</code>跨平台 <a href="https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;action=edit&amp;isNew=1&amp;type=10&amp;token=282276686&amp;lang=zh_CN" target="_blank" rel="noopener">完美运行</a>.</p><p><code>Hexo```MHexoEditor编辑器</code>博客好助手 <a href="https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;action=edit&amp;isNew=1&amp;type=10&amp;token=282276686&amp;lang=zh_CN" target="_blank" rel="noopener">完美支持 </a><code>Hexo</code> 博文.</p></blockquote><p><strong>优点：</strong><br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:<strong>WYSIWYG</strong>编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点：</strong><br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><blockquote><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p></blockquote><pre><code>示例：# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><p><strong>效果如下：</strong></p><pre class=" language-hexo"><code class="language-hexo"># 如上是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><blockquote><p><strong>加粗</strong><br>要加粗的文字左右分别用两个<em>号包起来*</em>斜体<strong>要倾斜的文字左右分别用一个<em>号包起来<br>*</em>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个<em>号包起来<br>*</em>删除线**<br>要加删除线的文字左右分别用两个~~号包起来</p></blockquote><p><strong>示例：</strong></p><pre><code>**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p>效果如下：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong>这是斜体加粗的文字</strong><br><del>这是加删除线的文字</del></p><h2 id="三、引用块"><a href="#三、引用块" class="headerlink" title="三、引用块"></a>三、引用块</h2><blockquote><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<strong>n</strong>个…<br>貌似可以一直加下去，但没神马卵用</p></blockquote><p><strong>示例</strong>：</p><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><pre><code>-------********</code></pre><p>效果如下：<br> 可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><pre><code>![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><pre><code>![img][A2DATA](/resource/image/markdown/1.png)</code></pre><p>效果如下：</p><p><img src="/medias/loading.gif" data-original="/resource/image/markdown/111.png" alt=""></p><pre class=" language-shell"><code class="language-shell">- hexo 3{% asset_img test.jpg This is an test image %} </code></pre><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><pre><code>[超链接名](超链接地址 "超链接title")title可加可不加</code></pre><p>示例：</p><pre><code>[简书](http://jianshu.com)[百度](http://baidu.com)</code></pre><p>效果如下：</p><p><a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><pre><code>&lt;a href="超链接地址" target="_blank"&gt;超链接名&lt;/a&gt;示例&lt;a href="https://www.baidu.com" target="_blank"&gt;百度&lt;/a&gt;</code></pre><hr><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><ul><li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5></li></ul><p>语法：<br> 无序列表用 - + * 任何一种都可以</p><pre><code>- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格</code></pre><p>效果如下：</p><ul><li><p>列表内容</p></li><li><p>列表内容</p></li><li><p>列表内容</p></li><li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5></li></ul><p>语法：<br> 数字加点</p><pre><code>1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格</code></pre><p>效果如下：</p><p>1.列表内容<br> 2.列表内容<br> 3.列表内容</p><ul><li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5></li></ul><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><pre><code>表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>示例：</p><pre><code>姓名|技能|排行|--|:--:|--:||欢迎|关注|微信||公号|平台|A2DATA||我们|一起|加油|</code></pre><p>效果如下：</p><table><thead><tr><th>I</th><th align="center">II</th><th align="right">III</th></tr></thead><tbody><tr><td>欢迎</td><td align="center">关注</td><td align="right">微信</td></tr><tr><td>公号</td><td align="center">平台</td><td align="right">A2DATA</td></tr><tr><td>我们</td><td align="center">一起</td><td align="right">加油</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p><pre><code>    `代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code>(```)  代码...  代码...  代码...(```)</code></pre><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：</p><p>单行代码</p><pre><code>`create database hero;`</code></pre><p>代码块</p><pre><code>(```)    function fun(){         echo "这是一句非常牛逼的代码";    }    fun();(```)</code></pre><p>效果如下：</p><p>单行代码</p><pre><code>create database hero;</code></pre><p>代码块</p><pre><code>function fun(){  echo "这是一句非常牛逼的代码";}fun();</code></pre><h2 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h2><p><img src="/medias/loading.gif" data-original="/resource/image/markdown/1.png" alt=""></p><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[方形] -->B(圆角)    B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</code></pre><pre class=" language-mermaid"><code class="language-mermaid">graph TDA[方形] -->B(圆角)  B -->C{条件a}  C -->|a=1|D[结果1]  C -->|a=2|E[结果2]  F[竖向流程图]    </code></pre><p>效果如下：</p><p><img src="/medias/loading.gif" data-original="/resource/image/markdown/2.png" alt="img"></p><pre class=" language-mermaid"><code class="language-mermaid">graph LR    start[开始] --> input[输入A,B,C]    input --> conditionA{A是否大于B}    conditionA -- YES --> conditionC{A是否大于C}    conditionA -- NO --> conditionB{B是否大于C}    conditionC -- YES --> printA[输出A]    conditionC -- NO --> printC[输出C]    conditionB -- YES --> printB[输出B]    conditionB -- NO --> printC[输出C]    printA --> stop[结束]    printC --> stop    printB --> stop</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strive</title>
      <link href="/posts/18321.html"/>
      <url>/posts/18321.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="你为什么-努力"><a href="#你为什么-努力" class="headerlink" title="你为什么[努力]?"></a>你为什么[努力]?</h1><blockquote><p>一位麦肯斯7年老员工的忠告：所谓的能力问题，全都是态度问题！</p></blockquote><h2 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h2><p><strong>哪有那么多「能力问题」，在你牛到一定程度前，全是「态度问题」</strong> </p><p>职场上有句话，「<strong>ta这是能力问题，工作态度还是好的</strong>」。</p><p><strong>通常做得不够好的时候，「能力问题」似乎就比较容易得到谅解。</strong></p><p><code>我承认，时代、机缘、天赋、性格、出身、早年教育，等等这些我们无法全然掌控的因素，关系重大，或许将我们的个人「能力」划定在某个范围内。</code></p><p><code>生活，是公平的，你选择了自己轻松，那你身边的家人一定会为你的选择付出成本和代价。 有些事情，你尝试了不一定可以成功，但是你不尝试，肯定是一丝可能都没有。</code>·</p><h2 id="努力的理由"><a href="#努力的理由" class="headerlink" title="努力的理由"></a>努力的理由</h2><p><em>最近突然明白，一个人努力的理由是什么。</em></p><pre class=" language-javascript"><code class="language-javascript">是为了在看到自己喜欢的东西时，毫不犹豫拿起就付款的大方样子；是为了想去一个地方时再也不用精打细算的计划费用，而是领包就走毫无顾虑的潇洒样子；是为了遇到自己喜欢的人，再也不用担心自己配不上对方，而是在对方面前自信满满的样子；是为了过再也不用对别人点头哈腰的日子。</code></pre><blockquote><p>总结起来，就是一句话：</p><p>我之所以这么努力，</p><p>是为了能过上自己想要的生活，</p><p>能与自己所爱的人自信满满的打招呼，</p><p>而不是畏首畏尾，连说句“你好”都觉得卑微。</p></blockquote><p><img src="/medias/loading.gif" data-original="/resource/image/strive/1.png" alt=""></p><h2 id="梦在远方，路在脚下"><a href="#梦在远方，路在脚下" class="headerlink" title="梦在远方，路在脚下"></a>梦在远方，路在脚下</h2><blockquote><p>这世界上</p><p>从来没有谁能够</p><p>随随便便成功</p><p>天才也需要99%汗水的付出</p></blockquote><p><img src="/medias/loading.gif" data-original="/resource/image/strive/2.png" alt=""></p><p><strong>相信自己可以去改变境遇，有这点志气，才能有撸起袖子去行动的能力。</strong></p><ul><li>正如瑞达利欧在《原则》中所写：</li></ul><blockquote><p>没有什么比「明白现实世界如何运作」并且「如何应对它」更重要的事，而你在这个过程中的心态，决定了所有的差别。</p></blockquote><p><code>生活不止眼前的苟且，还有远方的苟且。</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 毒鸡汤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p></blockquote><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: [Deployment](</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SublimeText</title>
      <link href="/posts/55860.html"/>
      <url>/posts/55860.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SublimeText-必备插件"><a href="#SublimeText-必备插件" class="headerlink" title="SublimeText 必备插件"></a>SublimeText 必备插件</h1><h2 id="第一步-安装-Package-Control组件"><a href="#第一步-安装-Package-Control组件" class="headerlink" title="第一步 安装 Package Control组件"></a>第一步 安装 Package Control组件</h2><p><strong>快捷键</strong> Ctrl+`</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span>os<span class="token punctuation">;</span> pf <span class="token operator">=</span> <span class="token string">'Package Control.sublime-package'</span><span class="token punctuation">;</span> ipp <span class="token operator">=</span> sublime<span class="token punctuation">.</span><span class="token function">installed_packages_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">install_opener</span><span class="token punctuation">(</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">build_opener</span><span class="token punctuation">(</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">ProxyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>ipp<span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">urlopen</span><span class="token punctuation">(</span> <span class="token string">'http://sublime.wbond.net/'</span> <span class="token operator">+</span> pf<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'%20'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><em>如果在Perferences-&gt;中看到package control这一项，则安装成功。</em></p><h2 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h2><p>Mac 快捷键： Cmd+ shift + p</p><p>Windows : Ctrl + shift + p</p><p>1、打开    <strong>package control</strong></p><p>2、输入：  <strong>Install Package</strong></p><p>3、安装 ： <strong>ConvertToUTF8插件</strong></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>安装 <strong>Material theme 主题</strong></p><p>安装方法：Ctrl(Mac下Cmd)+Shift+P</p><ol><li><code>install package</code> -&gt; Material Theme</li><li><code>install package</code> -&gt; A File Icon</li></ol><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><blockquote><p>装好又到之前的 首选项—–用户设置（user ）：选择字体：如果存在就修改为Fira Code，不存在就添加下面这行代码，</p></blockquote><pre><code>"font_face": "Fira Code"</code></pre><p>至此大功告成，谢谢</p><p><strong>字体安装路径</strong></p><p>C:\Users\Desktop\FiraCode-master\FiraCode-master\distr\ttf</p><p><strong>FiraCode-master</strong></p><p>字体下载已经上传到微云</p><p><img src="/medias/loading.gif" data-original="%5Cresource%5Cimage%5Csublime%5Cxg.png" alt=""></p><p><strong>更多骚操作等待你一起探讨哦</strong></p><blockquote><p>如需破解广告版本，请添加微信公众号：A2Data</p><p>联系小编获取哦。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装</title>
      <link href="/posts/43150.html"/>
      <url>/posts/43150.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Linux简介"><a href="#一、Linux简介" class="headerlink" title="一、Linux简介"></a>一、Linux简介</h2><p>linux是一种由unix衍生出来的操作系统，，操作系统是用户和计算机之间的界面. 一方面操作系统管理着所有计算机系统资源,<br>另一方面操作系统为用户提供了一个抽象概念上的计算机. 在操作系统的<br>帮助下, 用户使用计算机时,避免了对计算机系统硬件的直接操作.<br>二、Linux国内流行版本介绍<br>1、Redhat<br>2、CentOS<br>3、Suse<br>4、红旗（redflag）</p><h2 id="三、Linux-优点"><a href="#三、Linux-优点" class="headerlink" title="三、Linux 优点"></a>三、Linux 优点</h2><p>1.稳定<br>2.多线程<br>3.架构可扩展<br>4.开源<br>5.简单（IT）</p><h2 id="四、Linux-缺点"><a href="#四、Linux-缺点" class="headerlink" title="四、Linux 缺点"></a>四、Linux 缺点</h2><p>1.技术要求相对较强<br>2.图形界面不够好<br>五、安装<br>安装RedHat系统的方法有很多种，我们主要介绍如何使用光盘安装方法安装RedHat系统。<br>既然说Linux是一种操作系统那么最常用的操作系统就是windows日常生活中它是一般装到我们的pc上的，大多数的企业会使用Linux系统装在服务器上的，所以为了模拟环境我们用了一个软件叫做VMware它能够帮我们实现一个虚拟的网络环境还支持很多系统，下面我们就来安装一下Redhat6.4<br>准备镜像<br>rhel-server-6.4-x86_64-dvd.iso<br>首先安装VMware<br>这个直接去网上下载安装就好</p><p>安装好以后我们会看见一下这个界面建议大家使用英文版的，在企业工作大多数都是英文，先熟悉一下环境</p><p>1、首先我们新建一个虚拟机</p><p>2、选择典型</p><p>3、选择稍后安装操作系统，后期我们自己挂载镜像</p><p>4、接下来选择linux的版本，根据自己下载的镜像版本而定</p><p>5、下一步给虚拟机取一个名字，给它一个存放路径，注意：路径最好不要出现中文</p><p>6、下面是磁盘大小和，将虚拟磁盘统一成一个文件</p><p>7、检查一下如果没有问题点击finish</p><p>8、在左上方会出现一个linux这就是我们即将安装的虚拟机，然后选择镜像</p><p>9、把开始下载的镜像路径添加到上面点击ok</p><p>10、然后运行此虚拟机</p><p>Linux安装<br>1、选择第一项，然后回车：</p><p>2、跳过光盘质量测试提示<br>上一步回车后，将出现下面的界面，使用“Tab”键切换到“Skip”，然后回车：</p><p>3、点击next如果鼠标不能移动可用Ctrl+Alt进行切换</p><p>4、选择安装过程使用的语言<br>选择安装过程使用的语言：中文(简体)，然后点“Next”（还是建议大家使用英文的，这里为了方便讲解就用中文了）</p><p>5、设置键盘<br>设置键盘为“美国英语式”，然后点“下一步”：</p><p>6、选择系统使用的存储设备<br>一般情况，均默认选择“基本存储设备”，然后点“下一步”：</p><p>7、出现下图提示时，点击“是，忽略所有数据”：</p><p>8、设置计算机名<br>可根据实际情况，对计算机主机名进行命名也可以安装好后用命令行进行更改</p><p>9、配置网络<br>点击界面左下角的“配置网络”，配置服务器网络：<br>选中eth0进行配置</p><ol><li>点击“编辑”</li><li>勾上“自动连接”</li><li>选择“IPv4设置”选项卡，“方法”选择“手动”</li><li>点击“添加”</li><li>分别点击并配置“地址”、“子网掩码”、“网关”</li><li>填上“DNS服务器”地址（如果没有可不填，多个DNS用逗号分隔）</li><li>点击“应用”完成配置<br>可参考下图：</li></ol><p>选择系统时区<br>时区默认为“亚洲/上海”，注意需要去掉“系统时钟使用UTC时间”前面的勾，然后点“下一步”：</p><p>设置root账户密码<br>建议输入一个复杂组合的密码，密码包含：大写、小写、数字、符号</p><p>10、磁盘分区<br>创建自定义布局分区</p><p>10.1、创建第1个分区（启动分区）：</p><p>10.2、配置<br>1.“挂载点”选择“/boot”<br>2.“大小(MB)”填入“300”<br>3.点击“确定”</p><p>10.3 创建第2个分区（主分区）<br>1.“挂载点”选择“/home”<br>2.“大小(MB)”填入“8000”（根据实际硬盘大小填写）<br>3.点击“确定”</p><p>11、重复创建步骤<br>1.“文件系统类型”选择“swap”<br>2.“大小(MB)”填入“800”（根据实际内存大小填写，一般为内存的1.5-2倍，不大于8G）<br>3.点击“确定”<br>创建第4个分区（根分区）：<br>重复创建步骤<br>1.“挂载点”选择“/”<br>2.勾选“使用全部可用分区”<br>3.点击“确定”</p><p>点击下一步进行格式化</p><p>点击修改写入磁盘</p><p>只有一个盘所以点击下一步即可</p><p>基础软件安装</p><p>各项包含软件<br>Desktop :基本的桌面系统，包括常用的桌面软件，如文档查看工具。<br>Minimal Desktop :基本的桌面系统，包含的软件更少。<br>Minimal :基本的系统，不含有任何可选的软件包。<br>Basic Server：安装的基本系统的平台支持，不包含桌面。<br>Database Server :基本系统平台，加上mysql和PostgreSQL数据率，无桌面。<br>Web Server :基本系统平台，加上PHP, Web server，还有mysqI和PostgreSQL数据库的客户端，无桌面。<br>Virtual Host :基本系统加虚拟化平台。<br>Software Development Workstation :包含的软件包较多，基本系统，虚拟化平台，桌面环境，开发工具。<br>注意：我们一般运行的时候都不会使用桌面，这里我们就不安装桌面了，其他的软件后期需要我们也可以再安装。</p><p>勾选ftp服务器</p><p>点击下一步开始安装</p><p>至此完成安装</p><p>进入系统</p><p>出现以下界面证明你成功了</p><p>使用root用户，输入你的密码就可以使用了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo图片问题</title>
      <link href="/posts/63604.html"/>
      <url>/posts/63604.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>使用hexo上传图片，但是发现在文章中引用本地图片时总是显示不出来。<br>花费了许久时间才解决这个问题。<br>因此将一些解决经验整理出来，希望能帮助到大家。</p></blockquote><h3 id="一、插件安装与配置"><a href="#一、插件安装与配置" class="headerlink" title="一、插件安装与配置"></a>一、插件安装与配置</h3><blockquote><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</p></blockquote><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p><strong>但是这个插件的内容需要修改【不然可能会出Bug】</strong></p><p><strong>打开<code>/node_modules/hexo-asset-image/index.js</code>，将内容更换为下面的代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token string">'use strict'</span><span class="token punctuation">;</span>var cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span>function <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span>var version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>  var config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>        var link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>       var beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       var beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>    var endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    var toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      var key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      var $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        ignoreWhitespace<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>            var src <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">/</span>http<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">.</span>*<span class="token operator">|</span>\<span class="token operator">/</span>\<span class="token operator">/</span><span class="token punctuation">.</span>*<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span><span class="token operator">/</span><span class="token operator">^</span>\s<span class="token operator">*</span>\<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>              <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>              var linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              var srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              $<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="打开根目录下的-config-yml文件，修改下述内容"><a href="#打开根目录下的-config-yml文件，修改下述内容" class="headerlink" title="打开根目录下的_config.yml文件，修改下述内容"></a>打开根目录下的_config.yml文件，修改下述内容</h4><pre><code>post_asset_folder: true</code></pre><h3 id="二、问题推测"><a href="#二、问题推测" class="headerlink" title="二、问题推测"></a>二、问题推测</h3><h4 id="1、本地图片没有有效的上传至github仓库中，导致引用无效"><a href="#1、本地图片没有有效的上传至github仓库中，导致引用无效" class="headerlink" title="1、本地图片没有有效的上传至github仓库中，导致引用无效"></a>1、本地图片没有有效的上传至github仓库中，导致引用无效</h4><p><code>解决方案，安装插件，请看上文如何安装</code></p><h4 id="2、本地图片没有存放在同名文件夹下"><a href="#2、本地图片没有存放在同名文件夹下" class="headerlink" title="2、本地图片没有存放在同名文件夹下"></a>2、本地图片没有存放在同名文件夹下</h4><p><code>解决方案，将需要引用的本地图片存放在与文章名相同的文件夹中</code></p><h4 id="3、图片路径出错"><a href="#3、图片路径出错" class="headerlink" title="3、图片路径出错"></a>3、图片路径出错</h4><p><code>这里多数人可能会将url 写成自己的域名。切记：需要写成自己github项目的地址。我刚开始也错了。</code></p><h4 id="4、相对路径引用的标签插件"><a href="#4、相对路径引用的标签插件" class="headerlink" title="4、相对路径引用的标签插件"></a>4、相对路径引用的标签插件</h4><blockquote><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p></blockquote><p><code>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</code></p><p><img src="/medias/loading.gif" data-original="/images/wuxiao.png" alt=""><br><strong><code>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/a2data.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</code></strong></p><p><strong>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</strong><br>————————————————</p><pre><code>{% asset_img example.jpg This is an example image %}</code></pre><p><strong>这是一个MD引入图片</strong></p><p><img src="/medias/loading.gif" data-original="/images/wuxiao.png" alt="wuxiao"></p><p><strong>这是标签引用方式</strong><br><img src="/medias/loading.gif" data-original="/images/wuxiao.png" alt="wuxiao"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux初识</title>
      <link href="/posts/40647.html"/>
      <url>/posts/40647.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h2><blockquote><p><strong>/</strong>          —– 根目录<br><strong>/bin</strong>       二进制可执行命令<br><strong>/dev</strong>       设备特殊文件<br><strong>/etc</strong>       系统管理和配置文件<br><strong>/etc/rc.d</strong>  启动的配置文件和脚本<br><strong>/home</strong>      用户主目录的基点<br><strong>/lib</strong>       标准程序设计库<br><strong>/sbin</strong>      超级管理命令<br><strong>/mnt</strong>       系统提供这个目录是让用户临时挂载其他的文件系统<br><strong>/root</strong>      系统管理员的主目录</p></blockquote><hr><blockquote><p><strong>/Lost+found</strong>   这个目录平时是空的， 系统非正常关机而留下“无家可归”的文件<br><strong>/proc</strong>         虚拟的目录，是系统内存的映射<br><strong>/var</strong>          某些大文件的溢出区<br><strong>/usr</strong>          应用程序和文件几乎都在这个目录.<br><strong>boot</strong>          内核文件 Linux 系统文件（100MB-200MB） 服务器500MB<br><strong>opt</strong>—-临时文件</p></blockquote><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><pre><code>图形界面 到 字符界面**Ctrl Alt Fn** （F1-----F6） init 3字符界面 到 图形界面 **Alt F7**   init 5</code></pre><blockquote><p><strong>Tab键</strong> ：自动补齐<br>反斜杠<strong>\</strong> ：强制换行<br><strong>ctrl+u</strong> 清空至行首<br><strong>ctrl+k</strong> 清空至行尾<br><strong>ctrl+L</strong> 清屏<br><strong>ctrl+c</strong> 取消本次命令编辑</p></blockquote><hr><blockquote><p><strong>touch</strong> 创建文件<br><strong>mkdir</strong> 创建目录  <strong>mkdir -p</strong>  创建嵌套的多层目录结构<br><strong>cd</strong> 切换工作目录 <strong>cd -</strong>  切换两个目录  <strong>cd ..</strong> 返回上个目录<br><strong>du</strong> 统计目录及文件 <strong>du -s</strong> 只统计大小 <strong>du -a</strong> 统计所有文件 <strong>du -h</strong> 人性化显示<br><strong>du -sh *  查看所有文件及大小</strong><br><strong>pwd</strong> ——- 查看当前所在位置<br><strong>vim</strong>  ——查看日志（编辑器）<br><strong>Ls</strong> —— 打印（当前目录下所包含的内容）ls 显示目录内容（ls=ll）<br><strong>./</strong> ——直接运行脚本</p></blockquote><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><blockquote><p><strong>help</strong>， <strong>-help man info</strong> （man ls）<br>常用命令 <strong>uname</strong> 查看系统信息及内核版本（-a 显示主机；-r 显示内核版本）</p></blockquote><blockquote><p><strong>hostname</strong> 查看主机名<br><strong>vim /etc/sysconfig/network</strong> 更改主机名<br><strong>ifconfig</strong> 查看网络信息</p></blockquote><p><strong>shutdown -h now</strong> | <strong>poweroff</strong> | <strong>init 0</strong>     关闭计算机<br><strong>shutdown  -r now</strong>  |  <strong>reboot</strong>  |  <strong>init 6</strong>   重启计算机</p><h3 id="Ln链接文件"><a href="#Ln链接文件" class="headerlink" title="Ln链接文件"></a>Ln链接文件</h3><blockquote><p>Ln <strong>要链接的文件</strong> <strong>链接到什么地方</strong><br>ln创建链接文件 ln -s 软链接 ln 硬链</p></blockquote><h3 id="CP-复制"><a href="#CP-复制" class="headerlink" title="CP 复制"></a><strong>CP</strong> <strong>复制</strong></h3><blockquote><p><strong>cp=cp-i  cp -r 递归复制</strong></p><pre><code>cp  -r 递归复制整个目录树  cp -p 保持源文件的属性不变cp -f 强制覆盖目标同名文件或目录cp -i 需要覆盖文件或目录时进行提醒</code></pre></blockquote><pre><code>------### **RM 删除**</code></pre><p>rm -rf 递归强行删除文件或者目录 不进行提醒<br>rm -f  强行删除文件或者目录，不进行提醒<br>rm -r 递归删除整个目录树<br>rm - i 删除文件或者目录时提醒用户确认<br>```</p><h4 id="MV-移动（改名）"><a href="#MV-移动（改名）" class="headerlink" title="MV 移动（改名）"></a><strong>MV 移动</strong>（改名）</h4><blockquote><p><strong>Cat</strong> 查看文件<br><strong>More</strong> 分页查看文件 （不可返回）<br><strong>Less</strong> 分页查看文件 （可返回）<br><strong>Head</strong> 查看文件头（前10行）<br><strong>Tail</strong> 查看文件尾 （后10行）<br><strong>WC 统计</strong> wc -l 统计行数 wc -w 统计单词个数 wc -c 统计字节数</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
